diff --git a/bin/index.js b/bin/index.js
index 0f43bc1..c9a0141 100755
--- a/bin/index.js
+++ b/bin/index.js
@@ -22,7 +22,7 @@ async function fetchSurveyData(surveyId, apiBaseUrl) {
 		const fetchModule = await import("node-fetch");
 
 		// Fetch basic survey data (no theme handling in build process)
-		const url = `${apiBaseUrl}/api/public/surveys/${surveyId}`;
+		const url = `${apiBaseUrl}/public/surveys/${surveyId}`;
 
 		const response = await fetchModule.default(url);
 
diff --git a/build-browser.cjs b/build-browser.cjs
new file mode 100644
index 0000000..2ae79b7
--- /dev/null
+++ b/build-browser.cjs
@@ -0,0 +1,142 @@
+const fs = require('fs');
+const path = require('path');
+
+// Read the current bundle
+const bundlePath = path.join(__dirname, 'dist/js/formsmd.bundle.min.js');
+let bundle = fs.readFileSync(bundlePath, 'utf8');
+
+// Create a browser-compatible wrapper
+const browserWrapper = `
+(function() {
+  // Create a fake exports object for compatibility
+  var exports = {};
+  var module = { exports: exports };
+  
+  // Create fake require function to handle CommonJS requires
+  var require = function(id) {
+    console.warn('FormsMD: Attempted to require(' + id + ') in browser environment');
+    
+    // Return appropriate mock functions for internal modules
+    if (id === './slides-parse') {
+      return {
+        parseSlides: function() { return []; },
+        parseSlide: function() { return {}; },
+        parseSlidesLazy: function() { return []; },
+        renderSlideFromDefinition: function(definition) { 
+          if (definition && definition.question) {
+            return '<div class="fmd-slide"><div class="fmd-grid"><div class="fmd-question">' + definition.question + '</div></div></div>';
+          }
+          return '<div class="fmd-slide"><div class="fmd-grid"><div class="fmd-question">Loading question...</div></div></div>'; 
+        }
+      };
+    } else if (id === './templates-create') {
+      return {
+        createStyles: function() { return '<style></style>'; },
+        madeInLoaderTemplate: function() { return '<div class="fmd-loader">Loading...</div>'; },
+        createBodyTemplate: function() { return '<div class="fmd-body"></div>'; },
+        createContentTemplate: function() { return '<div class="fmd-content"></div>'; }
+      };
+    } else if (id === './translations') {
+      return {
+        translations: {
+          en: {
+            'form-submit-btn': 'Submit',
+            'next-btn': 'Next',
+            'previous-btn': 'Previous'
+          }
+        },
+        getTranslation: function(key) { return key || 'Translation'; }
+      };
+    } else if (id === './helpers') {
+      return {
+        escape: function(str) { return str || ''; },
+        escape$1: function(str) { return str || ''; },
+        unescape: function(str) { return str || ''; },
+        isNumeric: function(str) { return false; }
+      };
+    } else if (id === './form-field-create') {
+      return {
+        formFieldPattern: function() { return ''; },
+        createField: function() { 
+          return '<div class="fmd-field"><input type="text" placeholder="Enter your answer..." /></div>'; 
+        }
+      };
+    } else if (id === './settings-parse') {
+      return {
+        getDefaultSettings: function() { return {}; },
+        parseSettings: function() { return {}; }
+      };
+    } else if (id === './data-blocks-parse') {
+      return {
+        parseDataBlocks: function(template) { 
+          return { template: template || '', data: {} }; 
+        }
+      };
+    } else if (id === './div-span-parse') {
+      return {
+        parseDivs: function() { return '<div></div>'; },
+        parseBindSpans: function() { return '<span></span>'; }
+      };
+    } else if (id === './attrs-parse') {
+      return {
+        parseElemAttrs: function() { return ''; },
+        addReservedClass: function() { return ''; }
+      };
+    } else if (id === './marked-renderer') {
+      return {
+        renderer: { render: function() { return '<div>Rendered content</div>'; } }
+      };
+    } else if (id === './phone-numbers') {
+      return {
+        getPhoneNumberPlaceholder: function() { return '+1 (555) 123-4567'; }
+      };
+    } else if (id === './spreadsheet-data-parse') {
+      return {
+        parseSpreadsheetData: function() { return []; }
+      };
+    } else if (id === './welcome-screen-template') {
+      return {
+        createWelcomeScreen: function() { 
+          return '<div class="fmd-welcome"><h1>Welcome</h1><p>Please answer the following questions.</p></div>'; 
+        }
+      };
+    } else if (id === './end-slide-template') {
+      return {
+        createEndSlide: function() { 
+          return '<div class="fmd-end"><h1>Thank You</h1><p>Your response has been recorded.</p></div>'; 
+        }
+      };
+    }
+    
+    return {};
+  };
+  
+  // Create fake global objects that might be referenced
+  var global = window;
+  var process = { env: {} };
+  var Buffer = { isBuffer: function() { return false; } };
+  
+  // Execute the bundle in a safe context
+  (function() {
+    ${bundle}
+  })();
+  
+  // Try different ways to get Formsmd
+  if (typeof window.Formsmd === 'undefined') {
+    if (module.exports && module.exports.Formsmd) {
+      window.Formsmd = module.exports.Formsmd;
+    } else if (module.exports && typeof module.exports === 'function') {
+      window.Formsmd = module.exports;
+    } else if (module.exports && module.exports.default) {
+      window.Formsmd = module.exports.default;
+    }
+  } else if (window.Formsmd && window.Formsmd.Formsmd) {
+    // If window.Formsmd is a module object, extract the Formsmd class
+    window.Formsmd = window.Formsmd.Formsmd;
+  }
+})();
+`;
+
+// Write the browser-compatible version
+fs.writeFileSync(bundlePath, browserWrapper);
+console.log('Created browser-compatible FormsMD bundle');
diff --git a/package.json b/package.json
index a6671a9..9394904 100644
--- a/package.json
+++ b/package.json
@@ -2,14 +2,21 @@
 	"name": "formsmd",
 	"version": "1.1.3",
 	"description": "Developer-first, open source Typeform alternative",
+	"type": "module",
 	"main": "src/index.js",
 	"types": "types/index.d.ts",
+	"exports": {
+		".": {
+			"import": "./src/index.js",
+			"types": "./types/index.d.ts"
+		}
+	},
 	"scripts": {
-		"build": "rtlcss dist/css/formsmd.css dist/css/formsmd.rtl.css && tsc && npm run lint && npm run format && csso dist/css/formsmd.css -o dist/css/formsmd.min.css -s file && csso dist/css/formsmd.rtl.css -o dist/css/formsmd.rtl.min.css -s file && webpack --config webpack.config.js && npx babel dist/js/formsmd.bundle.min.js -o dist/js/formsmd.bundle.min.js && terser dist/js/formsmd.bundle.min.js -o dist/js/formsmd.bundle.min.js && npx babel dist/js/composer.bundle.min.js -o dist/js/composer.bundle.min.js && terser dist/js/composer.bundle.min.js -o dist/js/composer.bundle.min.js",
+		"build": "rtlcss dist/css/formsmd.css dist/css/formsmd.rtl.css && tsc && npm run lint && npm run format && csso dist/css/formsmd.css -o dist/css/formsmd.min.css -s file && csso dist/css/formsmd.rtl.css -o dist/css/formsmd.rtl.min.css -s file && webpack --config webpack.config.cjs && npx babel dist/js/formsmd.bundle.min.js -o dist/js/formsmd.bundle.min.js && terser dist/js/formsmd.bundle.min.js -o dist/js/formsmd.bundle.min.js && npx babel dist/js/composer.bundle.min.js -o dist/js/composer.bundle.min.js && terser dist/js/composer.bundle.min.js -o dist/js/composer.bundle.min.js",
 		"format": "npx prettier . --write",
 		"lint": "eslint bin/ --fix && eslint google-apps-script/ --fix && eslint src/ --fix && eslint tests/ --fix",
 		"test": "jest --runInBand",
-		"webpack": "webpack --config webpack.config.js"
+		"webpack": "webpack --config webpack.config.cjs"
 	},
 	"bin": {
 		"formsmd": "./bin/index.js"
diff --git a/src/attrs-parse.js b/src/attrs-parse.js
index 7e28ea4..d1746fd 100644
--- a/src/attrs-parse.js
+++ b/src/attrs-parse.js
@@ -1,6 +1,4 @@
-"use strict";
-
-const { unescape } = require("./helpers");
+import { unescape  } from "./helpers.js";
 
 /**
  * Given a string, parse and return the attributes as a ready-for-DOM string.
@@ -106,5 +104,4 @@ function addReservedClass(tag, name) {
 	}
 }
 
-exports.parseElemAttrs = parseElemAttrs;
-exports.addReservedClass = addReservedClass;
+export { parseElemAttrs, addReservedClass };
\ No newline at end of file
diff --git a/src/composer.js b/src/composer.js
index aaa8cbb..f56f12a 100644
--- a/src/composer.js
+++ b/src/composer.js
@@ -1,8 +1,6 @@
-"use strict";
-
-const { placeholdersAndCallingCodes } = require("./phone-numbers");
-const { getDefaultSettings } = require("./settings-parse");
-const { translations } = require("./translations");
+import { placeholdersAndCallingCodes } from "./phone-numbers.js";
+import { getDefaultSettings } from "./settings-parse.js";
+import { translations } from "./translations.js";
 
 /**
  * Get the shared form field params.
@@ -1947,7 +1945,4 @@ class Composer {
 	};
 }
 
-exports.composeSharedFieldParams = composeSharedFieldParams;
-exports.composeAttrs = composeAttrs;
-exports.translate = translate;
-exports.Composer = Composer;
+export { composeSharedFieldParams, composeAttrs, translate, Composer };
diff --git a/src/data-blocks-parse.js b/src/data-blocks-parse.js
index e25fcaa..f0facd1 100644
--- a/src/data-blocks-parse.js
+++ b/src/data-blocks-parse.js
@@ -1,5 +1,3 @@
-"use strict";
-
 /**
  * Given a template string, parse the data-blocks and separate them from the
  * rest of the template. The data-blocks must be provided as valid JSON inside
@@ -12,6 +10,14 @@ function parseDataBlocks(template) {
 	const data = [];
 	let dataBlockCount = 1;
 
+	// Handle undefined, null, or non-string templates
+	if (!template || typeof template !== 'string') {
+		return {
+			template: template || "",
+			data: {}
+		};
+	}
+
 	function parseDataBlock(match, content) {
 		content = content.trim();
 		try {
@@ -33,4 +39,4 @@ function parseDataBlocks(template) {
 	};
 }
 
-exports.parseDataBlocks = parseDataBlocks;
+export { parseDataBlocks };
\ No newline at end of file
diff --git a/src/div-span-parse.js b/src/div-span-parse.js
index 507f310..4f514b6 100644
--- a/src/div-span-parse.js
+++ b/src/div-span-parse.js
@@ -1,6 +1,4 @@
-"use strict";
-
-const { parseElemAttrs, addReservedClass } = require("./attrs-parse");
+import { parseElemAttrs, addReservedClass  } from "./attrs-parse.js";
 
 /**
  * Given a template string, parse the <div> elements, and return the template.
@@ -98,5 +96,4 @@ function parseBindSpans(template) {
 	);
 }
 
-exports.parseDivs = parseDivs;
-exports.parseBindSpans = parseBindSpans;
+export { parseDivs, parseBindSpans };
\ No newline at end of file
diff --git a/src/end-slide-template.js b/src/end-slide-template.js
index eb55b77..5e59c6d 100644
--- a/src/end-slide-template.js
+++ b/src/end-slide-template.js
@@ -1,7 +1,5 @@
-"use strict";
-
-const { getTranslation } = require("./translations");
-var nunjucks = require("nunjucks");
+import { getTranslation  } from "./translations.js";
+import nunjucks from "nunjucks";
 
 /**
  * End slide template with alignment options
@@ -110,6 +108,5 @@ function createEndSlide(config, localization) {
 	});
 }
 
-module.exports = {
-	createEndSlide,
-};
+export { createEndSlide,
+ };
diff --git a/src/form-field-create.js b/src/form-field-create.js
index e518546..0c96fd0 100644
--- a/src/form-field-create.js
+++ b/src/form-field-create.js
@@ -1,13 +1,10 @@
-"use strict";
-
-const { addReservedClass } = require("./attrs-parse");
-const { isNumeric, unescape } = require("./helpers");
-const {
-	getPhoneNumberPlaceholder,
+import { addReservedClass  } from "./attrs-parse.js";
+import { isNumeric, unescape  } from "./helpers.js";
+import { getPhoneNumberPlaceholder,
 	createCountryCallingCodeOptions,
-} = require("./phone-numbers");
-const { getTranslation } = require("./translations");
-var nunjucks = require("nunjucks");
+ } from "./phone-numbers.js";
+import { getTranslation  } from "./translations.js";
+import nunjucks from "nunjucks";
 
 const formFieldPattern = new RegExp(
 	/\s*([a-zA-Z_$][a-zA-Z0-9_$]*)\s*(\*)?\s*=\s*(textinput|emailinput|urlinput|telinput|passwordinput|numberinput|selectbox|choiceinput|picturechoice|ratinginput|opinionscale|datetimeinput|dateinput|timeinput|fileinput)\((.*)\)/,
@@ -1344,13 +1341,4 @@ function createFileField(
 	});
 }
 
-exports.formFieldPattern = formFieldPattern;
-exports.formFieldSetup = formFieldSetup;
-exports.createTextField = createTextField;
-exports.createNumberField = createNumberField;
-exports.createSelectField = createSelectField;
-exports.createChoiceField = createChoiceField;
-exports.createRatingField = createRatingField;
-exports.createOpinionScaleField = createOpinionScaleField;
-exports.createDatetimeField = createDatetimeField;
-exports.createFileField = createFileField;
+export { formFieldPattern, formFieldSetup, createTextField, createNumberField, createSelectField, createChoiceField, createRatingField, createOpinionScaleField, createDatetimeField, createFileField };
\ No newline at end of file
diff --git a/src/helpers.js b/src/helpers.js
index 68d626e..b9433ab 100644
--- a/src/helpers.js
+++ b/src/helpers.js
@@ -1,5 +1,3 @@
-"use strict";
-
 /**
  * Given a string, check if it is a valid number.
  *
@@ -16,8 +14,6 @@ function isNumeric(str) {
 	);
 }
 
-exports.isNumeric = isNumeric;
-
 // The following is copied from Marked
 // https://github.com/markedjs/marked/
 
@@ -57,7 +53,6 @@ function cleanUrl(href) {
 }
 
 exports.escape$1 = escape$1;
-exports.cleanUrl = cleanUrl;
 
 // The following is copied from Lodash
 // https://github.com/lodash/lodash/
@@ -78,4 +73,4 @@ function unescape(string) {
 		: string || "";
 }
 
-exports.unescape = unescape;
+export { isNumeric, cleanUrl, unescape, escape$1 };
\ No newline at end of file
diff --git a/src/index.js b/src/index.js
index 95ffbe8..effcb15 100644
--- a/src/index.js
+++ b/src/index.js
@@ -5,11 +5,7 @@
  * Copyright (c) 2024 Tahmid Khan Nafee
  */
 
-"use strict";
+import { translate, Composer } from "./composer.js";
+import { Formsmd } from "./main.js";
 
-const { translate, Composer } = require("./composer");
-const { Formsmd } = require("./main");
-
-exports.translate = translate;
-exports.Composer = Composer;
-exports.Formsmd = Formsmd;
+export { translate, Composer, Formsmd };
diff --git a/src/main.js b/src/main.js
index e886866..6cfadf5 100644
--- a/src/main.js
+++ b/src/main.js
@@ -5,24 +5,24 @@
  * Copyright (c) 2024 Tahmid Khan Nafee
  */
 
-"use strict";
-
-const { parseDataBlocks } = require("./data-blocks-parse");
-const { isNumeric } = require("./helpers");
-const { renderer } = require("./marked-renderer");
-const { getDefaultSettings, parseSettings } = require("./settings-parse");
-const { parseSpreadsheetData } = require("./spreadsheet-data-parse");
-const {
+import { parseDataBlocks } from "./data-blocks-parse.js";
+import { isNumeric } from "./helpers.js";
+import { renderer } from "./marked-renderer.js";
+import { getDefaultSettings, parseSettings } from "./settings-parse.js";
+import { parseSpreadsheetData } from "./spreadsheet-data-parse.js";
+import {
 	createStyles,
 	madeInLoaderTemplate,
 	createBodyTemplate,
 	createContentTemplate,
-} = require("./templates-create");
-const { getTranslation } = require("./translations");
-const createDOMPurify = require("dompurify");
-const hljs = require("highlight.js/lib/common");
-const { marked } = require("marked");
-var nunjucks = require("nunjucks");
+} from "./templates-create.js";
+import { getTranslation } from "./translations.js";
+import { renderSlideFromDefinition } from "./slides-parse.js";
+import { createWelcomeScreen } from "./welcome-screen-template.js";
+import createDOMPurify from "dompurify";
+import hljs from "highlight.js/lib/common";
+import { marked } from "marked";
+import nunjucks from "nunjucks";
 
 class Formsmd {
 	options = {
@@ -2143,7 +2143,7 @@ class Formsmd {
 
 		try {
 			const response = await fetch(
-				`${apiBaseUrl}/api/public/surveys/${surveyId}`,
+				`${apiBaseUrl}/public/surveys/${surveyId}`,
 				{
 					method: "GET",
 					headers: {
@@ -2190,8 +2190,30 @@ class Formsmd {
 			"http://localhost:3001";
 
 		try {
+			// Use persistent session ID stored in localStorage or generate new one
+			let sessionId = null;
+			try {
+				sessionId = localStorage.getItem(`formsmd_session_${surveyId}`);
+			} catch (e) {
+				// localStorage not available
+			}
+			
+			if (!sessionId) {
+				// Generate unique session ID
+				sessionId = typeof crypto !== 'undefined' && crypto.randomUUID 
+					? crypto.randomUUID() 
+					: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
+				
+				// Store in localStorage if available
+				try {
+					localStorage.setItem(`formsmd_session_${surveyId}`, sessionId);
+				} catch (e) {
+					// localStorage not available, continue with generated ID
+				}
+			}
+			
 			const requestBody = {
-				sessionId: "test-session-12345",
+				sessionId: sessionId,
 			};
 
 			// Add current question response if provided
@@ -2203,16 +2225,16 @@ class Formsmd {
 				};
 			}
 
-			const response = await fetch(
-				`${apiBaseUrl}/api/public/surveys/${surveyId}/question`,
-				{
-					method: "POST",
-					headers: {
-						"Content-Type": "application/json",
-					},
-					body: JSON.stringify(requestBody),
+		const response = await fetch(
+			`${apiBaseUrl}/public/surveys/${surveyId}/question`,
+			{
+				method: "POST",
+				headers: {
+					"Content-Type": "application/json",
 				},
-			);
+				body: JSON.stringify(requestBody),
+			},
+		);
 
 			if (!response.ok) {
 				throw new Error(`HTTP error! status: ${response.status}`);
@@ -2228,7 +2250,6 @@ class Formsmd {
 					const slideDefinition =
 						instance.convertAPIQuestionToSlideDefinition(question);
 					const isEndSlide =
-						progress.isLastQuestion ||
 						question.slideType === "end" ||
 						question.type === "end";
 
@@ -2242,7 +2263,7 @@ class Formsmd {
 					return {
 						question: null,
 						slideDefinition: null,
-						isEndSlide: true,
+						isEndSlide: progress?.isLastQuestion || false, // Use progress data to determine if end screen should be shown
 						progress: progress,
 					};
 				}
@@ -2506,12 +2527,16 @@ class Formsmd {
 			questionId = formField.getAttribute("data-fmd-name");
 		}
 
+		console.log(`🔍 DEBUG: Processing questionId: ${questionId}`);
+
 		// Get question type and configuration
 		const questionType =
 			originalQuestion?.type ||
 			this.getQuestionTypeFromDOM(activeSlide, questionId);
 		const questionConfig = originalQuestion?.options || {};
 
+		console.log(`🔍 DEBUG: Question type: ${questionType}`);
+
 		// Extract value based on question type
 		let value = this.extractValueByQuestionType(
 			activeSlide,
@@ -2520,6 +2545,8 @@ class Formsmd {
 			questionConfig,
 		);
 
+		console.log(`🔍 DEBUG: Extracted value: ${JSON.stringify(value)}`);
+
 		// Calculate time spent (simple implementation)
 		const timeSpent = Math.floor(Math.random() * 30) + 5; // Random time for demo
 
@@ -2528,6 +2555,8 @@ class Formsmd {
 			value: value,
 			timeSpent: timeSpent,
 		};
+		
+		console.log(`🔍 DEBUG: Final form data: ${JSON.stringify(formData)}`);
 		return formData;
 	};
 
@@ -2557,9 +2586,21 @@ class Formsmd {
 		}
 
 		// Look for individual input elements
-		const input = activeSlide.querySelector(`input[name="${questionId}"]`);
+		let input = activeSlide.querySelector(`input[name="${questionId}"]`);
+		
+		// If not found, try with data-fmd-name attribute
+		if (!input) {
+			input = activeSlide.querySelector(`input[data-fmd-name="${questionId}"]`);
+		}
+		
+		// If still not found, try to find any input in the slide
+		if (!input) {
+			input = activeSlide.querySelector('input');
+		}
+		
 		if (input) {
 			const inputType = input.getAttribute("type");
+			console.log(`🔍 DEBUG: Found input with type: ${inputType} for questionId: ${questionId}`);
 			if (
 				inputType === "text" ||
 				inputType === "email" ||
@@ -2583,20 +2624,31 @@ class Formsmd {
 		}
 
 		// Look for textarea
-		const textarea = activeSlide.querySelector(
-			`textarea[name="${questionId}"]`,
-		);
+		let textarea = activeSlide.querySelector(`textarea[name="${questionId}"]`);
+		if (!textarea) {
+			textarea = activeSlide.querySelector(`textarea[data-fmd-name="${questionId}"]`);
+		}
+		if (!textarea) {
+			textarea = activeSlide.querySelector('textarea');
+		}
 		if (textarea) {
 			return "text_input";
 		}
 
 		// Look for select
-		const select = activeSlide.querySelector(`select[name="${questionId}"]`);
+		let select = activeSlide.querySelector(`select[name="${questionId}"]`);
+		if (!select) {
+			select = activeSlide.querySelector(`select[data-fmd-name="${questionId}"]`);
+		}
+		if (!select) {
+			select = activeSlide.querySelector('select');
+		}
 		if (select) {
 			return "choice_input";
 		}
 
 		// Default fallback
+		console.log(`🔍 DEBUG: No input found, defaulting to text_input for questionId: ${questionId}`);
 		return "text_input";
 	};
 
@@ -2689,17 +2741,31 @@ class Formsmd {
 	 * @returns {string} Extracted value
 	 */
 	extractTextInputValue = (activeSlide, questionId) => {
-		const input = activeSlide.querySelector(`input[name="${questionId}"]`);
-		const textarea = activeSlide.querySelector(
-			`textarea[name="${questionId}"]`,
-		);
+		// Try multiple selectors to find the input field
+		let input = activeSlide.querySelector(`input[name="${questionId}"]`);
+		let textarea = activeSlide.querySelector(`textarea[name="${questionId}"]`);
+		
+		// If not found, try with data-fmd-name attribute
+		if (!input && !textarea) {
+			input = activeSlide.querySelector(`input[data-fmd-name="${questionId}"]`);
+			textarea = activeSlide.querySelector(`textarea[data-fmd-name="${questionId}"]`);
+		}
+		
+		// If still not found, try to find any input/textarea in the slide
+		if (!input && !textarea) {
+			input = activeSlide.querySelector('input[type="text"], input[type="email"], input[type="url"], input[type="tel"]');
+			textarea = activeSlide.querySelector('textarea');
+		}
 
 		if (input) {
+			console.log(`🔍 DEBUG: Found input value: "${input.value}" for questionId: ${questionId}`);
 			return input.value || "";
 		} else if (textarea) {
+			console.log(`🔍 DEBUG: Found textarea value: "${textarea.value}" for questionId: ${questionId}`);
 			return textarea.value || "";
 		}
 
+		console.log(`🔍 DEBUG: No input/textarea found for questionId: ${questionId}`);
 		return "";
 	};
 
@@ -2711,11 +2777,26 @@ class Formsmd {
 	 * @returns {number|null} Extracted value
 	 */
 	extractNumberInputValue = (activeSlide, questionId) => {
-		const input = activeSlide.querySelector(`input[name="${questionId}"]`);
+		// Try multiple selectors to find the number input field
+		let input = activeSlide.querySelector(`input[name="${questionId}"]`);
+		
+		// If not found, try with data-fmd-name attribute
+		if (!input) {
+			input = activeSlide.querySelector(`input[data-fmd-name="${questionId}"]`);
+		}
+		
+		// If still not found, try to find any number input in the slide
+		if (!input) {
+			input = activeSlide.querySelector('input[type="number"]');
+		}
+
 		if (input && input.value) {
+			console.log(`🔍 DEBUG: Found number input value: "${input.value}" for questionId: ${questionId}`);
 			const numValue = parseFloat(input.value);
 			return isNaN(numValue) ? null : numValue;
 		}
+		
+		console.log(`🔍 DEBUG: No number input found for questionId: ${questionId}`);
 		return null;
 	};
 
@@ -2854,22 +2935,28 @@ class Formsmd {
 			};
 		}
 
-		// Map API question types to FormsMD field types
-		let fieldType = "text_input";
+		// Map API question types to FormsMD field types (FormsMD expects lowercase, no underscores)
+		let fieldType = "textinput";
 		if (question.type === "choice_input") {
-			fieldType = "choice_input";
+			fieldType = "choiceinput";
 		} else if (question.type === "number_input") {
-			fieldType = "number_input";
+			fieldType = "numberinput";
 		} else if (question.type === "rating_input") {
-			fieldType = "rating_input";
+			fieldType = "ratinginput";
 		} else if (question.type === "datetime_input") {
-			fieldType = "datetime_input";
+			fieldType = "datetimeinput";
 		} else if (question.type === "file_input") {
-			fieldType = "file_input";
+			fieldType = "fileinput";
 		} else if (question.type === "opinion_scale") {
-			fieldType = "opinion_scale";
+			fieldType = "opinionscale";
 		} else if (question.type === "country_calling_code") {
 			fieldType = "country_calling_code";
+		} else if (question.type === "email_input") {
+			fieldType = "emailinput";
+		} else if (question.type === "url_input") {
+			fieldType = "urlinput";
+		} else if (question.type === "tel_input") {
+			fieldType = "telinput";
 		}
 
 		// Build the slide definition
@@ -2913,49 +3000,22 @@ class Formsmd {
 	 * @param {boolean} isEndSlide
 	 * @returns {HTMLElement} the created slide element
 	 */
-	createNextSlide = (slideDefinition, isEndSlide) => {
+	createNextSlide = (slideDefinition, isEndSlide, isLastQuestion = false) => {
 		const instance = this;
 
 		// Debug logging
 
-		// Import required functions
-		const { renderSlideFromDefinition } = require("./slides-parse");
-		const { createContentTemplate } = require("./templates-create");
+		// Import required functions (now using static imports)
+		// const { renderSlideFromDefinition } = require("./slides-parse");
+		// const { createContentTemplate } = require("./templates-create");
 
 		let slideHtml;
 
 		if (isEndSlide) {
-			// Handle end slide - use the end slide template
-			const { getTranslation } = require("./translations");
-
-			// Create default end slide if no definition provided
-			if (!slideDefinition) {
-				const endSlideTemplate = `
-				<div class="fmd-slide fmd-end-slide">
-					<div class="fmd-grid">
-						<div class="fmd-text-center">
-							<h1 class="fmd-h2 fmd-mb-2">${getTranslation(instance.state.settings.localization, "form-submitted-title")}</h1>
-							<p class="fmd-fs-lead fmd-mb-1">${getTranslation(instance.state.settings.localization, "form-submitted-subtitle")}</p>
-						</div>
-					</div>
-				</div>`;
-				slideHtml = endSlideTemplate;
-			} else {
-				// Render the end slide definition
-				slideHtml = renderSlideFromDefinition(
-					slideDefinition,
-					instance.state.settings.page === "form-slides" ? true : false,
-					false, // isFirstSlide
-					{
-						showRestartBtn:
-							instance.state.settings["restart-button"] === "show"
-								? true
-								: false,
-						submitBtnText: instance.state.settings["submit-button-text"] || "",
-					},
-					instance.state.settings.localization,
-				);
-			}
+			// Handle end slide - this should not happen in createNextSlide
+			// End slides should be handled by createQuestionLifecycle
+			console.warn("createNextSlide called with isEndSlide=true, this should not happen");
+			slideHtml = '<div class="fmd-slide fmd-end-slide"><div class="fmd-grid"><div class="fmd-text-center"><h1>End Slide</h1></div></div></div>';
 		} else {
 			// Render regular slide
 			slideHtml = renderSlideFromDefinition(
@@ -2968,6 +3028,7 @@ class Formsmd {
 					submitBtnText: instance.state.settings["submit-button-text"] || "",
 				},
 				instance.state.settings.localization,
+				isLastQuestion, // isLastQuestion
 			);
 		}
 
@@ -3017,6 +3078,7 @@ class Formsmd {
 		slideDefinition,
 		isEndSlide = false,
 		slideType = "question",
+		isLastQuestion = false,
 	) => {
 		const instance = this;
 
@@ -3047,7 +3109,7 @@ class Formsmd {
 			slideElement = instance.createContentSlide(endHtml);
 		} else {
 			// Create regular question slide (DOM element only, no insertion)
-			slideElement = instance.createNextSlide(slideDefinition, isEndSlide);
+			slideElement = instance.createNextSlide(slideDefinition, isEndSlide, isLastQuestion);
 
 			// ✅ ADD BACK: DOM insertion and cleanup logic here
 			// Insert the slide into the DOM
@@ -3355,8 +3417,8 @@ class Formsmd {
 	renderWelcomeSlide = (question, config) => {
 		const instance = this;
 
-		// Import the welcome screen template
-		const { createWelcomeScreen } = require("./welcome-screen-template");
+		// Import the welcome screen template (now using static imports)
+		// const { createWelcomeScreen } = require("./welcome-screen-template");
 
 		// Create welcome screen HTML using the template
 		return createWelcomeScreen(config, instance.state.settings.localization);
@@ -3367,8 +3429,8 @@ class Formsmd {
 	 */
 	renderEndSlide = (question, config) => {
 		const instance = this;
-		const { getTranslation } = require("./translations");
-		var nunjucks = require("nunjucks");
+		// const { getTranslation } = require("./translations");
+		// var nunjucks = require("nunjucks");
 
 		// Extract settings from question data
 		const title = question?.question || question?.title;
@@ -3905,30 +3967,87 @@ class Formsmd {
 			);
 		}
 
+		// Check if we've already submitted this response to prevent duplicate submissions
+		if (currentFormData && instance.state.currentQuestion) {
+			const questionId = instance.state.currentQuestion.questionId;
+			const existingResponse = instance.state.lifecycle.userResponses.get(questionId);
+			if (existingResponse && existingResponse.submitted) {
+				console.log(`🔍 Response already submitted for question ${questionId}, skipping API call`);
+				return; // Skip API call if already submitted
+			}
+		}
+
 		// Get the next question from API
 		instance
 			.getNextQuestionFromAPI(currentFormData)
 			.then((nextSlideData) => {
+				// Mark response as submitted after successful API call
+				if (currentFormData && instance.state.currentQuestion) {
+					const questionId = instance.state.currentQuestion.questionId;
+					const response = instance.state.lifecycle.userResponses.get(questionId);
+					if (response) {
+						response.submitted = true;
+						instance.state.lifecycle.userResponses.set(questionId, response);
+					}
+				}
 				// Check if we have a next slide definition
 				if (!nextSlideData.slideDefinition) {
-					// No more slides available
-					instance.addSlideError(activeSlide, ctaBtn, []);
-
-					// Remove all buttons from their processing states
-					instance.container
-						.querySelectorAll(".fmd-btn-processing")
-						.forEach((btn) => {
-							instance.removeBtnProcessing(btn);
-						});
-
-					// Enable all clicks on root element
-					rootElem.removeEventListener(
-						"click",
-						instance.disableAllClicks,
-						true,
-					);
+					// Survey completed - check if we should show an end slide
+					if (nextSlideData.isEndSlide) {
+						// Create end slide for survey completion
+						const endSlideData = {
+							type: "end",
+							title: "Survey Completed",
+							content: "Thank you for completing the survey!",
+							buttonText: "Restart Survey"
+						};
+						
+						const endSlide = instance.createQuestionLifecycle(
+							endSlideData,
+							null, // No slide definition for end slide
+							true, // isEndSlide
+							"end"
+						);
+						
+						// Handle the end slide directly without calling handleNextSlideSuccess
+						// to avoid duplicate processing
+						instance.fadeInNextSlide(activeSlide, endSlide);
+						
+						// Handle the new active slide after transition completes
+						setTimeout(() => {
+							instance.hasNewActiveSlide(
+								endSlide,
+								nextSlideData.progress?.currentQuestion || 1,
+								false,
+							);
+						}, instance.getSlideTransitionDuration() * 3);
+						
+						// Call completion function
+						setTimeout(() => {
+							instance.onCompletion({ success: true });
+						}, instance.getSlideTransitionDuration() * 3);
+						
+						return;
+					} else {
+						// Survey completed but no end screen configured - just call completion
+						instance.onCompletion({ success: true });
+						
+						// Remove all buttons from their processing states
+						instance.container
+							.querySelectorAll(".fmd-btn-processing")
+							.forEach((btn) => {
+								instance.removeBtnProcessing(btn);
+							});
 
-					return;
+						// Enable all clicks on root element
+						rootElem.removeEventListener(
+							"click",
+							instance.disableAllClicks,
+							true,
+						);
+						
+						return;
+					}
 				}
 
 				// Detect slide type from API response
@@ -3960,6 +4079,7 @@ class Formsmd {
 					nextSlideData.slideDefinition,
 					nextSlideData.isEndSlide,
 					slideType,
+					nextSlideData.progress?.isLastQuestion || false,
 				);
 
 				// Update the current question data in state
@@ -4005,7 +4125,40 @@ class Formsmd {
 		const instance = this;
 		const rootElem = instance.container.querySelector(".fmd-root");
 
-		// POST form data
+		// Skip postFormData in API-driven mode since we already handled the API call
+		if (instance.options.isApiDriven) {
+			// If next slide is the end slide: remove response id, remove form
+			// data from local storage, and redirect (if applicable)
+			if (nextSlideData.isEndSlide) {
+				instance.removeResponseId();
+				instance.removeSavedFormData();
+				const redirect = nextSlide.getAttribute("data-fmd-redirect");
+				if (redirect) {
+					window.location.href = redirect;
+					return;
+				}
+			}
+
+			// Fade in next slide
+			instance.fadeInNextSlide(activeSlide, nextSlide);
+
+			// Handle the new active slide
+			instance.hasNewActiveSlide(
+				nextSlide,
+				nextSlideData.progress?.currentQuestion || 1,
+				false,
+			);
+
+			// Call the on completion function if end slide
+			if (nextSlideData.isEndSlide) {
+				setTimeout(function () {
+					instance.onCompletion({ success: true });
+				}, instance.getSlideTransitionDuration() * 3);
+			}
+			return;
+		}
+
+		// Traditional mode - POST form data
 		const postCondition =
 			instance.state.settings.page === "form-slides" &&
 			(activeSlide.hasAttribute("data-fmd-post") || nextSlideData.isEndSlide)
@@ -4438,7 +4591,7 @@ class Formsmd {
 		if (instance.options.isApiDriven && instance.options.surveyId) {
 			instance.initializeWithApiConfig({
 				surveyId: instance.options.surveyId,
-				apiBaseUrl: instance.options.apiBaseUrl || "http://localhost:3001",
+				apiBaseUrl: instance.options.apiBaseUrl || "http://localhost:3000",
 			});
 			return; // Skip traditional initialization for API-driven mode
 		} else {
@@ -4854,9 +5007,9 @@ function hexToRgb(hex) {
  */
 async function fetchSurveyData(surveyId, apiBaseUrl) {
 	try {
-		const response = await fetch(
-			`${apiBaseUrl}/api/public/surveys/${surveyId}`,
-		);
+	const response = await fetch(
+		`${apiBaseUrl}/public/surveys/${surveyId}`,
+	);
 
 		if (!response.ok) {
 			throw new Error(`HTTP error! status: ${response.status}`);
@@ -4884,8 +5037,30 @@ async function fetchSurveyData(surveyId, apiBaseUrl) {
  */
 async function fetchNextQuestion(surveyId, apiBaseUrl, currentResponse = null) {
 	try {
+		// Use persistent session ID stored in localStorage or generate new one
+		let sessionId = null;
+		try {
+			sessionId = localStorage.getItem(`formsmd_session_${surveyId}`);
+		} catch (e) {
+			// localStorage not available
+		}
+		
+		if (!sessionId) {
+			// Generate unique session ID
+			sessionId = typeof crypto !== 'undefined' && crypto.randomUUID 
+				? crypto.randomUUID() 
+				: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
+			
+			// Store in localStorage if available
+			try {
+				localStorage.setItem(`formsmd_session_${surveyId}`, sessionId);
+			} catch (e) {
+				// localStorage not available, continue with generated ID
+			}
+		}
+			
 		const requestBody = {
-			sessionId: "test-session",
+			sessionId: sessionId,
 		};
 
 		// Add current question response if provided
@@ -4898,7 +5073,7 @@ async function fetchNextQuestion(surveyId, apiBaseUrl, currentResponse = null) {
 		}
 
 		const response = await fetch(
-			`${apiBaseUrl}/api/public/surveys/${surveyId}/question`,
+			`${apiBaseUrl}/public/surveys/${surveyId}/question`,
 			{
 				method: "POST",
 				headers: {
@@ -4919,7 +5094,7 @@ async function fetchNextQuestion(surveyId, apiBaseUrl, currentResponse = null) {
 
 			if (status === "question" && question) {
 				const slideDefinition = convertAPIQuestionToSlideDefinition(question);
-				const isEndSlide = progress.isLastQuestion;
+				const isEndSlide = false; // Only true for actual end slides, not last questions
 
 				return {
 					question: question,
@@ -4931,7 +5106,7 @@ async function fetchNextQuestion(surveyId, apiBaseUrl, currentResponse = null) {
 				return {
 					question: null,
 					slideDefinition: null,
-					isEndSlide: true,
+					isEndSlide: progress?.isLastQuestion || false, // Use progress data to determine if end screen should be shown
 					progress: progress,
 				};
 			}
@@ -4950,19 +5125,21 @@ async function fetchNextQuestion(surveyId, apiBaseUrl, currentResponse = null) {
  * @returns {string} slide definition in markdown format
  */
 function convertAPIQuestionToSlideDefinition(question) {
-	// Map API question types to FormsMD field types
+	// Map API question types to FormsMD field types (FormsMD expects lowercase, no underscores)
 	const fieldTypeMap = {
-		text_input: "TextInput",
-		email_input: "EmailInput",
-		number_input: "NumberInput",
-		choice_input: "ChoiceInput",
-		rating_input: "RatingInput",
-		opinion_scale: "OpinionScale",
-		datetime_input: "DateTimeInput",
-		file_input: "FileInput",
+		text_input: "textinput",
+		email_input: "emailinput",
+		number_input: "numberinput",
+		choice_input: "choiceinput",
+		rating_input: "ratinginput",
+		opinion_scale: "opinionscale",
+		datetime_input: "datetimeinput",
+		file_input: "fileinput",
+		url_input: "urlinput",
+		tel_input: "telinput",
 	};
 
-	const fieldType = fieldTypeMap[question.type] || "TextInput";
+	const fieldType = fieldTypeMap[question.type] || "textinput";
 
 	// Build the slide definition
 	let slideDefinition = `\n`;
@@ -4998,4 +5175,4 @@ function convertAPIQuestionToSlideDefinition(question) {
 	return slideDefinition;
 }
 
-exports.Formsmd = Formsmd;
+export { Formsmd };
diff --git a/src/marked-renderer.js b/src/marked-renderer.js
index 8b7591f..a900502 100644
--- a/src/marked-renderer.js
+++ b/src/marked-renderer.js
@@ -1,8 +1,5 @@
-"use strict";
-
-const { parseElemAttrs, addReservedClass } = require("./attrs-parse");
-const {
-	formFieldPattern,
+import { parseElemAttrs, addReservedClass  } from "./attrs-parse.js";
+import { formFieldPattern,
 	createTextField,
 	createNumberField,
 	createSelectField,
@@ -11,10 +8,10 @@ const {
 	createOpinionScaleField,
 	createDatetimeField,
 	createFileField,
-} = require("./form-field-create");
-const { escape$1, cleanUrl } = require("./helpers");
-const { getTranslation } = require("./translations");
-const { marked } = require("marked");
+ } from "./form-field-create.js";
+import { escape$1, cleanUrl  } from "./helpers.js";
+import { getTranslation  } from "./translations.js";
+import { marked  } from "marked";
 
 /**
  * Get settings for the Marked renderer. Settings are set in the options from
@@ -358,4 +355,4 @@ renderer.table = function (header, body) {
 	].join("\n");
 };
 
-exports.renderer = renderer;
+export { renderer };
\ No newline at end of file
diff --git a/src/phone-numbers.js b/src/phone-numbers.js
index 5b3a0ee..00507bb 100644
--- a/src/phone-numbers.js
+++ b/src/phone-numbers.js
@@ -1,5 +1,3 @@
-"use strict";
-
 const placeholdersAndCallingCodes = {
 	AC: { placeholder: "40123", callingCode: "+247" },
 	AD: { placeholder: "312 345", callingCode: "+376" },
@@ -318,6 +316,4 @@ function createCountryCallingCodeOptions(
 	return options.join("\n");
 }
 
-exports.placeholdersAndCallingCodes = placeholdersAndCallingCodes;
-exports.getPhoneNumberPlaceholder = getPhoneNumberPlaceholder;
-exports.createCountryCallingCodeOptions = createCountryCallingCodeOptions;
+export { placeholdersAndCallingCodes, getPhoneNumberPlaceholder, createCountryCallingCodeOptions };
\ No newline at end of file
diff --git a/src/settings-parse.js b/src/settings-parse.js
index 7450b34..472bb8f 100644
--- a/src/settings-parse.js
+++ b/src/settings-parse.js
@@ -1,6 +1,4 @@
-"use strict";
-
-const { unescape } = require("./helpers");
+import { unescape  } from "./helpers.js";
 
 /**
  * Parse color from a string and return the RGB values, supported types: name,
@@ -591,6 +589,4 @@ function parseSettings(template) {
 	};
 }
 
-exports.parseColor = parseColor;
-exports.getDefaultSettings = getDefaultSettings;
-exports.parseSettings = parseSettings;
+export { parseColor, getDefaultSettings, parseSettings };
\ No newline at end of file
diff --git a/src/slides-parse.js b/src/slides-parse.js
index fad78ad..964851e 100644
--- a/src/slides-parse.js
+++ b/src/slides-parse.js
@@ -1,9 +1,7 @@
-"use strict";
-
-const { formFieldPattern } = require("./form-field-create");
-const { unescape } = require("./helpers");
-const { getTranslation } = require("./translations");
-var nunjucks = require("nunjucks");
+import { formFieldPattern  } from "./form-field-create.js";
+import { unescape  } from "./helpers.js";
+import { getTranslation  } from "./translations.js";
+import nunjucks from "nunjucks";
 
 const slideTemplate = `
 {% if isForm and isFormSlide %}
@@ -28,6 +26,7 @@ const slideTemplate = `
 		</div>
 		{% else %}
 		<div class="fmd-next-controls fmd-d-flex{% if buttonAlignment %} fmd-justify-content-{{ buttonAlignment }}{% endif %}">
+			{% if isLastQuestion %}
 			<button type="submit" class="fmd-submit-btn fmd-btn fmd-btn-accent fmd-d-flex fmd-align-items-center fmd-justify-content-center">
 				{% if btnSettings.submitBtnText != "" %}
 				{{ btnSettings.submitBtnText }}
@@ -36,6 +35,13 @@ const slideTemplate = `
 				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" class="fmd-icon fmd-ms-2" aria-hidden="true" focusable="false"><path d="M441 103c9.4 9.4 9.4 24.6 0 33.9L177 401c-9.4 9.4-24.6 9.4-33.9 0L7 265c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l119 119L407 103c9.4-9.4 24.6-9.4 33.9 0z"/></svg>
 				{% endif %}
 			</button>
+			{% else %}
+			<button type="submit" class="fmd-next-btn fmd-btn fmd-btn-accent fmd-d-flex fmd-align-items-center fmd-justify-content-center">
+				{{ translations.nextBtn }}
+				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" class="fmd-icon fmd-ms-2 fmd-hide-rtl" aria-hidden="true" focusable="false"><path d="M273 239c9.4 9.4 9.4 24.6 0 33.9L113 433c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l143-143L79 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L273 239z"/></svg>
+				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" class="fmd-icon fmd-ms-2 fmd-hide-ltr" aria-hidden="true" focusable="false"><path d="M47 239c-9.4 9.4-9.4 24.6 0 33.9L207 433c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97.9 256 241 113c9.4-9.4 9.4-24.6 0-33.9s24.6-9.4 33.9 0L47 239z"/></svg>
+			</button>
+			{% endif %}
 		</div>
 		{% endif %}
 	</div>
@@ -109,7 +115,7 @@ const endSlideTemplate = `
  * @returns {{template: string, slideType:"start"|"body"|"end"}} template with
  * parsed slides, type of the slide
  */
-function parseSlide(template, isForm, isFirstSlide, btnSettings, localization) {
+function parseSlide(template, isForm, isFirstSlide, btnSettings, localization, isLastQuestion = false) {
 	const content = [];
 	let isFormSlide = false;
 	let jump = "";
@@ -231,6 +237,7 @@ function parseSlide(template, isForm, isFirstSlide, btnSettings, localization) {
 			disablePrevBtn: disablePrevBtn,
 			post: post,
 			startBtn: startBtn,
+			isLastQuestion: isLastQuestion,
 			translations: {
 				formSubmitBtn: getTranslation(localization, "form-submit-btn"),
 				nextBtn: getTranslation(localization, "next-btn"),
@@ -251,6 +258,7 @@ function parseSlide(template, isForm, isFirstSlide, btnSettings, localization) {
 			disablePrevBtn: disablePrevBtn,
 			post: post,
 			startBtn: "",
+			isLastQuestion: isLastQuestion,
 			translations: {
 				formSubmitBtn: getTranslation(localization, "form-submit-btn"),
 				nextBtn: getTranslation(localization, "next-btn"),
@@ -445,6 +453,7 @@ function renderSlideFromDefinition(
 	isFirstSlide,
 	btnSettings,
 	localization,
+	isLastQuestion = false,
 ) {
 	const parsedSlide = parseSlide(
 		slideDefinition,
@@ -452,11 +461,9 @@ function renderSlideFromDefinition(
 		isFirstSlide,
 		btnSettings,
 		localization,
+		isLastQuestion,
 	);
 	return parsedSlide.template;
 }
 
-exports.parseSlide = parseSlide;
-exports.parseSlides = parseSlides;
-exports.parseSlidesLazy = parseSlidesLazy;
-exports.renderSlideFromDefinition = renderSlideFromDefinition;
+export { parseSlide, parseSlides, parseSlidesLazy, renderSlideFromDefinition };
\ No newline at end of file
diff --git a/src/spreadsheet-data-parse.js b/src/spreadsheet-data-parse.js
index 4e35f49..fa0c180 100644
--- a/src/spreadsheet-data-parse.js
+++ b/src/spreadsheet-data-parse.js
@@ -1,6 +1,4 @@
-"use strict";
-
-const { isNumeric } = require("./helpers");
+import { isNumeric  } from "./helpers.js";
 
 /**
  * Given a row string, split it by the given delimiter (unless the delimiter
@@ -100,4 +98,4 @@ function parseSpreadsheetData(data, delimiter) {
 	};
 }
 
-exports.parseSpreadsheetData = parseSpreadsheetData;
+export { parseSpreadsheetData };
\ No newline at end of file
diff --git a/src/templates-create.js b/src/templates-create.js
index 72c3f19..589ef73 100644
--- a/src/templates-create.js
+++ b/src/templates-create.js
@@ -1,17 +1,14 @@
-"use strict";
-
-const { addReservedClass } = require("./attrs-parse");
-const { parseDivs, parseBindSpans } = require("./div-span-parse");
-const { renderer } = require("./marked-renderer");
-const {
-	parseSlides,
+import { addReservedClass  } from "./attrs-parse.js";
+import { parseDivs, parseBindSpans  } from "./div-span-parse.js";
+import { renderer  } from "./marked-renderer.js";
+import { parseSlides,
 	parseSlidesLazy,
 	renderSlideFromDefinition,
-} = require("./slides-parse");
-const { getTranslation } = require("./translations");
-const createDOMPurify = require("dompurify");
-const { marked } = require("marked");
-var nunjucks = require("nunjucks");
+ } from "./slides-parse.js";
+import { getTranslation  } from "./translations.js";
+import createDOMPurify from "dompurify";
+import { marked  } from "marked";
+import nunjucks from "nunjucks";
 
 /**
  * Create the CSS styles using the settings.
@@ -605,7 +602,4 @@ function createContentTemplate(template, settings, data, windowAndSanitize) {
 	};
 }
 
-exports.createStyles = createStyles;
-exports.madeInLoaderTemplate = madeInLoaderTemplate;
-exports.createBodyTemplate = createBodyTemplate;
-exports.createContentTemplate = createContentTemplate;
+export { createStyles, madeInLoaderTemplate, createBodyTemplate, createContentTemplate };
\ No newline at end of file
diff --git a/src/translations.js b/src/translations.js
index 5f0b6e4..87de90c 100644
--- a/src/translations.js
+++ b/src/translations.js
@@ -1,5 +1,3 @@
-"use strict";
-
 const translations = {
 	en: {
 		"choice-field-required": "Please select an item in the list.",
@@ -473,5 +471,4 @@ function getTranslation(localization, key) {
 	return translations[localization][key] || "";
 }
 
-exports.translations = translations;
-exports.getTranslation = getTranslation;
+export { translations, getTranslation };
\ No newline at end of file
diff --git a/src/welcome-screen-template.js b/src/welcome-screen-template.js
index bc88332..552735b 100644
--- a/src/welcome-screen-template.js
+++ b/src/welcome-screen-template.js
@@ -1,7 +1,5 @@
-"use strict";
-
-const { getTranslation } = require("./translations");
-var nunjucks = require("nunjucks");
+import { getTranslation  } from "./translations.js";
+import nunjucks from "nunjucks";
 
 /**
  * Welcome screen template with alignment options
@@ -78,6 +76,5 @@ function createWelcomeScreen(config, localization) {
 	});
 }
 
-module.exports = {
-	createWelcomeScreen,
-};
+export { createWelcomeScreen,
+ };
diff --git a/types/composer.d.ts b/types/composer.d.ts
index 93580d3..4722845 100644
--- a/types/composer.d.ts
+++ b/types/composer.d.ts
@@ -2,42 +2,42 @@
  * Translations.
  */
 export type TranslationsType = {
-	/**
-	 * The text in English.
-	 */
-	en?: string;
-	/**
-	 * The text in Arabic.
-	 */
-	ar?: string;
-	/**
-	 * The text in Bengali.
-	 */
-	bn?: string;
-	/**
-	 * The text in German.
-	 */
-	de?: string;
-	/**
-	 * The text in Spanish.
-	 */
-	es?: string;
-	/**
-	 * The text in French.
-	 */
-	fr?: string;
-	/**
-	 * The text in Japanese.
-	 */
-	ja?: string;
-	/**
-	 * The text in Portuguese.
-	 */
-	pt?: string;
-	/**
-	 * The text in Chinese.
-	 */
-	zh?: string;
+    /**
+     * The text in English.
+     */
+    en?: string;
+    /**
+     * The text in Arabic.
+     */
+    ar?: string;
+    /**
+     * The text in Bengali.
+     */
+    bn?: string;
+    /**
+     * The text in German.
+     */
+    de?: string;
+    /**
+     * The text in Spanish.
+     */
+    es?: string;
+    /**
+     * The text in French.
+     */
+    fr?: string;
+    /**
+     * The text in Japanese.
+     */
+    ja?: string;
+    /**
+     * The text in Portuguese.
+     */
+    pt?: string;
+    /**
+     * The text in Chinese.
+     */
+    zh?: string;
 };
 /**
  * Get the shared form field params.
@@ -46,10 +46,7 @@ export type TranslationsType = {
  * @param {string} formDelimiter
  * @returns {Array.<string>}
  */
-export function composeSharedFieldParams(
-	params: any,
-	formDelimiter: string,
-): Array<string>;
+export function composeSharedFieldParams(params: any, formDelimiter: string): Array<string>;
 /**
  * Get the id, CSS class names and other HTML attributes.
  *
@@ -78,3065 +75,2470 @@ export function composeAttrs(params: any): Array<string>;
  * @param {TranslationsType} translations
  * @returns {string}
  */
-export function translate(
-	localization: string,
-	translations: TranslationsType,
-): string;
+export function translate(localization: string, translations: TranslationsType): string;
 export class Composer {
-	/**
-	 * The page or form settings.
-	 *
-	 * @typedef {Object} SettingsType
-	 * @property {"all-slides"} [autofocus] If set to `"all-slides"`, when a new slide becomes active (including the first slide on page load), the very first form field will be auto-focused.
-	 * @property {string} [accent] The primary color (must be HTML name, hex code, or RGB) used on buttons, form fields, etc. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-	 * @property {string} [accentForeground] The text color (must be HTML name, hex code, or RGB) used on `accent` background, for example, the text on buttons. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-	 * @property {string} [backdropOpacity] Sets an overlay of the `background-color` on top of the background image. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-	 * @property {string} [backgroundColor] The `background-color` of the page (must be HTML name, hex code, or RGB). [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-	 * @property {string} [backgroundImage] The `background-image` of the page. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-	 * @property {string} [brand] An image of your logo added to the header of the page in the top-left corner (must be valid Markdown image). [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-	 * @property {"center"|"end"|"stretch"} [buttonAlignment] Set the alignment of the slide CTA buttons.
-	 * @property {string} [color] The `color` of the text on the page (must be HTML name, hex code, or RGB). [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-	 * @property {"light"|"dark"} [colorScheme] The default or initial color scheme of the page. Default is `"light"`.
-	 * @property {"domain-wide"|"isolate"} [colorSchemeScope] Determines how color scheme preference is saved and applied. Default is `"domain-wide"`.
-	 * @property {"show"} [colorSchemeToggle] If set to `"show"`, a toggle button will be available in the footer.
-	 * @property {string} [cssPrefix] Prefix added to all CSS classes. Default is `"fmd-"`.
-	 * @property {string} [cta] Adds a call to action link styled as a button on the header (must be valid Markdown link).
-	 * @property {"ltr"|"rtl"} [dir] The direction of the page's text. Default is `"ltr"`.
-	 * @property {string} [favicon] The favicon of the page.
-	 * @property {"sm"} [fieldSize] If set to `"sm"`, the size of form fields will be made smaller.
-	 * @property {string} [fontFamily] The `font-family` used on the page.
-	 * @property {string} [fontImportUrl] URL to import custom fonts (must be valid CSS for the `@import` property).
-	 * @property {"sm"|"lg"} [fontSize] Makes the `font-size` of everything on the page smaller or larger.
-	 * @property {string} [formDelimiter] Used to separate parameters when creating form fields. Default is `"|"`.
-	 * @property {"hide"|"show"} [formsmdBranding] Controls visibility of the Forms.md branding.
-	 * @property {"classic"} [formStyle] If set to `"classic"`, the form fields will have a classic appearance.
-	 * @property {"hide"|"show"} [footer] Controls visibility of the footer.
-	 * @property {"json"|"csv"|"tsv"} [getFormat] The format for reading data. Default is `"json"`. [Read docs](https://formsmd.gitbook.io/docs/set-and-read-data).
-	 * @property {string} [getObjectsName] Name used for objects when reading data. Default is `"objects"`. [Read docs](https://formsmd.gitbook.io/docs/set-and-read-data).
-	 * @property {string} [getUrl] URL for reading data. [Read docs](https://formsmd.gitbook.io/docs/set-and-read-data).
-	 * @property {"hide"|"show"|"align"} [header] Controls header visibility and alignment.
-	 * @property {"anchored"} [headings] If set to `"anchored"`, all headings will contain an anchor link.
-	 * @property {string} [id] Identifier for the page or form.
-	 * @property {"classic"} [labelStyle] If set to `"classic"`, the question and description of form fields will be made smaller.
-	 * @property {keyof typeof translations} [localization] Sets the language for automatic translation. Default is `"en"`.
-	 * @property {string} [metaAuthor] Sets the author metadata.
-	 * @property {string} [metaDescription] Sets the description metadata.
-	 * @property {string} [metaImage] Sets the Open Graph image.
-	 * @property {string} [metaKeywords] Sets the keywords metadata.
-	 * @property {string} [metaType] Sets the Open Graph type.
-	 * @property {string} [metaUrl] Sets the Open Graph URL.
-	 * @property {"form-slides"|"slides"|"single"} [page] Determines the layout of the page. Default is `"form-slides"`.
-	 * @property {"hide"|"show"|"decorative"} [pageProgress] Controls visibility and function of the page progress.
-	 * @property {"hide"|"show"} [placeholders] Controls visibility of input placeholders.
-	 * @property {string} [postSheetName] When sending responses directly to Google Sheets, this specifies which sheet to save responses to.
-	 * @property {string} [postUrl] URL to send form responses to using POST request.
-	 * @property {"show"} [restartButton] If set to `"show"`, the restart button will be visible.
-	 * @property {"none"|"pill"} [rounded] Controls rounding of buttons and UI elements.
-	 * @property {"hide"|"show"} [slideControls] Controls visibility of next and previous buttons.
-	 * @property {string} [slideDelimiter] Specifies where new slides are created. Default is `"---"`.
-	 * @property {string} [submitButtonText] Custom text for submit buttons.
-	 * @property {string} [title] The title of the page.
-	 * @property {"start"} [verticalAlignment] If set to `"start"`, content is aligned to the top of the page vertically.
-	 */
-	/**
-	 * Create an instance of the class.
-	 *
-	 * @param {SettingsType} settings
-	 */
-	constructor(settings: {
-		/**
-		 * If set to `"all-slides"`, when a new slide becomes active (including the first slide on page load), the very first form field will be auto-focused.
-		 */
-		autofocus?: "all-slides";
-		/**
-		 * The primary color (must be HTML name, hex code, or RGB) used on buttons, form fields, etc. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-		 */
-		accent?: string;
-		/**
-		 * The text color (must be HTML name, hex code, or RGB) used on `accent` background, for example, the text on buttons. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-		 */
-		accentForeground?: string;
-		/**
-		 * Sets an overlay of the `background-color` on top of the background image. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-		 */
-		backdropOpacity?: string;
-		/**
-		 * The `background-color` of the page (must be HTML name, hex code, or RGB). [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-		 */
-		backgroundColor?: string;
-		/**
-		 * The `background-image` of the page. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-		 */
-		backgroundImage?: string;
-		/**
-		 * An image of your logo added to the header of the page in the top-left corner (must be valid Markdown image). [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-		 */
-		brand?: string;
-		/**
-		 * Set the alignment of the slide CTA buttons.
-		 */
-		buttonAlignment?: "center" | "end" | "stretch";
-		/**
-		 * The `color` of the text on the page (must be HTML name, hex code, or RGB). [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
-		 */
-		color?: string;
-		/**
-		 * The default or initial color scheme of the page. Default is `"light"`.
-		 */
-		colorScheme?: "light" | "dark";
-		/**
-		 * Determines how color scheme preference is saved and applied. Default is `"domain-wide"`.
-		 */
-		colorSchemeScope?: "domain-wide" | "isolate";
-		/**
-		 * If set to `"show"`, a toggle button will be available in the footer.
-		 */
-		colorSchemeToggle?: "show";
-		/**
-		 * Prefix added to all CSS classes. Default is `"fmd-"`.
-		 */
-		cssPrefix?: string;
-		/**
-		 * Adds a call to action link styled as a button on the header (must be valid Markdown link).
-		 */
-		cta?: string;
-		/**
-		 * The direction of the page's text. Default is `"ltr"`.
-		 */
-		dir?: "ltr" | "rtl";
-		/**
-		 * The favicon of the page.
-		 */
-		favicon?: string;
-		/**
-		 * If set to `"sm"`, the size of form fields will be made smaller.
-		 */
-		fieldSize?: "sm";
-		/**
-		 * The `font-family` used on the page.
-		 */
-		fontFamily?: string;
-		/**
-		 * URL to import custom fonts (must be valid CSS for the `@import` property).
-		 */
-		fontImportUrl?: string;
-		/**
-		 * Makes the `font-size` of everything on the page smaller or larger.
-		 */
-		fontSize?: "sm" | "lg";
-		/**
-		 * Used to separate parameters when creating form fields. Default is `"|"`.
-		 */
-		formDelimiter?: string;
-		/**
-		 * Controls visibility of the Forms.md branding.
-		 */
-		formsmdBranding?: "hide" | "show";
-		/**
-		 * If set to `"classic"`, the form fields will have a classic appearance.
-		 */
-		formStyle?: "classic";
-		/**
-		 * Controls visibility of the footer.
-		 */
-		footer?: "hide" | "show";
-		/**
-		 * The format for reading data. Default is `"json"`. [Read docs](https://formsmd.gitbook.io/docs/set-and-read-data).
-		 */
-		getFormat?: "json" | "csv" | "tsv";
-		/**
-		 * Name used for objects when reading data. Default is `"objects"`. [Read docs](https://formsmd.gitbook.io/docs/set-and-read-data).
-		 */
-		getObjectsName?: string;
-		/**
-		 * URL for reading data. [Read docs](https://formsmd.gitbook.io/docs/set-and-read-data).
-		 */
-		getUrl?: string;
-		/**
-		 * Controls header visibility and alignment.
-		 */
-		header?: "hide" | "show" | "align";
-		/**
-		 * If set to `"anchored"`, all headings will contain an anchor link.
-		 */
-		headings?: "anchored";
-		/**
-		 * Identifier for the page or form.
-		 */
-		id?: string;
-		/**
-		 * If set to `"classic"`, the question and description of form fields will be made smaller.
-		 */
-		labelStyle?: "classic";
-		/**
-		 * Sets the language for automatic translation. Default is `"en"`.
-		 */
-		localization?: keyof typeof translations;
-		/**
-		 * Sets the author metadata.
-		 */
-		metaAuthor?: string;
-		/**
-		 * Sets the description metadata.
-		 */
-		metaDescription?: string;
-		/**
-		 * Sets the Open Graph image.
-		 */
-		metaImage?: string;
-		/**
-		 * Sets the keywords metadata.
-		 */
-		metaKeywords?: string;
-		/**
-		 * Sets the Open Graph type.
-		 */
-		metaType?: string;
-		/**
-		 * Sets the Open Graph URL.
-		 */
-		metaUrl?: string;
-		/**
-		 * Determines the layout of the page. Default is `"form-slides"`.
-		 */
-		page?: "form-slides" | "slides" | "single";
-		/**
-		 * Controls visibility and function of the page progress.
-		 */
-		pageProgress?: "hide" | "show" | "decorative";
-		/**
-		 * Controls visibility of input placeholders.
-		 */
-		placeholders?: "hide" | "show";
-		/**
-		 * When sending responses directly to Google Sheets, this specifies which sheet to save responses to.
-		 */
-		postSheetName?: string;
-		/**
-		 * URL to send form responses to using POST request.
-		 */
-		postUrl?: string;
-		/**
-		 * If set to `"show"`, the restart button will be visible.
-		 */
-		restartButton?: "show";
-		/**
-		 * Controls rounding of buttons and UI elements.
-		 */
-		rounded?: "none" | "pill";
-		/**
-		 * Controls visibility of next and previous buttons.
-		 */
-		slideControls?: "hide" | "show";
-		/**
-		 * Specifies where new slides are created. Default is `"---"`.
-		 */
-		slideDelimiter?: string;
-		/**
-		 * Custom text for submit buttons.
-		 */
-		submitButtonText?: string;
-		/**
-		 * The title of the page.
-		 */
-		title?: string;
-		/**
-		 * If set to `"start"`, content is aligned to the top of the page vertically.
-		 */
-		verticalAlignment?: "start";
-	});
-	template: string;
-	settings: {};
-	passedSettings: {};
-	/**
-	 * HTML attribute.
-	 *
-	 * @typedef {Object} HTMLAttributeType
-	 * @property {string} name The name of the attribute.
-	 * @property {string} value The value of the attribute.
-	 */
-	/**
-	 * Display condition.
-	 *
-	 * @typedef {Object} DisplayConditionType
-	 * @property {Array.<string>} dependencies The names of the form fields or data to use in the condition.
-	 * @property {string} condition The actual condition.
-	 */
-	/**
-	 * Params shared between all form fields.
-	 *
-	 * @typedef {Object} FormFieldSharedParamsType
-	 * @property {string} question The main question of the form field.
-	 * @property {true} [required] When set, the field becomes required.
-	 * @property {string} [description] Any extra information that the user may need to fill out the form.
-	 * @property {"sm"} [fieldSize] When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-	 * @property {"classic"} [labelStyle] When set to `"classic"`, the question and description of the form field are made smaller.
-	 * @property {true} [subfield] When set, the question and description of the form field are made smaller.
-	 * @property {true} [disabled] When set, the input is disabled.
-	 * @property {true} [autofocus] When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-	 * @property {string} [id] The id attribute of the form field.
-	 * @property {Array.<string>} [classNames] The CSS class names of the form field.
-	 * @property {Array.<HTMLAttributeType>} [attrs] Other HTML attributes of the form field.
-	 * @property {DisplayConditionType} [displayCondition] Display condition for the form field.
-	 */
-	/**
-	 * Text input params.
-	 *
-	 * @typedef {Object} TextInputParamsType
-	 * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
-	 * @property {true} [multiline] When set, the input accepts values with one or more lines because the `<textarea>` element is used.
-	 * @property {number} [maxlength] If set, this becomes the maximum number of allowed characters in the input.
-	 * @property {string} [pattern] If set, the input value must match the given pattern.
-	 * @property {string} [value] If set, this becomes the default value of the input.
-	 */
-	/**
-	 * Create a text input field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & TextInputParamsType} params
-	 * @returns {string}
-	 */
-	textInput: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Sets the `placeholder` attribute of the input.
-			 */
-			placeholder?: string;
-			/**
-			 * When set, the input accepts values with one or more lines because the `<textarea>` element is used.
-			 */
-			multiline?: true;
-			/**
-			 * If set, this becomes the maximum number of allowed characters in the input.
-			 */
-			maxlength?: number;
-			/**
-			 * If set, the input value must match the given pattern.
-			 */
-			pattern?: string;
-			/**
-			 * If set, this becomes the default value of the input.
-			 */
-			value?: string;
-		},
-	) => string;
-	/**
-	 * Email input params.
-	 *
-	 * @typedef {Object} EmailInputParamsType
-	 * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
-	 * @property {number} [maxlength] If set, this becomes the maximum number of allowed characters in the input.
-	 * @property {string} [pattern] If set, the input value must match the given pattern.
-	 * @property {string} [value] If set, this becomes the default value of the input.
-	 */
-	/**
-	 * Create an email input field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & EmailInputParamsType} params
-	 * @returns {string}
-	 */
-	emailInput: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Sets the `placeholder` attribute of the input.
-			 */
-			placeholder?: string;
-			/**
-			 * If set, this becomes the maximum number of allowed characters in the input.
-			 */
-			maxlength?: number;
-			/**
-			 * If set, the input value must match the given pattern.
-			 */
-			pattern?: string;
-			/**
-			 * If set, this becomes the default value of the input.
-			 */
-			value?: string;
-		},
-	) => string;
-	/**
-	 * URL input params.
-	 *
-	 * @typedef {Object} URLInputParamsType
-	 * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
-	 * @property {number} [maxlength] If set, this becomes the maximum number of allowed characters in the input.
-	 * @property {string} [pattern] If set, the input value must match the given pattern.
-	 * @property {string} [value] If set, this becomes the default value of the input.
-	 */
-	/**
-	 * Create a URL input field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & URLInputParamsType} params
-	 * @returns {string}
-	 */
-	urlInput: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Sets the `placeholder` attribute of the input.
-			 */
-			placeholder?: string;
-			/**
-			 * If set, this becomes the maximum number of allowed characters in the input.
-			 */
-			maxlength?: number;
-			/**
-			 * If set, the input value must match the given pattern.
-			 */
-			pattern?: string;
-			/**
-			 * If set, this becomes the default value of the input.
-			 */
-			value?: string;
-		},
-	) => string;
-	/**
-	 * Country code.
-	 *
-	 * @typedef {keyof typeof placeholdersAndCallingCodes} CountryCodeType
-	 */
-	/**
-	 * Telephone input params.
-	 *
-	 * @typedef {Object} TelInputParamsType
-	 * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
-	 * @property {number} [maxlength] If set, this becomes the maximum number of allowed characters in the input.
-	 * @property {string} [pattern] If set, the input value must match the given pattern.
-	 * @property {string} [value] If set, this becomes the default value of the input.
-	 * @property {CountryCodeType} [country] The default country code (e.g., `"US"`). Defaults to `"US"` if not specified.
-	 * @property {Array.<CountryCodeType>} [availableCountries] Array of available country codes (e.g., `["US", "CA", "GB"]`).
-	 */
-	/**
-	 * Create a telephone input field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & TelInputParamsType} params
-	 * @returns {string}
-	 */
-	telInput: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Sets the `placeholder` attribute of the input.
-			 */
-			placeholder?: string;
-			/**
-			 * If set, this becomes the maximum number of allowed characters in the input.
-			 */
-			maxlength?: number;
-			/**
-			 * If set, the input value must match the given pattern.
-			 */
-			pattern?: string;
-			/**
-			 * If set, this becomes the default value of the input.
-			 */
-			value?: string;
-			/**
-			 * The default country code (e.g., `"US"`). Defaults to `"US"` if not specified.
-			 */
-			country?:
-				| "US"
-				| "AC"
-				| "AD"
-				| "AE"
-				| "AF"
-				| "AG"
-				| "AI"
-				| "AL"
-				| "AM"
-				| "AN"
-				| "AO"
-				| "AQ"
-				| "AR"
-				| "AS"
-				| "AT"
-				| "AU"
-				| "AW"
-				| "AX"
-				| "AZ"
-				| "BA"
-				| "BB"
-				| "BD"
-				| "BE"
-				| "BF"
-				| "BG"
-				| "BH"
-				| "BI"
-				| "BJ"
-				| "BL"
-				| "BM"
-				| "BN"
-				| "BO"
-				| "BQ"
-				| "BR"
-				| "BS"
-				| "BT"
-				| "BW"
-				| "BY"
-				| "BZ"
-				| "CA"
-				| "CC"
-				| "CD"
-				| "CF"
-				| "CG"
-				| "CH"
-				| "CI"
-				| "CK"
-				| "CL"
-				| "CM"
-				| "CN"
-				| "CO"
-				| "CR"
-				| "CU"
-				| "CV"
-				| "CW"
-				| "CX"
-				| "CY"
-				| "CZ"
-				| "DE"
-				| "DJ"
-				| "DK"
-				| "DM"
-				| "DO"
-				| "DZ"
-				| "EC"
-				| "EE"
-				| "EG"
-				| "EH"
-				| "ER"
-				| "ES"
-				| "ET"
-				| "FI"
-				| "FJ"
-				| "FK"
-				| "FM"
-				| "FO"
-				| "FR"
-				| "GA"
-				| "GB"
-				| "GD"
-				| "GE"
-				| "GF"
-				| "GG"
-				| "GH"
-				| "GI"
-				| "GL"
-				| "GM"
-				| "GN"
-				| "GP"
-				| "GQ"
-				| "GR"
-				| "GS"
-				| "GT"
-				| "GU"
-				| "GW"
-				| "GY"
-				| "HK"
-				| "HM"
-				| "HN"
-				| "HR"
-				| "HT"
-				| "HU"
-				| "ID"
-				| "IE"
-				| "IL"
-				| "IM"
-				| "IN"
-				| "IO"
-				| "IQ"
-				| "IR"
-				| "IS"
-				| "IT"
-				| "JE"
-				| "JM"
-				| "JO"
-				| "JP"
-				| "KE"
-				| "KG"
-				| "KH"
-				| "KI"
-				| "KM"
-				| "KN"
-				| "KP"
-				| "KR"
-				| "KW"
-				| "KY"
-				| "KZ"
-				| "LA"
-				| "LB"
-				| "LC"
-				| "LI"
-				| "LK"
-				| "LR"
-				| "LS"
-				| "LT"
-				| "LU"
-				| "LV"
-				| "LY"
-				| "MA"
-				| "MC"
-				| "MD"
-				| "ME"
-				| "MF"
-				| "MG"
-				| "MH"
-				| "MK"
-				| "ML"
-				| "MM"
-				| "MN"
-				| "MO"
-				| "MP"
-				| "MQ"
-				| "MR"
-				| "MS"
-				| "MT"
-				| "MU"
-				| "MV"
-				| "MW"
-				| "MX"
-				| "MY"
-				| "MZ"
-				| "NA"
-				| "NC"
-				| "NE"
-				| "NF"
-				| "NG"
-				| "NI"
-				| "NL"
-				| "NO"
-				| "NP"
-				| "NR"
-				| "NU"
-				| "NZ"
-				| "OM"
-				| "PA"
-				| "PE"
-				| "PF"
-				| "PG"
-				| "PH"
-				| "PK"
-				| "PL"
-				| "PM"
-				| "PN"
-				| "PR"
-				| "PS"
-				| "PT"
-				| "PW"
-				| "PY"
-				| "QA"
-				| "RE"
-				| "RO"
-				| "RS"
-				| "RU"
-				| "RW"
-				| "SA"
-				| "SB"
-				| "SC"
-				| "SD"
-				| "SE"
-				| "SG"
-				| "SH"
-				| "SI"
-				| "SJ"
-				| "SK"
-				| "SL"
-				| "SM"
-				| "SN"
-				| "SO"
-				| "SR"
-				| "SS"
-				| "ST"
-				| "SV"
-				| "SX"
-				| "SY"
-				| "SZ"
-				| "TA"
-				| "TC"
-				| "TD"
-				| "TF"
-				| "TG"
-				| "TH"
-				| "TJ"
-				| "TK"
-				| "TL"
-				| "TM"
-				| "TN"
-				| "TO"
-				| "TR"
-				| "TT"
-				| "TV"
-				| "TW"
-				| "TZ"
-				| "UA"
-				| "UG"
-				| "UY"
-				| "UZ"
-				| "VA"
-				| "VC"
-				| "VE"
-				| "VG"
-				| "VI"
-				| "VN"
-				| "VU"
-				| "WF"
-				| "WS"
-				| "XK"
-				| "YE"
-				| "YT"
-				| "ZA"
-				| "ZM"
-				| "ZW";
-			/**
-			 * Array of available country codes (e.g., `["US", "CA", "GB"]`).
-			 */
-			availableCountries?: (
-				| "US"
-				| "AC"
-				| "AD"
-				| "AE"
-				| "AF"
-				| "AG"
-				| "AI"
-				| "AL"
-				| "AM"
-				| "AN"
-				| "AO"
-				| "AQ"
-				| "AR"
-				| "AS"
-				| "AT"
-				| "AU"
-				| "AW"
-				| "AX"
-				| "AZ"
-				| "BA"
-				| "BB"
-				| "BD"
-				| "BE"
-				| "BF"
-				| "BG"
-				| "BH"
-				| "BI"
-				| "BJ"
-				| "BL"
-				| "BM"
-				| "BN"
-				| "BO"
-				| "BQ"
-				| "BR"
-				| "BS"
-				| "BT"
-				| "BW"
-				| "BY"
-				| "BZ"
-				| "CA"
-				| "CC"
-				| "CD"
-				| "CF"
-				| "CG"
-				| "CH"
-				| "CI"
-				| "CK"
-				| "CL"
-				| "CM"
-				| "CN"
-				| "CO"
-				| "CR"
-				| "CU"
-				| "CV"
-				| "CW"
-				| "CX"
-				| "CY"
-				| "CZ"
-				| "DE"
-				| "DJ"
-				| "DK"
-				| "DM"
-				| "DO"
-				| "DZ"
-				| "EC"
-				| "EE"
-				| "EG"
-				| "EH"
-				| "ER"
-				| "ES"
-				| "ET"
-				| "FI"
-				| "FJ"
-				| "FK"
-				| "FM"
-				| "FO"
-				| "FR"
-				| "GA"
-				| "GB"
-				| "GD"
-				| "GE"
-				| "GF"
-				| "GG"
-				| "GH"
-				| "GI"
-				| "GL"
-				| "GM"
-				| "GN"
-				| "GP"
-				| "GQ"
-				| "GR"
-				| "GS"
-				| "GT"
-				| "GU"
-				| "GW"
-				| "GY"
-				| "HK"
-				| "HM"
-				| "HN"
-				| "HR"
-				| "HT"
-				| "HU"
-				| "ID"
-				| "IE"
-				| "IL"
-				| "IM"
-				| "IN"
-				| "IO"
-				| "IQ"
-				| "IR"
-				| "IS"
-				| "IT"
-				| "JE"
-				| "JM"
-				| "JO"
-				| "JP"
-				| "KE"
-				| "KG"
-				| "KH"
-				| "KI"
-				| "KM"
-				| "KN"
-				| "KP"
-				| "KR"
-				| "KW"
-				| "KY"
-				| "KZ"
-				| "LA"
-				| "LB"
-				| "LC"
-				| "LI"
-				| "LK"
-				| "LR"
-				| "LS"
-				| "LT"
-				| "LU"
-				| "LV"
-				| "LY"
-				| "MA"
-				| "MC"
-				| "MD"
-				| "ME"
-				| "MF"
-				| "MG"
-				| "MH"
-				| "MK"
-				| "ML"
-				| "MM"
-				| "MN"
-				| "MO"
-				| "MP"
-				| "MQ"
-				| "MR"
-				| "MS"
-				| "MT"
-				| "MU"
-				| "MV"
-				| "MW"
-				| "MX"
-				| "MY"
-				| "MZ"
-				| "NA"
-				| "NC"
-				| "NE"
-				| "NF"
-				| "NG"
-				| "NI"
-				| "NL"
-				| "NO"
-				| "NP"
-				| "NR"
-				| "NU"
-				| "NZ"
-				| "OM"
-				| "PA"
-				| "PE"
-				| "PF"
-				| "PG"
-				| "PH"
-				| "PK"
-				| "PL"
-				| "PM"
-				| "PN"
-				| "PR"
-				| "PS"
-				| "PT"
-				| "PW"
-				| "PY"
-				| "QA"
-				| "RE"
-				| "RO"
-				| "RS"
-				| "RU"
-				| "RW"
-				| "SA"
-				| "SB"
-				| "SC"
-				| "SD"
-				| "SE"
-				| "SG"
-				| "SH"
-				| "SI"
-				| "SJ"
-				| "SK"
-				| "SL"
-				| "SM"
-				| "SN"
-				| "SO"
-				| "SR"
-				| "SS"
-				| "ST"
-				| "SV"
-				| "SX"
-				| "SY"
-				| "SZ"
-				| "TA"
-				| "TC"
-				| "TD"
-				| "TF"
-				| "TG"
-				| "TH"
-				| "TJ"
-				| "TK"
-				| "TL"
-				| "TM"
-				| "TN"
-				| "TO"
-				| "TR"
-				| "TT"
-				| "TV"
-				| "TW"
-				| "TZ"
-				| "UA"
-				| "UG"
-				| "UY"
-				| "UZ"
-				| "VA"
-				| "VC"
-				| "VE"
-				| "VG"
-				| "VI"
-				| "VN"
-				| "VU"
-				| "WF"
-				| "WS"
-				| "XK"
-				| "YE"
-				| "YT"
-				| "ZA"
-				| "ZM"
-				| "ZW"
-			)[];
-		},
-	) => string;
-	/**
-	 * Password input params.
-	 *
-	 * @typedef {Object} PasswordInputParamsType
-	 * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
-	 * @property {number} [maxlength] If set, this becomes the maximum number of allowed characters in the input.
-	 * @property {string} [pattern] If set, the input value must match the given pattern.
-	 * @property {string} [value] If set, this becomes the default value of the input.
-	 */
-	/**
-	 * Create a password input field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & PasswordInputParamsType} params
-	 * @returns {string}
-	 */
-	passwordInput: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Sets the `placeholder` attribute of the input.
-			 */
-			placeholder?: string;
-			/**
-			 * If set, this becomes the maximum number of allowed characters in the input.
-			 */
-			maxlength?: number;
-			/**
-			 * If set, the input value must match the given pattern.
-			 */
-			pattern?: string;
-			/**
-			 * If set, this becomes the default value of the input.
-			 */
-			value?: string;
-		},
-	) => string;
-	/**
-	 * Number input params.
-	 *
-	 * @typedef {Object} NumberInputParamsType
-	 * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
-	 * @property {number} [min] Sets the minimum allowed value.
-	 * @property {number} [max] Sets the maximum allowed value.
-	 * @property {number} [step] Sets the stepping interval.
-	 * @property {string} [unit] Text to display before the input as a unit (e.g., `"$"`, `"€"`).
-	 * @property {string} [unitEnd] Text to display after the input as a unit (e.g., `"kg"`, `"%"`).
-	 * @property {number} [value] If set, this becomes the default value of the input.
-	 */
-	/**
-	 * Create a number input field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & NumberInputParamsType} params
-	 * @returns {string}
-	 */
-	numberInput: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Sets the `placeholder` attribute of the input.
-			 */
-			placeholder?: string;
-			/**
-			 * Sets the minimum allowed value.
-			 */
-			min?: number;
-			/**
-			 * Sets the maximum allowed value.
-			 */
-			max?: number;
-			/**
-			 * Sets the stepping interval.
-			 */
-			step?: number;
-			/**
-			 * Text to display before the input as a unit (e.g., `"$"`, `"€"`).
-			 */
-			unit?: string;
-			/**
-			 * Text to display after the input as a unit (e.g., `"kg"`, `"%"`).
-			 */
-			unitEnd?: string;
-			/**
-			 * If set, this becomes the default value of the input.
-			 */
-			value?: number;
-		},
-	) => string;
-	/**
-	 * Select option.
-	 *
-	 * @typedef {Object} SelectOptionType
-	 * @property {string} label The display text for the option.
-	 * @property {string} [value] The value for the option. If not provided, label is used as value.
-	 */
-	/**
-	 * Select box params.
-	 *
-	 * @typedef {Object} SelectBoxParamsType
-	 * @property {string} [placeholder] Sets the placeholder option of the select.
-	 * @property {Array<string|SelectOptionType>} options Array of options as strings or SelectOptionType objects.
-	 * @property {string} [selected] Pre-selected option value.
-	 */
-	/**
-	 * Create a select box field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & SelectBoxParamsType} params
-	 * @returns {string}
-	 */
-	selectBox: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Sets the placeholder option of the select.
-			 */
-			placeholder?: string;
-			/**
-			 * Array of options as strings or SelectOptionType objects.
-			 */
-			options: (
-				| string
-				| {
-						/**
-						 * The display text for the option.
-						 */
-						label: string;
-						/**
-						 * The value for the option. If not provided, label is used as value.
-						 */
-						value?: string;
-				  }
-			)[];
-			/**
-			 * Pre-selected option value.
-			 */
-			selected?: string;
-		},
-	) => string;
-	/**
-	 * Choice option.
-	 *
-	 * @typedef {Object} ChoiceOptionType
-	 * @property {string} label The display text for the choice.
-	 * @property {string} [value] The value for the choice. If not provided, label is used as value.
-	 */
-	/**
-	 * Choice input params.
-	 *
-	 * @typedef {Object} ChoiceInputParamsType
-	 * @property {Array<string|ChoiceOptionType>} choices Array of choices as strings or ChoiceOptionType objects.
-	 * @property {true} [multiple] Allow multiple selections.
-	 * @property {true} [horizontal] Display choices horizontally.
-	 * @property {true} [hideFormText] Hide the form text.
-	 * @property {Array<string>} [checked] Array of pre-checked choice values.
-	 */
-	/**
-	 * Create a choice input field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & ChoiceInputParamsType} params
-	 * @returns {string}
-	 */
-	choiceInput: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Array of choices as strings or ChoiceOptionType objects.
-			 */
-			choices: (
-				| string
-				| {
-						/**
-						 * The display text for the choice.
-						 */
-						label: string;
-						/**
-						 * The value for the choice. If not provided, label is used as value.
-						 */
-						value?: string;
-				  }
-			)[];
-			/**
-			 * Allow multiple selections.
-			 */
-			multiple?: true;
-			/**
-			 * Display choices horizontally.
-			 */
-			horizontal?: true;
-			/**
-			 * Hide the form text.
-			 */
-			hideFormText?: true;
-			/**
-			 * Array of pre-checked choice values.
-			 */
-			checked?: Array<string>;
-		},
-	) => string;
-	/**
-	 * Picture choice option.
-	 *
-	 * @typedef {Object} PictureChoiceOptionType
-	 * @property {string} label The display text for the choice.
-	 * @property {string} [value] The value for the choice. If not provided, label is used as value.
-	 * @property {string} image The URL of the image.
-	 */
-	/**
-	 * Picture choice params.
-	 *
-	 * @typedef {Object} PictureChoiceParamsType
-	 * @property {Array<PictureChoiceOptionType>} choices Array of picture choices.
-	 * @property {true} [multiple] Allow multiple selections.
-	 * @property {true} [supersize] Make the pictures larger.
-	 * @property {true} [hideLabels] Hide the text labels.
-	 * @property {true} [hideFormText] Hide the form text.
-	 * @property {Array<string>} [checked] Array of pre-checked choice values.
-	 */
-	/**
-	 * Create a picture choice field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & PictureChoiceParamsType} params
-	 * @returns {string}
-	 */
-	pictureChoice: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Array of picture choices.
-			 */
-			choices: {
-				/**
-				 * The display text for the choice.
-				 */
-				label: string;
-				/**
-				 * The value for the choice. If not provided, label is used as value.
-				 */
-				value?: string;
-				/**
-				 * The URL of the image.
-				 */
-				image: string;
-			}[];
-			/**
-			 * Allow multiple selections.
-			 */
-			multiple?: true;
-			/**
-			 * Make the pictures larger.
-			 */
-			supersize?: true;
-			/**
-			 * Hide the text labels.
-			 */
-			hideLabels?: true;
-			/**
-			 * Hide the form text.
-			 */
-			hideFormText?: true;
-			/**
-			 * Array of pre-checked choice values.
-			 */
-			checked?: Array<string>;
-		},
-	) => string;
-	/**
-	 * Rating input params.
-	 *
-	 * @typedef {Object} RatingInputParamsType
-	 * @property {number} [outOf] Number of rating options (1-10). Defaults to `5`.
-	 * @property {"star"|"heart"|"hearts"} [icon] Icon to use for rating. Defaults to `"star"`.
-	 * @property {number} [value] Pre-selected rating value.
-	 * @property {true} [hideLabels] Whether to hide the numeric labels.
-	 */
-	/**
-	 * Create a rating input field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & RatingInputParamsType} params
-	 * @returns {string}
-	 */
-	ratingInput: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Number of rating options (1-10). Defaults to `5`.
-			 */
-			outOf?: number;
-			/**
-			 * Icon to use for rating. Defaults to `"star"`.
-			 */
-			icon?: "star" | "heart" | "hearts";
-			/**
-			 * Pre-selected rating value.
-			 */
-			value?: number;
-			/**
-			 * Whether to hide the numeric labels.
-			 */
-			hideLabels?: true;
-		},
-	) => string;
-	/**
-	 * Opinion scale input params.
-	 *
-	 * @typedef {Object} OpinionScaleParamsType
-	 * @property {number} [startAt] Starting number (`0` or `1`). Defaults to `0`.
-	 * @property {number} [outOf] Maximum scale value (5-10). Defaults to `10`.
-	 * @property {string} [labelStart] Label for the start of the scale.
-	 * @property {string} [labelEnd] Label for the end of the scale.
-	 * @property {true} [hideLabelStart] Whether to hide the start label.
-	 * @property {true} [hideLabelEnd] Whether to hide the end label.
-	 * @property {number} [value] Pre-selected value.
-	 */
-	/**
-	 * Create an opinion scale field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & OpinionScaleParamsType} params
-	 * @returns {string}
-	 */
-	opinionScale: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Starting number (`0` or `1`). Defaults to `0`.
-			 */
-			startAt?: number;
-			/**
-			 * Maximum scale value (5-10). Defaults to `10`.
-			 */
-			outOf?: number;
-			/**
-			 * Label for the start of the scale.
-			 */
-			labelStart?: string;
-			/**
-			 * Label for the end of the scale.
-			 */
-			labelEnd?: string;
-			/**
-			 * Whether to hide the start label.
-			 */
-			hideLabelStart?: true;
-			/**
-			 * Whether to hide the end label.
-			 */
-			hideLabelEnd?: true;
-			/**
-			 * Pre-selected value.
-			 */
-			value?: number;
-		},
-	) => string;
-	/**
-	 * Datetime input params.
-	 *
-	 * @typedef {Object} DatetimeInputParamsType
-	 * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
-	 * @property {string} [min] Sets the minimum allowed datetime value (`"YYYY-MM-DDTHH:mm"`).
-	 * @property {string} [max] Sets the maximum allowed datetime value (`"YYYY-MM-DDTHH:mm"`).
-	 * @property {string} [step] Sets the stepping interval.
-	 * @property {string} [value] Pre-selected datetime value (`"YYYY-MM-DDTHH:mm"`).
-	 */
-	/**
-	 * Create a datetime input field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & DatetimeInputParamsType} params
-	 * @returns {string}
-	 */
-	datetimeInput: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Sets the `placeholder` attribute of the input.
-			 */
-			placeholder?: string;
-			/**
-			 * Sets the minimum allowed datetime value (`"YYYY-MM-DDTHH:mm"`).
-			 */
-			min?: string;
-			/**
-			 * Sets the maximum allowed datetime value (`"YYYY-MM-DDTHH:mm"`).
-			 */
-			max?: string;
-			/**
-			 * Sets the stepping interval.
-			 */
-			step?: string;
-			/**
-			 * Pre-selected datetime value (`"YYYY-MM-DDTHH:mm"`).
-			 */
-			value?: string;
-		},
-	) => string;
-	/**
-	 * Date input params.
-	 *
-	 * @typedef {Object} DateInputParamsType
-	 * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
-	 * @property {string} [min] Sets the minimum allowed date value (`"YYYY-MM-DD"`).
-	 * @property {string} [max] Sets the maximum allowed date value (`"YYYY-MM-DD"`).
-	 * @property {string} [step] Sets the stepping interval.
-	 * @property {string} [value] Pre-selected date value (`"YYYY-MM-DD"`).
-	 */
-	/**
-	 * Create a date input field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & DateInputParamsType} params
-	 * @returns {string}
-	 */
-	dateInput: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Sets the `placeholder` attribute of the input.
-			 */
-			placeholder?: string;
-			/**
-			 * Sets the minimum allowed date value (`"YYYY-MM-DD"`).
-			 */
-			min?: string;
-			/**
-			 * Sets the maximum allowed date value (`"YYYY-MM-DD"`).
-			 */
-			max?: string;
-			/**
-			 * Sets the stepping interval.
-			 */
-			step?: string;
-			/**
-			 * Pre-selected date value (`"YYYY-MM-DD"`).
-			 */
-			value?: string;
-		},
-	) => string;
-	/**
-	 * Time input params.
-	 *
-	 * @typedef {Object} TimeInputParamsType
-	 * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
-	 * @property {string} [min] Sets the minimum allowed time value (`"HH:mm"`).
-	 * @property {string} [max] Sets the maximum allowed time value (`"HH:mm"`).
-	 * @property {string} [step] Sets the stepping interval.
-	 * @property {string} [value] Pre-selected time value (`"HH:mm"`).
-	 */
-	/**
-	 * Create a time input field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & TimeInputParamsType} params
-	 * @returns {string}
-	 */
-	timeInput: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Sets the `placeholder` attribute of the input.
-			 */
-			placeholder?: string;
-			/**
-			 * Sets the minimum allowed time value (`"HH:mm"`).
-			 */
-			min?: string;
-			/**
-			 * Sets the maximum allowed time value (`"HH:mm"`).
-			 */
-			max?: string;
-			/**
-			 * Sets the stepping interval.
-			 */
-			step?: string;
-			/**
-			 * Pre-selected time value (`"HH:mm"`).
-			 */
-			value?: string;
-		},
-	) => string;
-	/**
-	 * File input params.
-	 *
-	 * @typedef {Object} FileInputParamsType
-	 * @property {number} [sizeLimit] Maximum file size in MB. Defaults to `10`.
-	 * @property {true} [imageOnly] When set, only image files are accepted.
-	 * @property {string} [currentFile] The current file that exists in the database. Use a URL for best results, for example, https://example.s3.com/image.png.
-	 */
-	/**
-	 * Create a file input field.
-	 *
-	 * @param {string} name
-	 * @param {FormFieldSharedParamsType & FileInputParamsType} params
-	 * @returns {string}
-	 */
-	fileInput: (
-		name: string,
-		params: {
-			/**
-			 * The main question of the form field.
-			 */
-			question: string;
-			/**
-			 * When set, the field becomes required.
-			 */
-			required?: true;
-			/**
-			 * Any extra information that the user may need to fill out the form.
-			 */
-			description?: string;
-			/**
-			 * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
-			 */
-			fieldSize?: "sm";
-			/**
-			 * When set to `"classic"`, the question and description of the form field are made smaller.
-			 */
-			labelStyle?: "classic";
-			/**
-			 * When set, the question and description of the form field are made smaller.
-			 */
-			subfield?: true;
-			/**
-			 * When set, the input is disabled.
-			 */
-			disabled?: true;
-			/**
-			 * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
-			 */
-			autofocus?: true;
-			/**
-			 * The id attribute of the form field.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the form field.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the form field.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-			/**
-			 * Display condition for the form field.
-			 */
-			displayCondition?: {
-				/**
-				 * The names of the form fields or data to use in the condition.
-				 */
-				dependencies: Array<string>;
-				/**
-				 * The actual condition.
-				 */
-				condition: string;
-			};
-		} & {
-			/**
-			 * Maximum file size in MB. Defaults to `10`.
-			 */
-			sizeLimit?: number;
-			/**
-			 * When set, only image files are accepted.
-			 */
-			imageOnly?: true;
-			/**
-			 * The current file that exists in the database. Use a URL for best results, for example, https://example.s3.com/image.png.
-			 */
-			currentFile?: string;
-		},
-	) => string;
-	/**
-	 * Slide params.
-	 *
-	 * @typedef {Object} SlideParamsType
-	 * @property {string} [jumpCondition] Logic jump condition that must be `true` for slide to be shown.
-	 * @property {string} [pageProgress] Progress indicator shown on top (e.g. `"50%"` or `"1/2"`).
-	 * @property {"start"|"center"|"end"|"stretch"} [buttonAlignment] Set the alignment of this slide's CTA button.
-	 * @property {true} [post] If set, posts form data up to this slide when going to the next one.
-	 * @property {true} [disablePrevious] If set, disables the previous button.
-	 */
-	/**
-	 * Create a slide.
-	 *
-	 * @param {SlideParamsType} [params]
-	 * @returns {string}
-	 */
-	slide: (params?: {
-		/**
-		 * Logic jump condition that must be `true` for slide to be shown.
-		 */
-		jumpCondition?: string;
-		/**
-		 * Progress indicator shown on top (e.g. `"50%"` or `"1/2"`).
-		 */
-		pageProgress?: string;
-		/**
-		 * Set the alignment of this slide's CTA button.
-		 */
-		buttonAlignment?: "start" | "center" | "end" | "stretch";
-		/**
-		 * If set, posts form data up to this slide when going to the next one.
-		 */
-		post?: true;
-		/**
-		 * If set, disables the previous button.
-		 */
-		disablePrevious?: true;
-	}) => string;
-	/**
-	 * Start slide params.
-	 *
-	 * @typedef {Object} StartSlideParamsType
-	 * @property {string} [buttonText] Custom text for the start button.
-	 * @property {"start"|"center"|"end"|"stretch"} [buttonAlignment] Set the alignment of this slide's CTA button.
-	 */
-	/**
-	 * Create a start slide.
-	 *
-	 * @param {StartSlideParamsType} [params]
-	 * @returns {string}
-	 */
-	startSlide: (params?: {
-		/**
-		 * Custom text for the start button.
-		 */
-		buttonText?: string;
-		/**
-		 * Set the alignment of this slide's CTA button.
-		 */
-		buttonAlignment?: "start" | "center" | "end" | "stretch";
-	}) => string;
-	/**
-	 * End slide params.
-	 *
-	 * @typedef {Object} EndSlideParamsType
-	 * @property {string} [redirectUrl] URL to redirect to from the end slide.
-	 */
-	/**
-	 * Create an end slide.
-	 *
-	 * @param {EndSlideParamsType} [params]
-	 * @returns {string}
-	 */
-	endSlide: (params?: {
-		/**
-		 * URL to redirect to from the end slide.
-		 */
-		redirectUrl?: string;
-	}) => string;
-	/**
-	 * Create a data-block.
-	 *
-	 * @param {Object} data
-	 * @returns {string}
-	 */
-	dataBlock: (data: any) => string;
-	/**
-	 * Create free-form content.
-	 *
-	 * @param {string} content
-	 * @returns {string}
-	 */
-	free: (content: string) => string;
-	/**
-	 * Block-level element params.
-	 *
-	 * @typedef {Object} BlockElemParamsType
-	 * @property {string} [id] The id attribute of the element.
-	 * @property {Array.<string>} [classNames] The CSS class names of the element.
-	 * @property {Array.<HTMLAttributeType>} [attrs] Other HTML attributes of the element.
-	 */
-	/**
-	 * Create a paragraph.
-	 *
-	 * @param {string} content
-	 * @param {BlockElemParamsType} [params]
-	 * @returns {string}
-	 */
-	p: (
-		content: string,
-		params?: {
-			/**
-			 * The id attribute of the element.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the element.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the element.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-		},
-	) => string;
-	/**
-	 * Create a heading 1.
-	 *
-	 * @param {string} content
-	 * @param {BlockElemParamsType} [params]
-	 * @returns {string}
-	 */
-	h1: (
-		content: string,
-		params?: {
-			/**
-			 * The id attribute of the element.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the element.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the element.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-		},
-	) => string;
-	/**
-	 * Create a heading 2.
-	 *
-	 * @param {string} content
-	 * @param {BlockElemParamsType} [params]
-	 * @returns {string}
-	 */
-	h2: (
-		content: string,
-		params?: {
-			/**
-			 * The id attribute of the element.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the element.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the element.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-		},
-	) => string;
-	/**
-	 * Create a heading 3.
-	 *
-	 * @param {string} content
-	 * @param {BlockElemParamsType} [params]
-	 * @returns {string}
-	 */
-	h3: (
-		content: string,
-		params?: {
-			/**
-			 * The id attribute of the element.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the element.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the element.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-		},
-	) => string;
-	/**
-	 * Create a heading 4.
-	 *
-	 * @param {string} content
-	 * @param {BlockElemParamsType} [params]
-	 * @returns {string}
-	 */
-	h4: (
-		content: string,
-		params?: {
-			/**
-			 * The id attribute of the element.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the element.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the element.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-		},
-	) => string;
-	/**
-	 * Create a heading 5.
-	 *
-	 * @param {string} content
-	 * @param {BlockElemParamsType} [params]
-	 * @returns {string}
-	 */
-	h5: (
-		content: string,
-		params?: {
-			/**
-			 * The id attribute of the element.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the element.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the element.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-		},
-	) => string;
-	/**
-	 * Create a heading 6.
-	 *
-	 * @param {string} content
-	 * @param {BlockElemParamsType} [params]
-	 * @returns {string}
-	 */
-	h6: (
-		content: string,
-		params?: {
-			/**
-			 * The id attribute of the element.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the element.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the element.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-		},
-	) => string;
-	/**
-	 * Create an unordered list.
-	 *
-	 * @param {Array.<string>} items
-	 * @param {BlockElemParamsType} [params]
-	 * @returns {string}
-	 */
-	ul: (
-		items: Array<string>,
-		params?: {
-			/**
-			 * The id attribute of the element.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the element.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the element.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-		},
-	) => string;
-	/**
-	 * Create an ordered list.
-	 *
-	 * @param {Array.<string>} items
-	 * @param {BlockElemParamsType} [params]
-	 * @returns {string}
-	 */
-	ol: (
-		items: Array<string>,
-		params?: {
-			/**
-			 * The id attribute of the element.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the element.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the element.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-		},
-	) => string;
-	/**
-	 * Create a blockquote.
-	 *
-	 * @param {string} content
-	 * @param {BlockElemParamsType} [params]
-	 * @returns {string}
-	 */
-	blockquote: (
-		content: string,
-		params?: {
-			/**
-			 * The id attribute of the element.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the element.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the element.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-		},
-	) => string;
-	/**
-	 * Code params.
-	 *
-	 * @typedef {Object} CodeParamsType
-	 * @property {string} [language] The language of the code.
-	 */
-	/**
-	 * Create a block-level code element.
-	 *
-	 * @param {string} content
-	 * @param {BlockElemParamsType & CodeParamsType} [params]
-	 * @returns {string}
-	 */
-	code: (
-		content: string,
-		params?: {
-			/**
-			 * The id attribute of the element.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the element.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the element.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-		} & {
-			/**
-			 * The language of the code.
-			 */
-			language?: string;
-		},
-	) => string;
-	/**
-	 * Create a horizontal rule.
-	 *
-	 * @returns {string}
-	 */
-	hr: () => string;
-	/**
-	 * Division params.
-	 *
-	 * @typedef {Object} DivParamsType
-	 * @property {Array.<string>} [bind] The data to bind to the division, e.g., `["name", "email", "birthday"]`.
-	 */
-	/**
-	 * Create a division start tag.
-	 *
-	 * @param {BlockElemParamsType & DivParamsType} [params]
-	 * @returns {string}
-	 */
-	divStart: (
-		params?: {
-			/**
-			 * The id attribute of the element.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the element.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the element.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-		} & {
-			/**
-			 * The data to bind to the division, e.g., `["name", "email", "birthday"]`.
-			 */
-			bind?: Array<string>;
-		},
-	) => string;
-	/**
-	 * Create a division end tag.
-	 *
-	 * @returns {string}
-	 */
-	divEnd: () => string;
-	/**
-	 * Create a division.
-	 *
-	 * @param {string} content
-	 * @param {BlockElemParamsType & DivParamsType} [params]
-	 * @returns {string}
-	 */
-	div: (
-		content: string,
-		params?: {
-			/**
-			 * The id attribute of the element.
-			 */
-			id?: string;
-			/**
-			 * The CSS class names of the element.
-			 */
-			classNames?: Array<string>;
-			/**
-			 * Other HTML attributes of the element.
-			 */
-			attrs?: {
-				/**
-				 * The name of the attribute.
-				 */
-				name: string;
-				/**
-				 * The value of the attribute.
-				 */
-				value: string;
-			}[];
-		} & {
-			/**
-			 * The data to bind to the division, e.g., `["name", "email", "birthday"]`.
-			 */
-			bind?: Array<string>;
-		},
-	) => string;
+    /**
+     * The page or form settings.
+     *
+     * @typedef {Object} SettingsType
+     * @property {"all-slides"} [autofocus] If set to `"all-slides"`, when a new slide becomes active (including the first slide on page load), the very first form field will be auto-focused.
+     * @property {string} [accent] The primary color (must be HTML name, hex code, or RGB) used on buttons, form fields, etc. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+     * @property {string} [accentForeground] The text color (must be HTML name, hex code, or RGB) used on `accent` background, for example, the text on buttons. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+     * @property {string} [backdropOpacity] Sets an overlay of the `background-color` on top of the background image. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+     * @property {string} [backgroundColor] The `background-color` of the page (must be HTML name, hex code, or RGB). [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+     * @property {string} [backgroundImage] The `background-image` of the page. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+     * @property {string} [brand] An image of your logo added to the header of the page in the top-left corner (must be valid Markdown image). [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+     * @property {"center"|"end"|"stretch"} [buttonAlignment] Set the alignment of the slide CTA buttons.
+     * @property {string} [color] The `color` of the text on the page (must be HTML name, hex code, or RGB). [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+     * @property {"light"|"dark"} [colorScheme] The default or initial color scheme of the page. Default is `"light"`.
+     * @property {"domain-wide"|"isolate"} [colorSchemeScope] Determines how color scheme preference is saved and applied. Default is `"domain-wide"`.
+     * @property {"show"} [colorSchemeToggle] If set to `"show"`, a toggle button will be available in the footer.
+     * @property {string} [cssPrefix] Prefix added to all CSS classes. Default is `"fmd-"`.
+     * @property {string} [cta] Adds a call to action link styled as a button on the header (must be valid Markdown link).
+     * @property {"ltr"|"rtl"} [dir] The direction of the page's text. Default is `"ltr"`.
+     * @property {string} [favicon] The favicon of the page.
+     * @property {"sm"} [fieldSize] If set to `"sm"`, the size of form fields will be made smaller.
+     * @property {string} [fontFamily] The `font-family` used on the page.
+     * @property {string} [fontImportUrl] URL to import custom fonts (must be valid CSS for the `@import` property).
+     * @property {"sm"|"lg"} [fontSize] Makes the `font-size` of everything on the page smaller or larger.
+     * @property {string} [formDelimiter] Used to separate parameters when creating form fields. Default is `"|"`.
+     * @property {"hide"|"show"} [formsmdBranding] Controls visibility of the Forms.md branding.
+     * @property {"classic"} [formStyle] If set to `"classic"`, the form fields will have a classic appearance.
+     * @property {"hide"|"show"} [footer] Controls visibility of the footer.
+     * @property {"json"|"csv"|"tsv"} [getFormat] The format for reading data. Default is `"json"`. [Read docs](https://formsmd.gitbook.io/docs/set-and-read-data).
+     * @property {string} [getObjectsName] Name used for objects when reading data. Default is `"objects"`. [Read docs](https://formsmd.gitbook.io/docs/set-and-read-data).
+     * @property {string} [getUrl] URL for reading data. [Read docs](https://formsmd.gitbook.io/docs/set-and-read-data).
+     * @property {"hide"|"show"|"align"} [header] Controls header visibility and alignment.
+     * @property {"anchored"} [headings] If set to `"anchored"`, all headings will contain an anchor link.
+     * @property {string} [id] Identifier for the page or form.
+     * @property {"classic"} [labelStyle] If set to `"classic"`, the question and description of form fields will be made smaller.
+     * @property {keyof typeof translations} [localization] Sets the language for automatic translation. Default is `"en"`.
+     * @property {string} [metaAuthor] Sets the author metadata.
+     * @property {string} [metaDescription] Sets the description metadata.
+     * @property {string} [metaImage] Sets the Open Graph image.
+     * @property {string} [metaKeywords] Sets the keywords metadata.
+     * @property {string} [metaType] Sets the Open Graph type.
+     * @property {string} [metaUrl] Sets the Open Graph URL.
+     * @property {"form-slides"|"slides"|"single"} [page] Determines the layout of the page. Default is `"form-slides"`.
+     * @property {"hide"|"show"|"decorative"} [pageProgress] Controls visibility and function of the page progress.
+     * @property {"hide"|"show"} [placeholders] Controls visibility of input placeholders.
+     * @property {string} [postSheetName] When sending responses directly to Google Sheets, this specifies which sheet to save responses to.
+     * @property {string} [postUrl] URL to send form responses to using POST request.
+     * @property {"show"} [restartButton] If set to `"show"`, the restart button will be visible.
+     * @property {"none"|"pill"} [rounded] Controls rounding of buttons and UI elements.
+     * @property {"hide"|"show"} [slideControls] Controls visibility of next and previous buttons.
+     * @property {string} [slideDelimiter] Specifies where new slides are created. Default is `"---"`.
+     * @property {string} [submitButtonText] Custom text for submit buttons.
+     * @property {string} [title] The title of the page.
+     * @property {"start"} [verticalAlignment] If set to `"start"`, content is aligned to the top of the page vertically.
+     */
+    /**
+     * Create an instance of the class.
+     *
+     * @param {SettingsType} settings
+     */
+    constructor(settings: {
+        /**
+         * If set to `"all-slides"`, when a new slide becomes active (including the first slide on page load), the very first form field will be auto-focused.
+         */
+        autofocus?: "all-slides";
+        /**
+         * The primary color (must be HTML name, hex code, or RGB) used on buttons, form fields, etc. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+         */
+        accent?: string;
+        /**
+         * The text color (must be HTML name, hex code, or RGB) used on `accent` background, for example, the text on buttons. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+         */
+        accentForeground?: string;
+        /**
+         * Sets an overlay of the `background-color` on top of the background image. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+         */
+        backdropOpacity?: string;
+        /**
+         * The `background-color` of the page (must be HTML name, hex code, or RGB). [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+         */
+        backgroundColor?: string;
+        /**
+         * The `background-image` of the page. [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+         */
+        backgroundImage?: string;
+        /**
+         * An image of your logo added to the header of the page in the top-left corner (must be valid Markdown image). [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+         */
+        brand?: string;
+        /**
+         * Set the alignment of the slide CTA buttons.
+         */
+        buttonAlignment?: "center" | "end" | "stretch";
+        /**
+         * The `color` of the text on the page (must be HTML name, hex code, or RGB). [Supports up to two values](https://formsmd.gitbook.io/docs/settings#different-values-for-light-mode-and-dark-mode).
+         */
+        color?: string;
+        /**
+         * The default or initial color scheme of the page. Default is `"light"`.
+         */
+        colorScheme?: "light" | "dark";
+        /**
+         * Determines how color scheme preference is saved and applied. Default is `"domain-wide"`.
+         */
+        colorSchemeScope?: "domain-wide" | "isolate";
+        /**
+         * If set to `"show"`, a toggle button will be available in the footer.
+         */
+        colorSchemeToggle?: "show";
+        /**
+         * Prefix added to all CSS classes. Default is `"fmd-"`.
+         */
+        cssPrefix?: string;
+        /**
+         * Adds a call to action link styled as a button on the header (must be valid Markdown link).
+         */
+        cta?: string;
+        /**
+         * The direction of the page's text. Default is `"ltr"`.
+         */
+        dir?: "ltr" | "rtl";
+        /**
+         * The favicon of the page.
+         */
+        favicon?: string;
+        /**
+         * If set to `"sm"`, the size of form fields will be made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * The `font-family` used on the page.
+         */
+        fontFamily?: string;
+        /**
+         * URL to import custom fonts (must be valid CSS for the `@import` property).
+         */
+        fontImportUrl?: string;
+        /**
+         * Makes the `font-size` of everything on the page smaller or larger.
+         */
+        fontSize?: "sm" | "lg";
+        /**
+         * Used to separate parameters when creating form fields. Default is `"|"`.
+         */
+        formDelimiter?: string;
+        /**
+         * Controls visibility of the Forms.md branding.
+         */
+        formsmdBranding?: "hide" | "show";
+        /**
+         * If set to `"classic"`, the form fields will have a classic appearance.
+         */
+        formStyle?: "classic";
+        /**
+         * Controls visibility of the footer.
+         */
+        footer?: "hide" | "show";
+        /**
+         * The format for reading data. Default is `"json"`. [Read docs](https://formsmd.gitbook.io/docs/set-and-read-data).
+         */
+        getFormat?: "json" | "csv" | "tsv";
+        /**
+         * Name used for objects when reading data. Default is `"objects"`. [Read docs](https://formsmd.gitbook.io/docs/set-and-read-data).
+         */
+        getObjectsName?: string;
+        /**
+         * URL for reading data. [Read docs](https://formsmd.gitbook.io/docs/set-and-read-data).
+         */
+        getUrl?: string;
+        /**
+         * Controls header visibility and alignment.
+         */
+        header?: "hide" | "show" | "align";
+        /**
+         * If set to `"anchored"`, all headings will contain an anchor link.
+         */
+        headings?: "anchored";
+        /**
+         * Identifier for the page or form.
+         */
+        id?: string;
+        /**
+         * If set to `"classic"`, the question and description of form fields will be made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * Sets the language for automatic translation. Default is `"en"`.
+         */
+        localization?: keyof typeof translations;
+        /**
+         * Sets the author metadata.
+         */
+        metaAuthor?: string;
+        /**
+         * Sets the description metadata.
+         */
+        metaDescription?: string;
+        /**
+         * Sets the Open Graph image.
+         */
+        metaImage?: string;
+        /**
+         * Sets the keywords metadata.
+         */
+        metaKeywords?: string;
+        /**
+         * Sets the Open Graph type.
+         */
+        metaType?: string;
+        /**
+         * Sets the Open Graph URL.
+         */
+        metaUrl?: string;
+        /**
+         * Determines the layout of the page. Default is `"form-slides"`.
+         */
+        page?: "form-slides" | "slides" | "single";
+        /**
+         * Controls visibility and function of the page progress.
+         */
+        pageProgress?: "hide" | "show" | "decorative";
+        /**
+         * Controls visibility of input placeholders.
+         */
+        placeholders?: "hide" | "show";
+        /**
+         * When sending responses directly to Google Sheets, this specifies which sheet to save responses to.
+         */
+        postSheetName?: string;
+        /**
+         * URL to send form responses to using POST request.
+         */
+        postUrl?: string;
+        /**
+         * If set to `"show"`, the restart button will be visible.
+         */
+        restartButton?: "show";
+        /**
+         * Controls rounding of buttons and UI elements.
+         */
+        rounded?: "none" | "pill";
+        /**
+         * Controls visibility of next and previous buttons.
+         */
+        slideControls?: "hide" | "show";
+        /**
+         * Specifies where new slides are created. Default is `"---"`.
+         */
+        slideDelimiter?: string;
+        /**
+         * Custom text for submit buttons.
+         */
+        submitButtonText?: string;
+        /**
+         * The title of the page.
+         */
+        title?: string;
+        /**
+         * If set to `"start"`, content is aligned to the top of the page vertically.
+         */
+        verticalAlignment?: "start";
+    });
+    template: string;
+    settings: {};
+    passedSettings: {};
+    /**
+     * HTML attribute.
+     *
+     * @typedef {Object} HTMLAttributeType
+     * @property {string} name The name of the attribute.
+     * @property {string} value The value of the attribute.
+     */
+    /**
+     * Display condition.
+     *
+     * @typedef {Object} DisplayConditionType
+     * @property {Array.<string>} dependencies The names of the form fields or data to use in the condition.
+     * @property {string} condition The actual condition.
+     */
+    /**
+     * Params shared between all form fields.
+     *
+     * @typedef {Object} FormFieldSharedParamsType
+     * @property {string} question The main question of the form field.
+     * @property {true} [required] When set, the field becomes required.
+     * @property {string} [description] Any extra information that the user may need to fill out the form.
+     * @property {"sm"} [fieldSize] When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+     * @property {"classic"} [labelStyle] When set to `"classic"`, the question and description of the form field are made smaller.
+     * @property {true} [subfield] When set, the question and description of the form field are made smaller.
+     * @property {true} [disabled] When set, the input is disabled.
+     * @property {true} [autofocus] When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+     * @property {string} [id] The id attribute of the form field.
+     * @property {Array.<string>} [classNames] The CSS class names of the form field.
+     * @property {Array.<HTMLAttributeType>} [attrs] Other HTML attributes of the form field.
+     * @property {DisplayConditionType} [displayCondition] Display condition for the form field.
+     */
+    /**
+     * Text input params.
+     *
+     * @typedef {Object} TextInputParamsType
+     * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
+     * @property {true} [multiline] When set, the input accepts values with one or more lines because the `<textarea>` element is used.
+     * @property {number} [maxlength] If set, this becomes the maximum number of allowed characters in the input.
+     * @property {string} [pattern] If set, the input value must match the given pattern.
+     * @property {string} [value] If set, this becomes the default value of the input.
+     */
+    /**
+     * Create a text input field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & TextInputParamsType} params
+     * @returns {string}
+     */
+    textInput: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Sets the `placeholder` attribute of the input.
+         */
+        placeholder?: string;
+        /**
+         * When set, the input accepts values with one or more lines because the `<textarea>` element is used.
+         */
+        multiline?: true;
+        /**
+         * If set, this becomes the maximum number of allowed characters in the input.
+         */
+        maxlength?: number;
+        /**
+         * If set, the input value must match the given pattern.
+         */
+        pattern?: string;
+        /**
+         * If set, this becomes the default value of the input.
+         */
+        value?: string;
+    }) => string;
+    /**
+     * Email input params.
+     *
+     * @typedef {Object} EmailInputParamsType
+     * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
+     * @property {number} [maxlength] If set, this becomes the maximum number of allowed characters in the input.
+     * @property {string} [pattern] If set, the input value must match the given pattern.
+     * @property {string} [value] If set, this becomes the default value of the input.
+     */
+    /**
+     * Create an email input field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & EmailInputParamsType} params
+     * @returns {string}
+     */
+    emailInput: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Sets the `placeholder` attribute of the input.
+         */
+        placeholder?: string;
+        /**
+         * If set, this becomes the maximum number of allowed characters in the input.
+         */
+        maxlength?: number;
+        /**
+         * If set, the input value must match the given pattern.
+         */
+        pattern?: string;
+        /**
+         * If set, this becomes the default value of the input.
+         */
+        value?: string;
+    }) => string;
+    /**
+     * URL input params.
+     *
+     * @typedef {Object} URLInputParamsType
+     * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
+     * @property {number} [maxlength] If set, this becomes the maximum number of allowed characters in the input.
+     * @property {string} [pattern] If set, the input value must match the given pattern.
+     * @property {string} [value] If set, this becomes the default value of the input.
+     */
+    /**
+     * Create a URL input field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & URLInputParamsType} params
+     * @returns {string}
+     */
+    urlInput: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Sets the `placeholder` attribute of the input.
+         */
+        placeholder?: string;
+        /**
+         * If set, this becomes the maximum number of allowed characters in the input.
+         */
+        maxlength?: number;
+        /**
+         * If set, the input value must match the given pattern.
+         */
+        pattern?: string;
+        /**
+         * If set, this becomes the default value of the input.
+         */
+        value?: string;
+    }) => string;
+    /**
+     * Country code.
+     *
+     * @typedef {keyof typeof placeholdersAndCallingCodes} CountryCodeType
+     */
+    /**
+     * Telephone input params.
+     *
+     * @typedef {Object} TelInputParamsType
+     * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
+     * @property {number} [maxlength] If set, this becomes the maximum number of allowed characters in the input.
+     * @property {string} [pattern] If set, the input value must match the given pattern.
+     * @property {string} [value] If set, this becomes the default value of the input.
+     * @property {CountryCodeType} [country] The default country code (e.g., `"US"`). Defaults to `"US"` if not specified.
+     * @property {Array.<CountryCodeType>} [availableCountries] Array of available country codes (e.g., `["US", "CA", "GB"]`).
+     */
+    /**
+     * Create a telephone input field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & TelInputParamsType} params
+     * @returns {string}
+     */
+    telInput: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Sets the `placeholder` attribute of the input.
+         */
+        placeholder?: string;
+        /**
+         * If set, this becomes the maximum number of allowed characters in the input.
+         */
+        maxlength?: number;
+        /**
+         * If set, the input value must match the given pattern.
+         */
+        pattern?: string;
+        /**
+         * If set, this becomes the default value of the input.
+         */
+        value?: string;
+        /**
+         * The default country code (e.g., `"US"`). Defaults to `"US"` if not specified.
+         */
+        country?: "US" | "AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AN" | "AO" | "AQ" | "AR" | "AS" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BW" | "BY" | "BZ" | "CA" | "CC" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CU" | "CV" | "CW" | "CX" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FM" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HM" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IR" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KP" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MH" | "MK" | "ML" | "MM" | "MN" | "MO" | "MP" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NF" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PW" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SD" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SY" | "SZ" | "TA" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VI" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW";
+        /**
+         * Array of available country codes (e.g., `["US", "CA", "GB"]`).
+         */
+        availableCountries?: Array<"US" | "AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AN" | "AO" | "AQ" | "AR" | "AS" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BW" | "BY" | "BZ" | "CA" | "CC" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CU" | "CV" | "CW" | "CX" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FM" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HM" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IR" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KP" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MH" | "MK" | "ML" | "MM" | "MN" | "MO" | "MP" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NF" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PW" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SD" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SY" | "SZ" | "TA" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VI" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW">;
+    }) => string;
+    /**
+     * Password input params.
+     *
+     * @typedef {Object} PasswordInputParamsType
+     * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
+     * @property {number} [maxlength] If set, this becomes the maximum number of allowed characters in the input.
+     * @property {string} [pattern] If set, the input value must match the given pattern.
+     * @property {string} [value] If set, this becomes the default value of the input.
+     */
+    /**
+     * Create a password input field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & PasswordInputParamsType} params
+     * @returns {string}
+     */
+    passwordInput: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Sets the `placeholder` attribute of the input.
+         */
+        placeholder?: string;
+        /**
+         * If set, this becomes the maximum number of allowed characters in the input.
+         */
+        maxlength?: number;
+        /**
+         * If set, the input value must match the given pattern.
+         */
+        pattern?: string;
+        /**
+         * If set, this becomes the default value of the input.
+         */
+        value?: string;
+    }) => string;
+    /**
+     * Number input params.
+     *
+     * @typedef {Object} NumberInputParamsType
+     * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
+     * @property {number} [min] Sets the minimum allowed value.
+     * @property {number} [max] Sets the maximum allowed value.
+     * @property {number} [step] Sets the stepping interval.
+     * @property {string} [unit] Text to display before the input as a unit (e.g., `"$"`, `"€"`).
+     * @property {string} [unitEnd] Text to display after the input as a unit (e.g., `"kg"`, `"%"`).
+     * @property {number} [value] If set, this becomes the default value of the input.
+     */
+    /**
+     * Create a number input field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & NumberInputParamsType} params
+     * @returns {string}
+     */
+    numberInput: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Sets the `placeholder` attribute of the input.
+         */
+        placeholder?: string;
+        /**
+         * Sets the minimum allowed value.
+         */
+        min?: number;
+        /**
+         * Sets the maximum allowed value.
+         */
+        max?: number;
+        /**
+         * Sets the stepping interval.
+         */
+        step?: number;
+        /**
+         * Text to display before the input as a unit (e.g., `"$"`, `"€"`).
+         */
+        unit?: string;
+        /**
+         * Text to display after the input as a unit (e.g., `"kg"`, `"%"`).
+         */
+        unitEnd?: string;
+        /**
+         * If set, this becomes the default value of the input.
+         */
+        value?: number;
+    }) => string;
+    /**
+     * Select option.
+     *
+     * @typedef {Object} SelectOptionType
+     * @property {string} label The display text for the option.
+     * @property {string} [value] The value for the option. If not provided, label is used as value.
+     */
+    /**
+     * Select box params.
+     *
+     * @typedef {Object} SelectBoxParamsType
+     * @property {string} [placeholder] Sets the placeholder option of the select.
+     * @property {Array<string|SelectOptionType>} options Array of options as strings or SelectOptionType objects.
+     * @property {string} [selected] Pre-selected option value.
+     */
+    /**
+     * Create a select box field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & SelectBoxParamsType} params
+     * @returns {string}
+     */
+    selectBox: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Sets the placeholder option of the select.
+         */
+        placeholder?: string;
+        /**
+         * Array of options as strings or SelectOptionType objects.
+         */
+        options: Array<string | {
+            /**
+             * The display text for the option.
+             */
+            label: string;
+            /**
+             * The value for the option. If not provided, label is used as value.
+             */
+            value?: string;
+        }>;
+        /**
+         * Pre-selected option value.
+         */
+        selected?: string;
+    }) => string;
+    /**
+     * Choice option.
+     *
+     * @typedef {Object} ChoiceOptionType
+     * @property {string} label The display text for the choice.
+     * @property {string} [value] The value for the choice. If not provided, label is used as value.
+     */
+    /**
+     * Choice input params.
+     *
+     * @typedef {Object} ChoiceInputParamsType
+     * @property {Array<string|ChoiceOptionType>} choices Array of choices as strings or ChoiceOptionType objects.
+     * @property {true} [multiple] Allow multiple selections.
+     * @property {true} [horizontal] Display choices horizontally.
+     * @property {true} [hideFormText] Hide the form text.
+     * @property {Array<string>} [checked] Array of pre-checked choice values.
+     */
+    /**
+     * Create a choice input field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & ChoiceInputParamsType} params
+     * @returns {string}
+     */
+    choiceInput: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Array of choices as strings or ChoiceOptionType objects.
+         */
+        choices: Array<string | {
+            /**
+             * The display text for the choice.
+             */
+            label: string;
+            /**
+             * The value for the choice. If not provided, label is used as value.
+             */
+            value?: string;
+        }>;
+        /**
+         * Allow multiple selections.
+         */
+        multiple?: true;
+        /**
+         * Display choices horizontally.
+         */
+        horizontal?: true;
+        /**
+         * Hide the form text.
+         */
+        hideFormText?: true;
+        /**
+         * Array of pre-checked choice values.
+         */
+        checked?: Array<string>;
+    }) => string;
+    /**
+     * Picture choice option.
+     *
+     * @typedef {Object} PictureChoiceOptionType
+     * @property {string} label The display text for the choice.
+     * @property {string} [value] The value for the choice. If not provided, label is used as value.
+     * @property {string} image The URL of the image.
+     */
+    /**
+     * Picture choice params.
+     *
+     * @typedef {Object} PictureChoiceParamsType
+     * @property {Array<PictureChoiceOptionType>} choices Array of picture choices.
+     * @property {true} [multiple] Allow multiple selections.
+     * @property {true} [supersize] Make the pictures larger.
+     * @property {true} [hideLabels] Hide the text labels.
+     * @property {true} [hideFormText] Hide the form text.
+     * @property {Array<string>} [checked] Array of pre-checked choice values.
+     */
+    /**
+     * Create a picture choice field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & PictureChoiceParamsType} params
+     * @returns {string}
+     */
+    pictureChoice: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Array of picture choices.
+         */
+        choices: Array<{
+            /**
+             * The display text for the choice.
+             */
+            label: string;
+            /**
+             * The value for the choice. If not provided, label is used as value.
+             */
+            value?: string;
+            /**
+             * The URL of the image.
+             */
+            image: string;
+        }>;
+        /**
+         * Allow multiple selections.
+         */
+        multiple?: true;
+        /**
+         * Make the pictures larger.
+         */
+        supersize?: true;
+        /**
+         * Hide the text labels.
+         */
+        hideLabels?: true;
+        /**
+         * Hide the form text.
+         */
+        hideFormText?: true;
+        /**
+         * Array of pre-checked choice values.
+         */
+        checked?: Array<string>;
+    }) => string;
+    /**
+     * Rating input params.
+     *
+     * @typedef {Object} RatingInputParamsType
+     * @property {number} [outOf] Number of rating options (1-10). Defaults to `5`.
+     * @property {"star"|"heart"|"hearts"} [icon] Icon to use for rating. Defaults to `"star"`.
+     * @property {number} [value] Pre-selected rating value.
+     * @property {true} [hideLabels] Whether to hide the numeric labels.
+     */
+    /**
+     * Create a rating input field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & RatingInputParamsType} params
+     * @returns {string}
+     */
+    ratingInput: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Number of rating options (1-10). Defaults to `5`.
+         */
+        outOf?: number;
+        /**
+         * Icon to use for rating. Defaults to `"star"`.
+         */
+        icon?: "star" | "heart" | "hearts";
+        /**
+         * Pre-selected rating value.
+         */
+        value?: number;
+        /**
+         * Whether to hide the numeric labels.
+         */
+        hideLabels?: true;
+    }) => string;
+    /**
+     * Opinion scale input params.
+     *
+     * @typedef {Object} OpinionScaleParamsType
+     * @property {number} [startAt] Starting number (`0` or `1`). Defaults to `0`.
+     * @property {number} [outOf] Maximum scale value (5-10). Defaults to `10`.
+     * @property {string} [labelStart] Label for the start of the scale.
+     * @property {string} [labelEnd] Label for the end of the scale.
+     * @property {true} [hideLabelStart] Whether to hide the start label.
+     * @property {true} [hideLabelEnd] Whether to hide the end label.
+     * @property {number} [value] Pre-selected value.
+     */
+    /**
+     * Create an opinion scale field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & OpinionScaleParamsType} params
+     * @returns {string}
+     */
+    opinionScale: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Starting number (`0` or `1`). Defaults to `0`.
+         */
+        startAt?: number;
+        /**
+         * Maximum scale value (5-10). Defaults to `10`.
+         */
+        outOf?: number;
+        /**
+         * Label for the start of the scale.
+         */
+        labelStart?: string;
+        /**
+         * Label for the end of the scale.
+         */
+        labelEnd?: string;
+        /**
+         * Whether to hide the start label.
+         */
+        hideLabelStart?: true;
+        /**
+         * Whether to hide the end label.
+         */
+        hideLabelEnd?: true;
+        /**
+         * Pre-selected value.
+         */
+        value?: number;
+    }) => string;
+    /**
+     * Datetime input params.
+     *
+     * @typedef {Object} DatetimeInputParamsType
+     * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
+     * @property {string} [min] Sets the minimum allowed datetime value (`"YYYY-MM-DDTHH:mm"`).
+     * @property {string} [max] Sets the maximum allowed datetime value (`"YYYY-MM-DDTHH:mm"`).
+     * @property {string} [step] Sets the stepping interval.
+     * @property {string} [value] Pre-selected datetime value (`"YYYY-MM-DDTHH:mm"`).
+     */
+    /**
+     * Create a datetime input field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & DatetimeInputParamsType} params
+     * @returns {string}
+     */
+    datetimeInput: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Sets the `placeholder` attribute of the input.
+         */
+        placeholder?: string;
+        /**
+         * Sets the minimum allowed datetime value (`"YYYY-MM-DDTHH:mm"`).
+         */
+        min?: string;
+        /**
+         * Sets the maximum allowed datetime value (`"YYYY-MM-DDTHH:mm"`).
+         */
+        max?: string;
+        /**
+         * Sets the stepping interval.
+         */
+        step?: string;
+        /**
+         * Pre-selected datetime value (`"YYYY-MM-DDTHH:mm"`).
+         */
+        value?: string;
+    }) => string;
+    /**
+     * Date input params.
+     *
+     * @typedef {Object} DateInputParamsType
+     * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
+     * @property {string} [min] Sets the minimum allowed date value (`"YYYY-MM-DD"`).
+     * @property {string} [max] Sets the maximum allowed date value (`"YYYY-MM-DD"`).
+     * @property {string} [step] Sets the stepping interval.
+     * @property {string} [value] Pre-selected date value (`"YYYY-MM-DD"`).
+     */
+    /**
+     * Create a date input field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & DateInputParamsType} params
+     * @returns {string}
+     */
+    dateInput: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Sets the `placeholder` attribute of the input.
+         */
+        placeholder?: string;
+        /**
+         * Sets the minimum allowed date value (`"YYYY-MM-DD"`).
+         */
+        min?: string;
+        /**
+         * Sets the maximum allowed date value (`"YYYY-MM-DD"`).
+         */
+        max?: string;
+        /**
+         * Sets the stepping interval.
+         */
+        step?: string;
+        /**
+         * Pre-selected date value (`"YYYY-MM-DD"`).
+         */
+        value?: string;
+    }) => string;
+    /**
+     * Time input params.
+     *
+     * @typedef {Object} TimeInputParamsType
+     * @property {string} [placeholder] Sets the `placeholder` attribute of the input.
+     * @property {string} [min] Sets the minimum allowed time value (`"HH:mm"`).
+     * @property {string} [max] Sets the maximum allowed time value (`"HH:mm"`).
+     * @property {string} [step] Sets the stepping interval.
+     * @property {string} [value] Pre-selected time value (`"HH:mm"`).
+     */
+    /**
+     * Create a time input field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & TimeInputParamsType} params
+     * @returns {string}
+     */
+    timeInput: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Sets the `placeholder` attribute of the input.
+         */
+        placeholder?: string;
+        /**
+         * Sets the minimum allowed time value (`"HH:mm"`).
+         */
+        min?: string;
+        /**
+         * Sets the maximum allowed time value (`"HH:mm"`).
+         */
+        max?: string;
+        /**
+         * Sets the stepping interval.
+         */
+        step?: string;
+        /**
+         * Pre-selected time value (`"HH:mm"`).
+         */
+        value?: string;
+    }) => string;
+    /**
+     * File input params.
+     *
+     * @typedef {Object} FileInputParamsType
+     * @property {number} [sizeLimit] Maximum file size in MB. Defaults to `10`.
+     * @property {true} [imageOnly] When set, only image files are accepted.
+     * @property {string} [currentFile] The current file that exists in the database. Use a URL for best results, for example, https://example.s3.com/image.png.
+     */
+    /**
+     * Create a file input field.
+     *
+     * @param {string} name
+     * @param {FormFieldSharedParamsType & FileInputParamsType} params
+     * @returns {string}
+     */
+    fileInput: (name: string, params: {
+        /**
+         * The main question of the form field.
+         */
+        question: string;
+        /**
+         * When set, the field becomes required.
+         */
+        required?: true;
+        /**
+         * Any extra information that the user may need to fill out the form.
+         */
+        description?: string;
+        /**
+         * When set to `"sm"`, the font sizes of the question, description, and answer are made smaller.
+         */
+        fieldSize?: "sm";
+        /**
+         * When set to `"classic"`, the question and description of the form field are made smaller.
+         */
+        labelStyle?: "classic";
+        /**
+         * When set, the question and description of the form field are made smaller.
+         */
+        subfield?: true;
+        /**
+         * When set, the input is disabled.
+         */
+        disabled?: true;
+        /**
+         * When set, the input will be automatically focused when the parent slide becomes active, or immediately after page load.
+         */
+        autofocus?: true;
+        /**
+         * The id attribute of the form field.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the form field.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the form field.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+        /**
+         * Display condition for the form field.
+         */
+        displayCondition?: {
+            /**
+             * The names of the form fields or data to use in the condition.
+             */
+            dependencies: Array<string>;
+            /**
+             * The actual condition.
+             */
+            condition: string;
+        };
+    } & {
+        /**
+         * Maximum file size in MB. Defaults to `10`.
+         */
+        sizeLimit?: number;
+        /**
+         * When set, only image files are accepted.
+         */
+        imageOnly?: true;
+        /**
+         * The current file that exists in the database. Use a URL for best results, for example, https://example.s3.com/image.png.
+         */
+        currentFile?: string;
+    }) => string;
+    /**
+     * Slide params.
+     *
+     * @typedef {Object} SlideParamsType
+     * @property {string} [jumpCondition] Logic jump condition that must be `true` for slide to be shown.
+     * @property {string} [pageProgress] Progress indicator shown on top (e.g. `"50%"` or `"1/2"`).
+     * @property {"start"|"center"|"end"|"stretch"} [buttonAlignment] Set the alignment of this slide's CTA button.
+     * @property {true} [post] If set, posts form data up to this slide when going to the next one.
+     * @property {true} [disablePrevious] If set, disables the previous button.
+     */
+    /**
+     * Create a slide.
+     *
+     * @param {SlideParamsType} [params]
+     * @returns {string}
+     */
+    slide: (params?: {
+        /**
+         * Logic jump condition that must be `true` for slide to be shown.
+         */
+        jumpCondition?: string;
+        /**
+         * Progress indicator shown on top (e.g. `"50%"` or `"1/2"`).
+         */
+        pageProgress?: string;
+        /**
+         * Set the alignment of this slide's CTA button.
+         */
+        buttonAlignment?: "start" | "center" | "end" | "stretch";
+        /**
+         * If set, posts form data up to this slide when going to the next one.
+         */
+        post?: true;
+        /**
+         * If set, disables the previous button.
+         */
+        disablePrevious?: true;
+    }) => string;
+    /**
+     * Start slide params.
+     *
+     * @typedef {Object} StartSlideParamsType
+     * @property {string} [buttonText] Custom text for the start button.
+     * @property {"start"|"center"|"end"|"stretch"} [buttonAlignment] Set the alignment of this slide's CTA button.
+     */
+    /**
+     * Create a start slide.
+     *
+     * @param {StartSlideParamsType} [params]
+     * @returns {string}
+     */
+    startSlide: (params?: {
+        /**
+         * Custom text for the start button.
+         */
+        buttonText?: string;
+        /**
+         * Set the alignment of this slide's CTA button.
+         */
+        buttonAlignment?: "start" | "center" | "end" | "stretch";
+    }) => string;
+    /**
+     * End slide params.
+     *
+     * @typedef {Object} EndSlideParamsType
+     * @property {string} [redirectUrl] URL to redirect to from the end slide.
+     */
+    /**
+     * Create an end slide.
+     *
+     * @param {EndSlideParamsType} [params]
+     * @returns {string}
+     */
+    endSlide: (params?: {
+        /**
+         * URL to redirect to from the end slide.
+         */
+        redirectUrl?: string;
+    }) => string;
+    /**
+     * Create a data-block.
+     *
+     * @param {Object} data
+     * @returns {string}
+     */
+    dataBlock: (data: any) => string;
+    /**
+     * Create free-form content.
+     *
+     * @param {string} content
+     * @returns {string}
+     */
+    free: (content: string) => string;
+    /**
+     * Block-level element params.
+     *
+     * @typedef {Object} BlockElemParamsType
+     * @property {string} [id] The id attribute of the element.
+     * @property {Array.<string>} [classNames] The CSS class names of the element.
+     * @property {Array.<HTMLAttributeType>} [attrs] Other HTML attributes of the element.
+     */
+    /**
+     * Create a paragraph.
+     *
+     * @param {string} content
+     * @param {BlockElemParamsType} [params]
+     * @returns {string}
+     */
+    p: (content: string, params?: {
+        /**
+         * The id attribute of the element.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the element.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the element.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+    }) => string;
+    /**
+     * Create a heading 1.
+     *
+     * @param {string} content
+     * @param {BlockElemParamsType} [params]
+     * @returns {string}
+     */
+    h1: (content: string, params?: {
+        /**
+         * The id attribute of the element.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the element.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the element.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+    }) => string;
+    /**
+     * Create a heading 2.
+     *
+     * @param {string} content
+     * @param {BlockElemParamsType} [params]
+     * @returns {string}
+     */
+    h2: (content: string, params?: {
+        /**
+         * The id attribute of the element.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the element.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the element.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+    }) => string;
+    /**
+     * Create a heading 3.
+     *
+     * @param {string} content
+     * @param {BlockElemParamsType} [params]
+     * @returns {string}
+     */
+    h3: (content: string, params?: {
+        /**
+         * The id attribute of the element.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the element.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the element.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+    }) => string;
+    /**
+     * Create a heading 4.
+     *
+     * @param {string} content
+     * @param {BlockElemParamsType} [params]
+     * @returns {string}
+     */
+    h4: (content: string, params?: {
+        /**
+         * The id attribute of the element.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the element.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the element.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+    }) => string;
+    /**
+     * Create a heading 5.
+     *
+     * @param {string} content
+     * @param {BlockElemParamsType} [params]
+     * @returns {string}
+     */
+    h5: (content: string, params?: {
+        /**
+         * The id attribute of the element.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the element.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the element.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+    }) => string;
+    /**
+     * Create a heading 6.
+     *
+     * @param {string} content
+     * @param {BlockElemParamsType} [params]
+     * @returns {string}
+     */
+    h6: (content: string, params?: {
+        /**
+         * The id attribute of the element.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the element.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the element.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+    }) => string;
+    /**
+     * Create an unordered list.
+     *
+     * @param {Array.<string>} items
+     * @param {BlockElemParamsType} [params]
+     * @returns {string}
+     */
+    ul: (items: Array<string>, params?: {
+        /**
+         * The id attribute of the element.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the element.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the element.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+    }) => string;
+    /**
+     * Create an ordered list.
+     *
+     * @param {Array.<string>} items
+     * @param {BlockElemParamsType} [params]
+     * @returns {string}
+     */
+    ol: (items: Array<string>, params?: {
+        /**
+         * The id attribute of the element.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the element.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the element.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+    }) => string;
+    /**
+     * Create a blockquote.
+     *
+     * @param {string} content
+     * @param {BlockElemParamsType} [params]
+     * @returns {string}
+     */
+    blockquote: (content: string, params?: {
+        /**
+         * The id attribute of the element.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the element.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the element.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+    }) => string;
+    /**
+     * Code params.
+     *
+     * @typedef {Object} CodeParamsType
+     * @property {string} [language] The language of the code.
+     */
+    /**
+     * Create a block-level code element.
+     *
+     * @param {string} content
+     * @param {BlockElemParamsType & CodeParamsType} [params]
+     * @returns {string}
+     */
+    code: (content: string, params?: {
+        /**
+         * The id attribute of the element.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the element.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the element.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+    } & {
+        /**
+         * The language of the code.
+         */
+        language?: string;
+    }) => string;
+    /**
+     * Create a horizontal rule.
+     *
+     * @returns {string}
+     */
+    hr: () => string;
+    /**
+     * Division params.
+     *
+     * @typedef {Object} DivParamsType
+     * @property {Array.<string>} [bind] The data to bind to the division, e.g., `["name", "email", "birthday"]`.
+     */
+    /**
+     * Create a division start tag.
+     *
+     * @param {BlockElemParamsType & DivParamsType} [params]
+     * @returns {string}
+     */
+    divStart: (params?: {
+        /**
+         * The id attribute of the element.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the element.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the element.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+    } & {
+        /**
+         * The data to bind to the division, e.g., `["name", "email", "birthday"]`.
+         */
+        bind?: Array<string>;
+    }) => string;
+    /**
+     * Create a division end tag.
+     *
+     * @returns {string}
+     */
+    divEnd: () => string;
+    /**
+     * Create a division.
+     *
+     * @param {string} content
+     * @param {BlockElemParamsType & DivParamsType} [params]
+     * @returns {string}
+     */
+    div: (content: string, params?: {
+        /**
+         * The id attribute of the element.
+         */
+        id?: string;
+        /**
+         * The CSS class names of the element.
+         */
+        classNames?: Array<string>;
+        /**
+         * Other HTML attributes of the element.
+         */
+        attrs?: Array<{
+            /**
+             * The name of the attribute.
+             */
+            name: string;
+            /**
+             * The value of the attribute.
+             */
+            value: string;
+        }>;
+    } & {
+        /**
+         * The data to bind to the division, e.g., `["name", "email", "birthday"]`.
+         */
+        bind?: Array<string>;
+    }) => string;
 }
-import { translations } from "./translations";
+import { translations } from "./translations.js";
diff --git a/types/data-blocks-parse.d.ts b/types/data-blocks-parse.d.ts
index d062c81..d53bc98 100644
--- a/types/data-blocks-parse.d.ts
+++ b/types/data-blocks-parse.d.ts
@@ -7,6 +7,6 @@
  * @returns {{template: string, data: Object}} rest of the template and data
  */
 export function parseDataBlocks(template: string): {
-	template: string;
-	data: any;
+    template: string;
+    data: any;
 };
diff --git a/types/div-span-parse.d.ts b/types/div-span-parse.d.ts
index 2f97b32..5b3fe4c 100644
--- a/types/div-span-parse.d.ts
+++ b/types/div-span-parse.d.ts
@@ -8,12 +8,9 @@
  * @returns {{template: string, bindDivTemplates: Object}} template with
  * parsed <div> elements, bind <div> templates
  */
-export function parseDivs(
-	template: string,
-	cssPrefix: string,
-): {
-	template: string;
-	bindDivTemplates: any;
+export function parseDivs(template: string, cssPrefix: string): {
+    template: string;
+    bindDivTemplates: any;
 };
 /**
  * Given a template string, parse the bind <span> elements, and return the
diff --git a/types/end-slide-template.d.ts b/types/end-slide-template.d.ts
index 3b05383..32acc5d 100644
--- a/types/end-slide-template.d.ts
+++ b/types/end-slide-template.d.ts
@@ -11,14 +11,11 @@
  * @param {string} localization - Localization setting
  * @returns {string} End slide HTML
  */
-export function createEndSlide(
-	config: {
-		title: string;
-		content: string;
-		buttonText: string;
-		alignment: string;
-		redirectUrl: string;
-		redirectDelay: number;
-	},
-	localization: string,
-): string;
+export function createEndSlide(config: {
+    title: string;
+    content: string;
+    buttonText: string;
+    alignment: string;
+    redirectUrl: string;
+    redirectDelay: number;
+}, localization: string): string;
diff --git a/types/form-field-create.d.ts b/types/form-field-create.d.ts
index 9c977de..32b6ee6 100644
--- a/types/form-field-create.d.ts
+++ b/types/form-field-create.d.ts
@@ -11,17 +11,10 @@ export const formFieldPattern: RegExp;
  * @returns {{startTag: string, validParams: Object, restParams: Object}}
  * start tag, validated params, rest of the params
  */
-export function formFieldSetup(
-	required: boolean,
-	parsedAttrs: string,
-	params: string,
-	formDelimiter: string,
-	localization: string,
-	useFieldset: boolean,
-): {
-	startTag: string;
-	validParams: any;
-	restParams: any;
+export function formFieldSetup(required: boolean, parsedAttrs: string, params: string, formDelimiter: string, localization: string, useFieldset: boolean): {
+    startTag: string;
+    validParams: any;
+    restParams: any;
 };
 /**
  * Create a text form field. Supported types are "text", "email", "url",
@@ -38,16 +31,7 @@ export function formFieldSetup(
  * @param {string} localization
  * @returns {string} text input form field as HTML string
  */
-export function createTextField(
-	name: string,
-	inputType: "text" | "email" | "url" | "tel" | "password",
-	required: boolean,
-	parsedAttrs: string,
-	params: string,
-	formDelimiter: string,
-	id: string,
-	localization: string,
-): string;
+export function createTextField(name: string, inputType: "text" | "email" | "url" | "tel" | "password", required: boolean, parsedAttrs: string, params: string, formDelimiter: string, id: string, localization: string): string;
 /**
  * Create a number form field.
  *
@@ -60,15 +44,7 @@ export function createTextField(
  * @param {string} localization
  * @returns {string} number input form field as HTML string
  */
-export function createNumberField(
-	name: string,
-	required: boolean,
-	parsedAttrs: string,
-	params: string,
-	formDelimiter: string,
-	id: string,
-	localization: string,
-): string;
+export function createNumberField(name: string, required: boolean, parsedAttrs: string, params: string, formDelimiter: string, id: string, localization: string): string;
 /**
  * Create a select form field.
  *
@@ -81,15 +57,7 @@ export function createNumberField(
  * @param {string} localization
  * @returns {string} select box form field as HTML string
  */
-export function createSelectField(
-	name: string,
-	required: boolean,
-	parsedAttrs: string,
-	params: string,
-	formDelimiter: string,
-	id: string,
-	localization: string,
-): string;
+export function createSelectField(name: string, required: boolean, parsedAttrs: string, params: string, formDelimiter: string, id: string, localization: string): string;
 /**
  * Create a choice form field.
  *
@@ -103,16 +71,7 @@ export function createSelectField(
  * @param {string} localization
  * @returns {string} choice input form field as HTML string
  */
-export function createChoiceField(
-	name: string,
-	isPictureChoice: boolean,
-	required: boolean,
-	parsedAttrs: string,
-	params: string,
-	formDelimiter: string,
-	id: string,
-	localization: string,
-): string;
+export function createChoiceField(name: string, isPictureChoice: boolean, required: boolean, parsedAttrs: string, params: string, formDelimiter: string, id: string, localization: string): string;
 /**
  * Create a rating form field.
  *
@@ -125,15 +84,7 @@ export function createChoiceField(
  * @param {string} localization
  * @returns {string} rating input form field as HTML string
  */
-export function createRatingField(
-	name: string,
-	required: boolean,
-	parsedAttrs: string,
-	params: string,
-	formDelimiter: string,
-	id: string,
-	localization: string,
-): string;
+export function createRatingField(name: string, required: boolean, parsedAttrs: string, params: string, formDelimiter: string, id: string, localization: string): string;
 /**
  * Create an opinion scale form field.
  *
@@ -146,15 +97,7 @@ export function createRatingField(
  * @param {string} localization
  * @returns {string} opinion scale form field as HTML string
  */
-export function createOpinionScaleField(
-	name: string,
-	required: boolean,
-	parsedAttrs: string,
-	params: string,
-	formDelimiter: string,
-	id: string,
-	localization: string,
-): string;
+export function createOpinionScaleField(name: string, required: boolean, parsedAttrs: string, params: string, formDelimiter: string, id: string, localization: string): string;
 /**
  * Create a datetime, date, or time form field.
  *
@@ -168,16 +111,7 @@ export function createOpinionScaleField(
  * @param {string} localization
  * @returns {string} datetime, date, or time input form field as HTML string
  */
-export function createDatetimeField(
-	name: string,
-	inputType: "datetime" | "date" | "time",
-	required: boolean,
-	parsedAttrs: string,
-	params: string,
-	formDelimiter: string,
-	id: string,
-	localization: string,
-): string;
+export function createDatetimeField(name: string, inputType: "datetime" | "date" | "time", required: boolean, parsedAttrs: string, params: string, formDelimiter: string, id: string, localization: string): string;
 /**
  * Create a file form field.
  *
@@ -190,12 +124,4 @@ export function createDatetimeField(
  * @param {string} localization
  * @returns {string} file input form field as HTML string
  */
-export function createFileField(
-	name: string,
-	required: boolean,
-	parsedAttrs: string,
-	params: string,
-	formDelimiter: string,
-	id: string,
-	localization: string,
-): string;
+export function createFileField(name: string, required: boolean, parsedAttrs: string, params: string, formDelimiter: string, id: string, localization: string): string;
diff --git a/types/helpers.d.ts b/types/helpers.d.ts
index ac00722..3402692 100644
--- a/types/helpers.d.ts
+++ b/types/helpers.d.ts
@@ -5,6 +5,5 @@
  * @returns {boolean}
  */
 export function isNumeric(str: string): boolean;
-export function escape$1(html: any, encode: any): any;
 export function cleanUrl(href: any): any;
 export function unescape(string: any): any;
diff --git a/types/index.d.ts b/types/index.d.ts
index 2cf5163..09b28f7 100644
--- a/types/index.d.ts
+++ b/types/index.d.ts
@@ -1,4 +1,4 @@
-import { translate } from "./composer";
-import { Composer } from "./composer";
-import { Formsmd } from "./main";
+import { translate } from "./composer.js";
+import { Composer } from "./composer.js";
+import { Formsmd } from "./main.js";
 export { translate, Composer, Formsmd };
diff --git a/types/main.d.ts b/types/main.d.ts
index 7e9c74c..7f6db8a 100644
--- a/types/main.d.ts
+++ b/types/main.d.ts
@@ -1,941 +1,870 @@
 export class Formsmd {
-	/**
-	 * Google reCAPTCHA attributes.
-	 *
-	 * @typedef {Object} RecaptchaType
-	 * @property {string} [siteKey] Google reCAPTCHA site key.
-	 * @property {string} [action] The action name. Default is `"submit"`.
-	 * @property {"bottomleft"|"bottomright"|"inline"} [badgePosition] The position of the reCAPTCHA badge. Default is `"bottomleft"`.
-	 * @property {boolean} [hideBadge] Whether to hide the reCAPTCHA badge. Default is `false`.
-	 */
-	/**
-	 * Theme for the page or form.
-	 *
-	 * @typedef {Object} ThemeType
-	 * @property {string} [accent] The primary color (must be HTML name, hex code, or RGB) used on buttons, form fields, etc.
-	 * @property {string} [accentForeground] The text color (must be HTML name, hex code, or RGB) used on `accent` background, for example, the text on buttons.
-	 * @property {string} [backgroundColor] The `background-color` of the page (must be HTML name, hex code, or RGB).
-	 * @property {string} [color] The `color` of the text on the page (must be HTML name, hex code, or RGB).
-	 */
-	/**
-	 * Options for the page or form.
-	 *
-	 * @typedef {Object} OptionsType
-	 * @property {"light"|"dark"} [colorScheme] The default or initial color scheme of the page. Default is `"light"`.
-	 * @property {string} [errorFieldKey] The key used to identify the field in error objects. Default is `"field"`.
-	 * @property {string} [errorMessageKey] The key used to identify the error message in error objects. Default is `"message"`.
-	 * @property {"hide"|"show"} [footer] Controls visibility of the footer.
-	 * @property {"hide"|"show"} [formsmdBranding] Controls visibility of the Forms.md branding.
-	 * @property {Object} [getHeaders] Headers for GET requests.
-	 * @property {boolean} [isFullPage] Whether to render in full page mode. Default is `false`.
-	 * @property {number} [paddingInlineBottom] Padding bottom for inline pages or forms. Default is `20`.
-	 * @property {number} [paddingInlineHorizontal] Horizontal padding for inline pages or forms. Default is `0`.
-	 * @property {number} [paddingInlineTop] Padding top for inline pages or forms. Default is `20`.
-	 * @property {"hide"|"show"|"decorative"} [pageProgress] Controls visibility and function of the page progress.
-	 * @property {Object} [postData] Extra data sent with POST requests.
-	 * @property {Object} [postHeaders] Headers for POST requests.
-	 * @property {boolean} [prioritizeURLFormData] Whether to prioritize URL form data. Default is `false`.
-	 * @property {RecaptchaType} [recaptcha] The Google reCAPTCHA attributes.
-	 * @property {boolean} [sanitize] Whether to sanitize template. Default is `true`.
-	 * @property {boolean} [saveState] Whether to save form data in local storage. Default is `true`.
-	 * @property {boolean} [sendFilesAsBase64] Whether to send files as base64. Default is `false`.
-	 * @property {boolean} [setColorSchemeAttrsAgain] Whether to set color scheme attributes again.
-	 * @property {"hide"|"show"} [slideControls] Controls visibility of next and previous buttons.
-	 * @property {number} [startSlide] The index of the first slide to make active. Default is `0`.
-	 * @property {ThemeType} [themeDark] Dark theme.
-	 * @property {ThemeType} [themeLight] Light theme.
-	 */
-	/**
-	 * Create an instance of the class.
-	 *
-	 * @param {string} template
-	 * @param {Document|HTMLElement|Element} container
-	 * @param {OptionsType} options
-	 */
-	constructor(
-		template: string,
-		container: Document | HTMLElement | Element,
-		options: {
-			/**
-			 * The default or initial color scheme of the page. Default is `"light"`.
-			 */
-			colorScheme?: "light" | "dark";
-			/**
-			 * The key used to identify the field in error objects. Default is `"field"`.
-			 */
-			errorFieldKey?: string;
-			/**
-			 * The key used to identify the error message in error objects. Default is `"message"`.
-			 */
-			errorMessageKey?: string;
-			/**
-			 * Controls visibility of the footer.
-			 */
-			footer?: "hide" | "show";
-			/**
-			 * Controls visibility of the Forms.md branding.
-			 */
-			formsmdBranding?: "hide" | "show";
-			/**
-			 * Headers for GET requests.
-			 */
-			getHeaders?: any;
-			/**
-			 * Whether to render in full page mode. Default is `false`.
-			 */
-			isFullPage?: boolean;
-			/**
-			 * Padding bottom for inline pages or forms. Default is `20`.
-			 */
-			paddingInlineBottom?: number;
-			/**
-			 * Horizontal padding for inline pages or forms. Default is `0`.
-			 */
-			paddingInlineHorizontal?: number;
-			/**
-			 * Padding top for inline pages or forms. Default is `20`.
-			 */
-			paddingInlineTop?: number;
-			/**
-			 * Controls visibility and function of the page progress.
-			 */
-			pageProgress?: "hide" | "show" | "decorative";
-			/**
-			 * Extra data sent with POST requests.
-			 */
-			postData?: any;
-			/**
-			 * Headers for POST requests.
-			 */
-			postHeaders?: any;
-			/**
-			 * Whether to prioritize URL form data. Default is `false`.
-			 */
-			prioritizeURLFormData?: boolean;
-			/**
-			 * The Google reCAPTCHA attributes.
-			 */
-			recaptcha?: {
-				/**
-				 * Google reCAPTCHA site key.
-				 */
-				siteKey?: string;
-				/**
-				 * The action name. Default is `"submit"`.
-				 */
-				action?: string;
-				/**
-				 * The position of the reCAPTCHA badge. Default is `"bottomleft"`.
-				 */
-				badgePosition?: "bottomleft" | "bottomright" | "inline";
-				/**
-				 * Whether to hide the reCAPTCHA badge. Default is `false`.
-				 */
-				hideBadge?: boolean;
-			};
-			/**
-			 * Whether to sanitize template. Default is `true`.
-			 */
-			sanitize?: boolean;
-			/**
-			 * Whether to save form data in local storage. Default is `true`.
-			 */
-			saveState?: boolean;
-			/**
-			 * Whether to send files as base64. Default is `false`.
-			 */
-			sendFilesAsBase64?: boolean;
-			/**
-			 * Whether to set color scheme attributes again.
-			 */
-			setColorSchemeAttrsAgain?: boolean;
-			/**
-			 * Controls visibility of next and previous buttons.
-			 */
-			slideControls?: "hide" | "show";
-			/**
-			 * The index of the first slide to make active. Default is `0`.
-			 */
-			startSlide?: number;
-			/**
-			 * Dark theme.
-			 */
-			themeDark?: {
-				/**
-				 * The primary color (must be HTML name, hex code, or RGB) used on buttons, form fields, etc.
-				 */
-				accent?: string;
-				/**
-				 * The text color (must be HTML name, hex code, or RGB) used on `accent` background, for example, the text on buttons.
-				 */
-				accentForeground?: string;
-				/**
-				 * The `background-color` of the page (must be HTML name, hex code, or RGB).
-				 */
-				backgroundColor?: string;
-				/**
-				 * The `color` of the text on the page (must be HTML name, hex code, or RGB).
-				 */
-				color?: string;
-			};
-			/**
-			 * Light theme.
-			 */
-			themeLight?: {
-				/**
-				 * The primary color (must be HTML name, hex code, or RGB) used on buttons, form fields, etc.
-				 */
-				accent?: string;
-				/**
-				 * The text color (must be HTML name, hex code, or RGB) used on `accent` background, for example, the text on buttons.
-				 */
-				accentForeground?: string;
-				/**
-				 * The `background-color` of the page (must be HTML name, hex code, or RGB).
-				 */
-				backgroundColor?: string;
-				/**
-				 * The `color` of the text on the page (must be HTML name, hex code, or RGB).
-				 */
-				color?: string;
-			};
-		},
-	);
-	options: {
-		colorScheme: string;
-		errorFieldKey: string;
-		errorMessageKey: string;
-		footer: string;
-		formsmdBranding: string;
-		getHeaders: {};
-		isFullPage: boolean;
-		paddingInlineBottom: number;
-		paddingInlineHorizontal: number;
-		paddingInlineTop: number;
-		pageProgress: string;
-		postData: {};
-		postHeaders: {};
-		prioritizeURLFormData: boolean;
-		recaptcha: {
-			siteKey: string;
-			action: string;
-			badgePosition: string;
-			hideBadge: boolean;
-		};
-		sanitize: boolean;
-		saveState: boolean;
-		sendFilesAsBase64: boolean;
-		setColorSchemeAttrsAgain: boolean;
-		slideControls: string;
-		startSlide: number;
-		themeDark: {
-			accent: string;
-			accentForeground: string;
-			backgroundColor: string;
-			color: string;
-		};
-		themeLight: {
-			accent: string;
-			accentForeground: string;
-			backgroundColor: string;
-			color: string;
-		};
-	};
-	container: Element | Document | HTMLElement;
-	_template: string;
-	/**
-	 * Set the state to defaults.
-	 */
-	setStateToDefaults: () => void;
-	state: {
-		bindDivTemplates: {};
-		data: {};
-		fieldTypes: {};
-		formData: {};
-		settings: any;
-		slideData: {
-			currentIndex: number;
-			slideDefinitions: any[];
-			endSlideDefinition: string;
-			availableSlides: number;
-		};
-		lifecycle: {
-			questionCache: Map<any, any>;
-			questionPath: any[];
-			userResponses: Map<any, any>;
-			currentQuestionIndex: number;
-			currentQuestion: any;
-			currentSlideType: string;
-		};
-		surveyConfig: {
-			welcomeScreen: any;
-			endScreen: any;
-		};
-	};
-	/**
-	 * Add a single attribute value to an HTML element.
-	 *
-	 * @param {HTMLElement} elem
-	 * @param {string} name
-	 * @param {string} value
-	 */
-	setSingleAttribute: (elem: HTMLElement, name: string, value: string) => void;
-	/**
-	 * Remove a single attribute value from an HTML element.
-	 *
-	 * @param {HTMLElement} elem
-	 * @param {string} name
-	 * @param {string} value
-	 */
-	removeSingleAttribute: (
-		elem: HTMLElement,
-		name: string,
-		value: string,
-	) => void;
-	/**
-	 * Get the prefix for the page/form id.
-	 *
-	 * @returns {string}
-	 */
-	getIdPrefix: () => string;
-	/**
-	 * Set the preferred color scheme (if one is found in the local storage).
-	 * Depending on the preference from settings, either the domain-wide or the
-	 * page-specific value is used.
-	 */
-	setPreferredColorScheme: () => void;
-	/**
-	 * Toggle color scheme. If the preferred color scheme (from settings) is set
-	 * to "isolate", the preference is saved (and used) only for that page.
-	 * Otherwise, it is saved (and used) domain-wide.
-	 *
-	 * @param {MouseEvent} e
-	 */
-	toggleColorScheme: (e: MouseEvent) => void;
-	/**
-	 * Create a random 32 characters id separated by dashes.
-	 *
-	 * @returns {string}
-	 */
-	createRandomId: () => string;
-	/**
-	 * Get or create response id. This uniquely identifies one single form
-	 * response. The id is created on initialization (unless one already
-	 * exists), and it is removed when the user reaches the end slide.
-	 *
-	 * @returns {string}
-	 */
-	getOrCreateResponseId: () => string;
-	/**
-	 * Remove response id. This is called when the user reaches the end slide.
-	 */
-	removeResponseId: () => void;
-	/**
-	 * Save form field value in local storage.
-	 *
-	 * @param {string} name
-	 * @param {*} value
-	 */
-	saveFieldValue: (name: string, value: any) => void;
-	/**
-	 * Remove form data from local storage. This is called when the user reaches
-	 * the end slide.
-	 */
-	removeSavedFormData: () => void;
-	/**
-	 * Re-render the bind <div> and <span> elements.
-	 *
-	 * @param {string} name
-	 */
-	reRenderBindElems: (name: string) => void;
-	/**
-	 * Get value of a set of radio buttons or checkboxes.
-	 *
-	 * @param {string} name
-	 * @param {string} inputClass
-	 * @param {"radio"|"checkbox"} type
-	 * @returns {string|Array.<string>}
-	 */
-	getRadioCheckboxValue: (
-		name: string,
-		inputClass: string,
-		type: "radio" | "checkbox",
-	) => string | Array<string>;
-	/**
-	 * Set value of a set of radio buttons or checkboxes.
-	 *
-	 * @param {string} name
-	 * @param {string} inputClass
-	 * @param {"radio"|"checkbox"} type
-	 * @param {string|Array.<string>} value
-	 */
-	setRadioCheckboxValue: (
-		name: string,
-		inputClass: string,
-		type: "radio" | "checkbox",
-		value: string | Array<string>,
-	) => void;
-	/**
-	 * Given a country calling code <select>, update placeholder of the
-	 * corresponding telephone input using the selected <option>.
-	 *
-	 * @param {HTMLSelectElement} countryCodeSelect
-	 */
-	setTelInputPlaceholder: (countryCodeSelect: HTMLSelectElement) => void;
-	/**
-	 * Set form data to state (value and type). Also re-render the bind <div>
-	 * and <span> elements.
-	 */
-	setFormDataToState: () => void;
-	/**
-	 * Set form data from URL parameters: set value in the DOM, update state,
-	 * conditionally update local storage, and re-render the bind <div> and
-	 * <span> elements. The local storage is updated if this function is called
-	 * AFTER setting the saved form data (in local storage).
-	 *
-	 * @param {boolean} updateLocalStorage
-	 */
-	setFormDataFromURL: (updateLocalStorage: boolean) => void;
-	/**
-	 * Set form data saved in local storage: set value in the DOM, update state,
-	 * and re-render the bind <div> and <span> elements.
-	 */
-	setSavedFormData: () => void;
-	/**
-	 * Given a form field element, remove all errors (and everything related).
-	 *
-	 * @param {HTMLElement} formField
-	 */
-	removeFieldErrors: (formField: HTMLElement) => void;
-	/**
-	 * Handle the inputs of text form fields: update value in the state, save
-	 * value in local storage, remove errors and re-render the bind <div> and
-	 * <span> elements.
-	 *
-	 * @param {InputEvent} e
-	 */
-	textFieldOnInput: (e: InputEvent) => void;
-	/**
-	 * Handle the inputs of number form fields: update value in the state, save
-	 * value in local storage, remove errors and re-render the bind <div> and
-	 * <span> elements.
-	 *
-	 * @param {InputEvent} e
-	 */
-	numberFieldOnInput: (e: InputEvent) => void;
-	/**
-	 * Handle the inputs of select form fields: update value in the state, save
-	 * value in local storage, remove errors and re-render the bind <div> and
-	 * <span> elements. If the select box is a country calling code select, then
-	 * also update the placeholder of the corresponding telephone input.
-	 *
-	 * @param {InputEvent} e
-	 */
-	selectFieldOnInput: (e: InputEvent) => void;
-	/**
-	 * Handle the inputs of choice form fields: update value in the state, save
-	 * value in local storage, remove errors and re-render the bind <div> and
-	 * <span> elements.
-	 *
-	 * @param {InputEvent} e
-	 */
-	choiceFieldOnInput: (e: InputEvent) => void;
-	/**
-	 * Handle the inputs of number choice form fields: update value in the
-	 * state, save value in local storage, remove errors and re-render the bind
-	 * <div> and <span> elements.
-	 *
-	 * @param {InputEvent} e
-	 */
-	numChoiceFieldOnInput: (e: InputEvent) => void;
-	/**
-	 * Handle the inputs of datetime form fields: update value in the state,
-	 * save value in local storage, remove errors and re-render the bind <div>
-	 * and <span> elements.
-	 *
-	 * @param {InputEvent} e
-	 */
-	datetimeFieldOnInput: (e: InputEvent) => void;
-	/**
-	 * Handle the inputs of file form fields: reset and update the wrapping
-	 * <label> depending on the file chosen.
-	 *
-	 * @param {InputEvent} e
-	 */
-	fileFieldOnInput: (e: InputEvent) => void;
-	/**
-	 * Set the height of a <textarea> element.
-	 *
-	 * @param {HTMLTextAreaElement} textarea
-	 */
-	setTextareaHeight: (textarea: HTMLTextAreaElement) => void;
-	/**
-	 * Set the height of a <textarea> element on input.
-	 *
-	 * @param {InputEvent} e
-	 */
-	setTextareaHeightOnInput: (e: InputEvent) => void;
-	/**
-	 * Reset file input when the corresponding reset button is clicked.
-	 *
-	 * @param {MouseEvent} e
-	 */
-	fileInputResetBtnOnClick: (e: MouseEvent) => void;
-	/**
-	 * Given a <button> element, set it to the processing state.
-	 *
-	 * @param {HTMLButtonElement} btn
-	 */
-	setBtnProcessing: (btn: HTMLButtonElement) => void;
-	/**
-	 * Given a <button> element, remove its processing state.
-	 *
-	 * @param {HTMLButtonElement} btn
-	 */
-	removeBtnProcessing: (btn: HTMLButtonElement) => void;
-	/**
-	 * Given a slide element, remove all errors (and everything related).
-	 *
-	 * @param {HTMLElement} slide
-	 */
-	removeSlideErrors: (slide: HTMLElement) => void;
-	/**
-	 * Add an error inside the given form field element.
-	 *
-	 * @param {HTMLElement} formField
-	 * @param {string} errorId
-	 * @param {string} message
-	 */
-	addFieldError: (
-		formField: HTMLElement,
-		errorId: string,
-		message: string,
-	) => void;
-	/**
-	 * Given a <form> element, validate and add errors if necessary. By default,
-	 * most form fields rely entirely on built-in client-side validation that is
-	 * found in browsers.
-	 *
-	 * @param {HTMLFormElement} form
-	 * @returns {boolean} form is valid or not
-	 */
-	formValid: (form: HTMLFormElement) => boolean;
-	/**
-	 * When an error occurs during form submission or slide transition, add an
-	 * error inside the slide element that contains the messages (if any).
-	 *
-	 * @param {HTMLElement} slide
-	 * @param {HTMLButtonElement} ctaBtn
-	 * @param {Array.<string>} messages
-	 */
-	addSlideError: (
-		slide: HTMLElement,
-		ctaBtn: HTMLButtonElement,
-		messages: Array<string>,
-	) => void;
-	/**
-	 * GET data from remote source. A remote source here is anything outside of
-	 * the actual template.
-	 *
-	 * @returns {Promise<string>}
-	 */
-	getRemoteData: () => Promise<string>;
-	/**
-	 * Convert timezone offset (in minutes) to the +HH:mm or -HH:mm format.
-	 *
-	 * @param {number} minutes
-	 * @returns {String}
-	 */
-	convertTimezoneOffset: (minutes: number) => string;
-	/**
-	 * Execute Google reCAPTCHA v3 validation.
-	 *
-	 * @returns {Promise<string>} The Google reCAPTCHA token
-	 */
-	executeRecaptcha: () => Promise<string>;
-	/**
-	 * Convert a file to base64
-	 *
-	 * @param {File} file
-	 * @returns {Promise<string>}
-	 */
-	fileToBase64: (file: File) => Promise<string>;
-	/**
-	 * POST form data.
-	 *
-	 * @param {boolean} postCondition
-	 * @param {boolean} end
-	 * @returns {Promise<{ok: boolean, json: Object}>}
-	 */
-	postFormData: (
-		postCondition: boolean,
-		end: boolean,
-	) => Promise<{
-		ok: boolean;
-		json: any;
-	}>;
-	/**
-	 * Go through each slide (before the current one) to get the previous one to
-	 * make active (depending on the jump condition).
-	 *
-	 * @returns {{slide: HTMLElement, index: number}} the previous slide and its
-	 * index
-	 */
-	getPrevSlide: () => {
-		slide: HTMLElement;
-		index: number;
-	};
-	/**
-	 * Get survey settings and theme from API
-	 *
-	 * @returns {Promise<Object>} survey data
-	 */
-	getSurveyFromAPI: () => Promise<any>;
-	/**
-	 * Get the next question from the API
-	 *
-	 * @param {Object} currentResponse - Current question response data
-	 * @returns {Promise<{question: Object, isEndSlide: boolean}>} the next question data
-	 */
-	getNextQuestionFromAPI: (currentResponse?: any) => Promise<{
-		question: any;
-		isEndSlide: boolean;
-	}>;
-	/**
-	 * Initialize the form from API data
-	 */
-	initializeFromAPI: () => Promise<void>;
-	/**
-	 * Initialize the form with API configuration
-	 */
-	initializeWithApiConfig: (config: any) => void;
-	template: string;
-	/**
-	 * Initialize FormsMD with configuration
-	 */
-	initWithConfig: (config: any) => void;
-	/**
-	 * Apply survey theme and settings
-	 *
-	 * @param {Object} surveyData - Survey data from API
-	 */
-	applySurveyTheme: (surveyData: any) => void;
-	/**
-	 * Get current form data for API submission using questionId-based approach
-	 *
-	 * @param {HTMLElement} activeSlide - The current active slide
-	 * @param {Object} originalQuestion - The original question object from API
-	 * @returns {Object} Form data with questionId, value, and timeSpent
-	 */
-	getCurrentFormData: (activeSlide: HTMLElement, originalQuestion?: any) => any;
-	/**
-	 * Get question type from DOM if not provided in original question
-	 *
-	 * @param {HTMLElement} activeSlide - The current active slide
-	 * @param {string} questionId - The question ID
-	 * @returns {string} Question type
-	 */
-	getQuestionTypeFromDOM: (
-		activeSlide: HTMLElement,
-		questionId: string,
-	) => string;
-	/**
-	 * Extract value based on question type using questionId
-	 *
-	 * @param {HTMLElement} activeSlide - The current active slide
-	 * @param {string} questionId - The question ID
-	 * @param {string} questionType - The question type
-	 * @param {Object} questionConfig - Question configuration (options, etc.)
-	 * @returns {string|number|Array} Extracted value
-	 */
-	extractValueByQuestionType: (
-		activeSlide: HTMLElement,
-		questionId: string,
-		questionType: string,
-		questionConfig: any,
-	) => string | number | any[];
-	/**
-	 * Extract value from choice input (radio/checkbox)
-	 *
-	 * @param {HTMLElement} activeSlide - The current active slide
-	 * @param {string} questionId - The question ID
-	 * @param {Object} questionConfig - Question configuration
-	 * @returns {string|Array} Extracted value
-	 */
-	extractChoiceInputValue: (
-		activeSlide: HTMLElement,
-		questionId: string,
-		questionConfig: any,
-	) => string | any[];
-	/**
-	 * Extract value from text input
-	 *
-	 * @param {HTMLElement} activeSlide - The current active slide
-	 * @param {string} questionId - The question ID
-	 * @returns {string} Extracted value
-	 */
-	extractTextInputValue: (
-		activeSlide: HTMLElement,
-		questionId: string,
-	) => string;
-	/**
-	 * Extract value from number input
-	 *
-	 * @param {HTMLElement} activeSlide - The current active slide
-	 * @param {string} questionId - The question ID
-	 * @returns {number|null} Extracted value
-	 */
-	extractNumberInputValue: (
-		activeSlide: HTMLElement,
-		questionId: string,
-	) => number | null;
-	/**
-	 * Extract value from rating input
-	 *
-	 * @param {HTMLElement} activeSlide - The current active slide
-	 * @param {string} questionId - The question ID
-	 * @returns {number|null} Extracted value
-	 */
-	extractRatingInputValue: (
-		activeSlide: HTMLElement,
-		questionId: string,
-	) => number | null;
-	/**
-	 * Extract value from datetime input
-	 *
-	 * @param {HTMLElement} activeSlide - The current active slide
-	 * @param {string} questionId - The question ID
-	 * @returns {string} Extracted value
-	 */
-	extractDateTimeInputValue: (
-		activeSlide: HTMLElement,
-		questionId: string,
-	) => string;
-	/**
-	 * Extract value from file input
-	 *
-	 * @param {HTMLElement} activeSlide - The current active slide
-	 * @param {string} questionId - The question ID
-	 * @returns {string} Extracted value
-	 */
-	extractFileInputValue: (
-		activeSlide: HTMLElement,
-		questionId: string,
-	) => string;
-	/**
-	 * Set up the basic DOM structure for API-driven mode
-	 */
-	setupApiDrivenStructure: () => void;
-	/**
-	 * Set up the basic form structure
-	 */
-	setupFormStructure: () => void;
-	/**
-	 * Convert API question to slide definition format
-	 *
-	 * @param {Object} question - The question object from API
-	 * @returns {string} slide definition in markdown format
-	 */
-	convertAPIQuestionToSlideDefinition: (question: any) => string;
-	/**
-	 * Create the next slide from its definition and insert it into the DOM
-	 *
-	 * @param {string} slideDefinition
-	 * @param {boolean} isEndSlide
-	 * @returns {HTMLElement} the created slide element
-	 */
-	createNextSlide: (
-		slideDefinition: string,
-		isEndSlide: boolean,
-	) => HTMLElement;
-	/**
-	 * Lifecycle Manager - Create question with caching
-	 */
-	createQuestionLifecycle: (
-		questionData: any,
-		slideDefinition: any,
-		isEndSlide?: boolean,
-		slideType?: string,
-	) => Element;
-	/**
-	 * Lifecycle Manager - Destroy question and cache it
-	 */
-	destroyQuestionLifecycle: (slideElement: any) => void;
-	/**
-	 * Get the currently active slide
-	 */
-	getActiveSlide: () => Element;
-	/**
-	 * Reset button processing state - ensures all buttons are enabled and functional
-	 */
-	resetButtonProcessingState: () => void;
-	/**
-	 * Show a slide (make it active)
-	 */
-	showSlide: (slideElement: any) => void;
-	/**
-	 * Navigation Manager - Navigate to specific question
-	 */
-	navigateToQuestion: (targetIndex: any) => Promise<void>;
-	/**
-	 * Restore user response to a slide
-	 */
-	restoreUserResponse: (slideElement: any, response: any) => void;
-	/**
-	 * Handle answer changes and branching
-	 */
-	handleAnswerChange: (questionId: any, newResponse: any) => Promise<void>;
-	/**
-	 * Enhanced back navigation
-	 */
-	handleBackNavigation: () => void;
-	/**
-	 * Enhanced forward navigation
-	 */
-	handleForwardNavigation: () => void;
-	/**
-	 * Render welcome slide
-	 */
-	renderWelcomeSlide: (question: any, config: any) => string;
-	/**
-	 * Render end slide
-	 */
-	renderEndSlide: (question: any, config: any) => any;
-	/**
-	 * Render content slide (generic)
-	 */
-	renderContentSlide: (slideType: any, question: any, config: any) => any;
-	/**
-	 * Handle end screen navigation
-	 */
-	handleEndNavigation: () => void;
-	/**
-	 * Create content slide from HTML
-	 */
-	createContentSlide: (slideHtml: any) => Element;
-	/**
-	 * Process slide content (markdown parsing, highlighting, etc.)
-	 *
-	 * @param {HTMLElement} slideElement
-	 */
-	processSlideContent: (slideElement: HTMLElement) => void;
-	/**
-	 * Get the CSS slide transition duration (in milliseconds).
-	 *
-	 * @returns {number}
-	 */
-	getSlideTransitionDuration: () => number;
-	/**
-	 * When a new slide becomes active, do the following: update state, handle
-	 * page progress (if applicable), handle the display and state of the footer
-	 * slide control buttons, scroll to top and autofocus (if applicable).
-	 *
-	 * @param {HTMLElement} slide
-	 * @param {number} index
-	 * @param {boolean} fromInit
-	 */
-	hasNewActiveSlide: (
-		slide: HTMLElement,
-		index: number,
-		fromInit: boolean,
-	) => void;
-	/**
-	 * Fade out active slide and fade in next slide. The timeouts make sure that
-	 * the animations work properly.
-	 *
-	 * @param {HTMLElement} activeSlide
-	 * @param {HTMLElement} nextSlide
-	 */
-	fadeInNextSlide: (activeSlide: HTMLElement, nextSlide: HTMLElement) => void;
-	/**
-	 * Fade out active slide and fade in previous slide. The timeouts make sure
-	 * that the animations work properly.
-	 *
-	 * @param {HTMLElement} activeSlide
-	 * @param {HTMLElement} prevSlide
-	 */
-	fadeInPrevSlide: (activeSlide: HTMLElement, prevSlide: HTMLElement) => void;
-	/**
-	 * Disable all clicks. This is added when the slide transition starts, and
-	 * removed after the slide transition has ended (or if there is an error).
-	 *
-	 * @param {MouseEvent} e
-	 */
-	disableAllClicks: (e: MouseEvent) => boolean;
-	/**
-	 * Get error messages from the JSON response received during form submission.
-	 * By default, it is assumed that the errors in the response will use the
-	 * OpenAPI format. However, this function can be overridden to make sure
-	 * other formats are supported.
-	 *
-	 * @param {Object} json
-	 * @returns {Array.<string>}
-	 */
-	getSubmissionErrors: (json: any) => Array<string>;
-	/**
-	 * Called when the user reaches the end slide. This function can be
-	 * overridden to do something when the user reaches completion.
-	 *
-	 * @param {Object} json
-	 */
-	onCompletion: (json: any) => void;
-	/**
-	 * Go to the next slide.
-	 *
-	 * @param {HTMLElement} activeSlide
-	 */
-	nextSlide: (activeSlide: HTMLElement) => void;
-	/**
-	 * Handle successful next slide creation
-	 *
-	 * @param {HTMLElement} activeSlide
-	 * @param {HTMLElement} nextSlide
-	 * @param {Object} nextSlideData
-	 */
-	handleNextSlideSuccess: (
-		activeSlide: HTMLElement,
-		nextSlide: HTMLElement,
-		nextSlideData: any,
-	) => void;
-	/**
-	 * Go to the previous slide using lifecycle management.
-	 *
-	 * @param {HTMLElement} activeSlide
-	 */
-	prevSlide: (activeSlide: HTMLElement) => void;
-	/**
-	 * Copy code to clipboard. The code block (<pre> element) closest to the
-	 * copy button is the target.
-	 *
-	 * @param {MouseEvent} e
-	 */
-	copyCode: (e: MouseEvent) => void;
-	/**
-	 * Add all the event listeners.
-	 *
-	 * @param {HTMLElement} container
-	 * @param {boolean} fromInit
-	 */
-	addEventListeners: (container: HTMLElement, fromInit: boolean) => void;
-	/**
-	 * Load the Google reCAPTCHA v3 script asynchronously.
-	 */
-	loadRecaptchaScript: () => void;
-	/**
-	 * Initialize settings, set data defined in the template, fetch and set data
-	 * from remote source, and create the templates.
-	 *
-	 * @param {boolean} isFirstInit
-	 */
-	_init: (isFirstInit: boolean) => void;
-	/**
-	 * Initialize for the first time.
-	 */
-	init: () => void;
-	/**
-	 * Process question response and create the next slide
-	 *
-	 * @param {Object} questionData - The question data from API
-	 */
-	processQuestionResponse: (questionData: any) => void;
+    /**
+     * Google reCAPTCHA attributes.
+     *
+     * @typedef {Object} RecaptchaType
+     * @property {string} [siteKey] Google reCAPTCHA site key.
+     * @property {string} [action] The action name. Default is `"submit"`.
+     * @property {"bottomleft"|"bottomright"|"inline"} [badgePosition] The position of the reCAPTCHA badge. Default is `"bottomleft"`.
+     * @property {boolean} [hideBadge] Whether to hide the reCAPTCHA badge. Default is `false`.
+     */
+    /**
+     * Theme for the page or form.
+     *
+     * @typedef {Object} ThemeType
+     * @property {string} [accent] The primary color (must be HTML name, hex code, or RGB) used on buttons, form fields, etc.
+     * @property {string} [accentForeground] The text color (must be HTML name, hex code, or RGB) used on `accent` background, for example, the text on buttons.
+     * @property {string} [backgroundColor] The `background-color` of the page (must be HTML name, hex code, or RGB).
+     * @property {string} [color] The `color` of the text on the page (must be HTML name, hex code, or RGB).
+     */
+    /**
+     * Options for the page or form.
+     *
+     * @typedef {Object} OptionsType
+     * @property {"light"|"dark"} [colorScheme] The default or initial color scheme of the page. Default is `"light"`.
+     * @property {string} [errorFieldKey] The key used to identify the field in error objects. Default is `"field"`.
+     * @property {string} [errorMessageKey] The key used to identify the error message in error objects. Default is `"message"`.
+     * @property {"hide"|"show"} [footer] Controls visibility of the footer.
+     * @property {"hide"|"show"} [formsmdBranding] Controls visibility of the Forms.md branding.
+     * @property {Object} [getHeaders] Headers for GET requests.
+     * @property {boolean} [isFullPage] Whether to render in full page mode. Default is `false`.
+     * @property {number} [paddingInlineBottom] Padding bottom for inline pages or forms. Default is `20`.
+     * @property {number} [paddingInlineHorizontal] Horizontal padding for inline pages or forms. Default is `0`.
+     * @property {number} [paddingInlineTop] Padding top for inline pages or forms. Default is `20`.
+     * @property {"hide"|"show"|"decorative"} [pageProgress] Controls visibility and function of the page progress.
+     * @property {Object} [postData] Extra data sent with POST requests.
+     * @property {Object} [postHeaders] Headers for POST requests.
+     * @property {boolean} [prioritizeURLFormData] Whether to prioritize URL form data. Default is `false`.
+     * @property {RecaptchaType} [recaptcha] The Google reCAPTCHA attributes.
+     * @property {boolean} [sanitize] Whether to sanitize template. Default is `true`.
+     * @property {boolean} [saveState] Whether to save form data in local storage. Default is `true`.
+     * @property {boolean} [sendFilesAsBase64] Whether to send files as base64. Default is `false`.
+     * @property {boolean} [setColorSchemeAttrsAgain] Whether to set color scheme attributes again.
+     * @property {"hide"|"show"} [slideControls] Controls visibility of next and previous buttons.
+     * @property {number} [startSlide] The index of the first slide to make active. Default is `0`.
+     * @property {ThemeType} [themeDark] Dark theme.
+     * @property {ThemeType} [themeLight] Light theme.
+     */
+    /**
+     * Create an instance of the class.
+     *
+     * @param {string} template
+     * @param {Document|HTMLElement|Element} container
+     * @param {OptionsType} options
+     */
+    constructor(template: string, container: Document | HTMLElement | Element, options: {
+        /**
+         * The default or initial color scheme of the page. Default is `"light"`.
+         */
+        colorScheme?: "light" | "dark";
+        /**
+         * The key used to identify the field in error objects. Default is `"field"`.
+         */
+        errorFieldKey?: string;
+        /**
+         * The key used to identify the error message in error objects. Default is `"message"`.
+         */
+        errorMessageKey?: string;
+        /**
+         * Controls visibility of the footer.
+         */
+        footer?: "hide" | "show";
+        /**
+         * Controls visibility of the Forms.md branding.
+         */
+        formsmdBranding?: "hide" | "show";
+        /**
+         * Headers for GET requests.
+         */
+        getHeaders?: any;
+        /**
+         * Whether to render in full page mode. Default is `false`.
+         */
+        isFullPage?: boolean;
+        /**
+         * Padding bottom for inline pages or forms. Default is `20`.
+         */
+        paddingInlineBottom?: number;
+        /**
+         * Horizontal padding for inline pages or forms. Default is `0`.
+         */
+        paddingInlineHorizontal?: number;
+        /**
+         * Padding top for inline pages or forms. Default is `20`.
+         */
+        paddingInlineTop?: number;
+        /**
+         * Controls visibility and function of the page progress.
+         */
+        pageProgress?: "hide" | "show" | "decorative";
+        /**
+         * Extra data sent with POST requests.
+         */
+        postData?: any;
+        /**
+         * Headers for POST requests.
+         */
+        postHeaders?: any;
+        /**
+         * Whether to prioritize URL form data. Default is `false`.
+         */
+        prioritizeURLFormData?: boolean;
+        /**
+         * The Google reCAPTCHA attributes.
+         */
+        recaptcha?: {
+            /**
+             * Google reCAPTCHA site key.
+             */
+            siteKey?: string;
+            /**
+             * The action name. Default is `"submit"`.
+             */
+            action?: string;
+            /**
+             * The position of the reCAPTCHA badge. Default is `"bottomleft"`.
+             */
+            badgePosition?: "bottomleft" | "bottomright" | "inline";
+            /**
+             * Whether to hide the reCAPTCHA badge. Default is `false`.
+             */
+            hideBadge?: boolean;
+        };
+        /**
+         * Whether to sanitize template. Default is `true`.
+         */
+        sanitize?: boolean;
+        /**
+         * Whether to save form data in local storage. Default is `true`.
+         */
+        saveState?: boolean;
+        /**
+         * Whether to send files as base64. Default is `false`.
+         */
+        sendFilesAsBase64?: boolean;
+        /**
+         * Whether to set color scheme attributes again.
+         */
+        setColorSchemeAttrsAgain?: boolean;
+        /**
+         * Controls visibility of next and previous buttons.
+         */
+        slideControls?: "hide" | "show";
+        /**
+         * The index of the first slide to make active. Default is `0`.
+         */
+        startSlide?: number;
+        /**
+         * Dark theme.
+         */
+        themeDark?: {
+            /**
+             * The primary color (must be HTML name, hex code, or RGB) used on buttons, form fields, etc.
+             */
+            accent?: string;
+            /**
+             * The text color (must be HTML name, hex code, or RGB) used on `accent` background, for example, the text on buttons.
+             */
+            accentForeground?: string;
+            /**
+             * The `background-color` of the page (must be HTML name, hex code, or RGB).
+             */
+            backgroundColor?: string;
+            /**
+             * The `color` of the text on the page (must be HTML name, hex code, or RGB).
+             */
+            color?: string;
+        };
+        /**
+         * Light theme.
+         */
+        themeLight?: {
+            /**
+             * The primary color (must be HTML name, hex code, or RGB) used on buttons, form fields, etc.
+             */
+            accent?: string;
+            /**
+             * The text color (must be HTML name, hex code, or RGB) used on `accent` background, for example, the text on buttons.
+             */
+            accentForeground?: string;
+            /**
+             * The `background-color` of the page (must be HTML name, hex code, or RGB).
+             */
+            backgroundColor?: string;
+            /**
+             * The `color` of the text on the page (must be HTML name, hex code, or RGB).
+             */
+            color?: string;
+        };
+    });
+    options: {
+        colorScheme: string;
+        errorFieldKey: string;
+        errorMessageKey: string;
+        footer: string;
+        formsmdBranding: string;
+        getHeaders: {};
+        isFullPage: boolean;
+        paddingInlineBottom: number;
+        paddingInlineHorizontal: number;
+        paddingInlineTop: number;
+        pageProgress: string;
+        postData: {};
+        postHeaders: {};
+        prioritizeURLFormData: boolean;
+        recaptcha: {
+            siteKey: string;
+            action: string;
+            badgePosition: string;
+            hideBadge: boolean;
+        };
+        sanitize: boolean;
+        saveState: boolean;
+        sendFilesAsBase64: boolean;
+        setColorSchemeAttrsAgain: boolean;
+        slideControls: string;
+        startSlide: number;
+        themeDark: {
+            accent: string;
+            accentForeground: string;
+            backgroundColor: string;
+            color: string;
+        };
+        themeLight: {
+            accent: string;
+            accentForeground: string;
+            backgroundColor: string;
+            color: string;
+        };
+    };
+    container: Element | Document | HTMLElement;
+    _template: string;
+    /**
+     * Set the state to defaults.
+     */
+    setStateToDefaults: () => void;
+    state: {
+        bindDivTemplates: {};
+        data: {};
+        fieldTypes: {};
+        formData: {};
+        settings: any;
+        slideData: {
+            currentIndex: number;
+            slideDefinitions: any[];
+            endSlideDefinition: string;
+            availableSlides: number;
+        };
+        lifecycle: {
+            questionCache: Map<any, any>;
+            questionPath: any[];
+            userResponses: Map<any, any>;
+            currentQuestionIndex: number;
+            currentQuestion: any;
+            currentSlideType: string;
+        };
+        surveyConfig: {
+            welcomeScreen: any;
+            endScreen: any;
+        };
+    };
+    /**
+     * Add a single attribute value to an HTML element.
+     *
+     * @param {HTMLElement} elem
+     * @param {string} name
+     * @param {string} value
+     */
+    setSingleAttribute: (elem: HTMLElement, name: string, value: string) => void;
+    /**
+     * Remove a single attribute value from an HTML element.
+     *
+     * @param {HTMLElement} elem
+     * @param {string} name
+     * @param {string} value
+     */
+    removeSingleAttribute: (elem: HTMLElement, name: string, value: string) => void;
+    /**
+     * Get the prefix for the page/form id.
+     *
+     * @returns {string}
+     */
+    getIdPrefix: () => string;
+    /**
+     * Set the preferred color scheme (if one is found in the local storage).
+     * Depending on the preference from settings, either the domain-wide or the
+     * page-specific value is used.
+     */
+    setPreferredColorScheme: () => void;
+    /**
+     * Toggle color scheme. If the preferred color scheme (from settings) is set
+     * to "isolate", the preference is saved (and used) only for that page.
+     * Otherwise, it is saved (and used) domain-wide.
+     *
+     * @param {MouseEvent} e
+     */
+    toggleColorScheme: (e: MouseEvent) => void;
+    /**
+     * Create a random 32 characters id separated by dashes.
+     *
+     * @returns {string}
+     */
+    createRandomId: () => string;
+    /**
+     * Get or create response id. This uniquely identifies one single form
+     * response. The id is created on initialization (unless one already
+     * exists), and it is removed when the user reaches the end slide.
+     *
+     * @returns {string}
+     */
+    getOrCreateResponseId: () => string;
+    /**
+     * Remove response id. This is called when the user reaches the end slide.
+     */
+    removeResponseId: () => void;
+    /**
+     * Save form field value in local storage.
+     *
+     * @param {string} name
+     * @param {*} value
+     */
+    saveFieldValue: (name: string, value: any) => void;
+    /**
+     * Remove form data from local storage. This is called when the user reaches
+     * the end slide.
+     */
+    removeSavedFormData: () => void;
+    /**
+     * Re-render the bind <div> and <span> elements.
+     *
+     * @param {string} name
+     */
+    reRenderBindElems: (name: string) => void;
+    /**
+     * Get value of a set of radio buttons or checkboxes.
+     *
+     * @param {string} name
+     * @param {string} inputClass
+     * @param {"radio"|"checkbox"} type
+     * @returns {string|Array.<string>}
+     */
+    getRadioCheckboxValue: (name: string, inputClass: string, type: "radio" | "checkbox") => string | Array<string>;
+    /**
+     * Set value of a set of radio buttons or checkboxes.
+     *
+     * @param {string} name
+     * @param {string} inputClass
+     * @param {"radio"|"checkbox"} type
+     * @param {string|Array.<string>} value
+     */
+    setRadioCheckboxValue: (name: string, inputClass: string, type: "radio" | "checkbox", value: string | Array<string>) => void;
+    /**
+     * Given a country calling code <select>, update placeholder of the
+     * corresponding telephone input using the selected <option>.
+     *
+     * @param {HTMLSelectElement} countryCodeSelect
+     */
+    setTelInputPlaceholder: (countryCodeSelect: HTMLSelectElement) => void;
+    /**
+     * Set form data to state (value and type). Also re-render the bind <div>
+     * and <span> elements.
+     */
+    setFormDataToState: () => void;
+    /**
+     * Set form data from URL parameters: set value in the DOM, update state,
+     * conditionally update local storage, and re-render the bind <div> and
+     * <span> elements. The local storage is updated if this function is called
+     * AFTER setting the saved form data (in local storage).
+     *
+     * @param {boolean} updateLocalStorage
+     */
+    setFormDataFromURL: (updateLocalStorage: boolean) => void;
+    /**
+     * Set form data saved in local storage: set value in the DOM, update state,
+     * and re-render the bind <div> and <span> elements.
+     */
+    setSavedFormData: () => void;
+    /**
+     * Given a form field element, remove all errors (and everything related).
+     *
+     * @param {HTMLElement} formField
+     */
+    removeFieldErrors: (formField: HTMLElement) => void;
+    /**
+     * Handle the inputs of text form fields: update value in the state, save
+     * value in local storage, remove errors and re-render the bind <div> and
+     * <span> elements.
+     *
+     * @param {InputEvent} e
+     */
+    textFieldOnInput: (e: InputEvent) => void;
+    /**
+     * Handle the inputs of number form fields: update value in the state, save
+     * value in local storage, remove errors and re-render the bind <div> and
+     * <span> elements.
+     *
+     * @param {InputEvent} e
+     */
+    numberFieldOnInput: (e: InputEvent) => void;
+    /**
+     * Handle the inputs of select form fields: update value in the state, save
+     * value in local storage, remove errors and re-render the bind <div> and
+     * <span> elements. If the select box is a country calling code select, then
+     * also update the placeholder of the corresponding telephone input.
+     *
+     * @param {InputEvent} e
+     */
+    selectFieldOnInput: (e: InputEvent) => void;
+    /**
+     * Handle the inputs of choice form fields: update value in the state, save
+     * value in local storage, remove errors and re-render the bind <div> and
+     * <span> elements.
+     *
+     * @param {InputEvent} e
+     */
+    choiceFieldOnInput: (e: InputEvent) => void;
+    /**
+     * Handle the inputs of number choice form fields: update value in the
+     * state, save value in local storage, remove errors and re-render the bind
+     * <div> and <span> elements.
+     *
+     * @param {InputEvent} e
+     */
+    numChoiceFieldOnInput: (e: InputEvent) => void;
+    /**
+     * Handle the inputs of datetime form fields: update value in the state,
+     * save value in local storage, remove errors and re-render the bind <div>
+     * and <span> elements.
+     *
+     * @param {InputEvent} e
+     */
+    datetimeFieldOnInput: (e: InputEvent) => void;
+    /**
+     * Handle the inputs of file form fields: reset and update the wrapping
+     * <label> depending on the file chosen.
+     *
+     * @param {InputEvent} e
+     */
+    fileFieldOnInput: (e: InputEvent) => void;
+    /**
+     * Set the height of a <textarea> element.
+     *
+     * @param {HTMLTextAreaElement} textarea
+     */
+    setTextareaHeight: (textarea: HTMLTextAreaElement) => void;
+    /**
+     * Set the height of a <textarea> element on input.
+     *
+     * @param {InputEvent} e
+     */
+    setTextareaHeightOnInput: (e: InputEvent) => void;
+    /**
+     * Reset file input when the corresponding reset button is clicked.
+     *
+     * @param {MouseEvent} e
+     */
+    fileInputResetBtnOnClick: (e: MouseEvent) => void;
+    /**
+     * Given a <button> element, set it to the processing state.
+     *
+     * @param {HTMLButtonElement} btn
+     */
+    setBtnProcessing: (btn: HTMLButtonElement) => void;
+    /**
+     * Given a <button> element, remove its processing state.
+     *
+     * @param {HTMLButtonElement} btn
+     */
+    removeBtnProcessing: (btn: HTMLButtonElement) => void;
+    /**
+     * Given a slide element, remove all errors (and everything related).
+     *
+     * @param {HTMLElement} slide
+     */
+    removeSlideErrors: (slide: HTMLElement) => void;
+    /**
+     * Add an error inside the given form field element.
+     *
+     * @param {HTMLElement} formField
+     * @param {string} errorId
+     * @param {string} message
+     */
+    addFieldError: (formField: HTMLElement, errorId: string, message: string) => void;
+    /**
+     * Given a <form> element, validate and add errors if necessary. By default,
+     * most form fields rely entirely on built-in client-side validation that is
+     * found in browsers.
+     *
+     * @param {HTMLFormElement} form
+     * @returns {boolean} form is valid or not
+     */
+    formValid: (form: HTMLFormElement) => boolean;
+    /**
+     * When an error occurs during form submission or slide transition, add an
+     * error inside the slide element that contains the messages (if any).
+     *
+     * @param {HTMLElement} slide
+     * @param {HTMLButtonElement} ctaBtn
+     * @param {Array.<string>} messages
+     */
+    addSlideError: (slide: HTMLElement, ctaBtn: HTMLButtonElement, messages: Array<string>) => void;
+    /**
+     * GET data from remote source. A remote source here is anything outside of
+     * the actual template.
+     *
+     * @returns {Promise<string>}
+     */
+    getRemoteData: () => Promise<string>;
+    /**
+     * Convert timezone offset (in minutes) to the +HH:mm or -HH:mm format.
+     *
+     * @param {number} minutes
+     * @returns {String}
+     */
+    convertTimezoneOffset: (minutes: number) => string;
+    /**
+     * Execute Google reCAPTCHA v3 validation.
+     *
+     * @returns {Promise<string>} The Google reCAPTCHA token
+     */
+    executeRecaptcha: () => Promise<string>;
+    /**
+     * Convert a file to base64
+     *
+     * @param {File} file
+     * @returns {Promise<string>}
+     */
+    fileToBase64: (file: File) => Promise<string>;
+    /**
+     * POST form data.
+     *
+     * @param {boolean} postCondition
+     * @param {boolean} end
+     * @returns {Promise<{ok: boolean, json: Object}>}
+     */
+    postFormData: (postCondition: boolean, end: boolean) => Promise<{
+        ok: boolean;
+        json: any;
+    }>;
+    /**
+     * Go through each slide (before the current one) to get the previous one to
+     * make active (depending on the jump condition).
+     *
+     * @returns {{slide: HTMLElement, index: number}} the previous slide and its
+     * index
+     */
+    getPrevSlide: () => {
+        slide: HTMLElement;
+        index: number;
+    };
+    /**
+     * Get survey settings and theme from API
+     *
+     * @returns {Promise<Object>} survey data
+     */
+    getSurveyFromAPI: () => Promise<any>;
+    /**
+     * Get the next question from the API
+     *
+     * @param {Object} currentResponse - Current question response data
+     * @returns {Promise<{question: Object, isEndSlide: boolean}>} the next question data
+     */
+    getNextQuestionFromAPI: (currentResponse?: any) => Promise<{
+        question: any;
+        isEndSlide: boolean;
+    }>;
+    /**
+     * Initialize the form from API data
+     */
+    initializeFromAPI: () => Promise<void>;
+    /**
+     * Initialize the form with API configuration
+     */
+    initializeWithApiConfig: (config: any) => void;
+    template: string;
+    /**
+     * Initialize FormsMD with configuration
+     */
+    initWithConfig: (config: any) => void;
+    /**
+     * Apply survey theme and settings
+     *
+     * @param {Object} surveyData - Survey data from API
+     */
+    applySurveyTheme: (surveyData: any) => void;
+    /**
+     * Get current form data for API submission using questionId-based approach
+     *
+     * @param {HTMLElement} activeSlide - The current active slide
+     * @param {Object} originalQuestion - The original question object from API
+     * @returns {Object} Form data with questionId, value, and timeSpent
+     */
+    getCurrentFormData: (activeSlide: HTMLElement, originalQuestion?: any) => any;
+    /**
+     * Get question type from DOM if not provided in original question
+     *
+     * @param {HTMLElement} activeSlide - The current active slide
+     * @param {string} questionId - The question ID
+     * @returns {string} Question type
+     */
+    getQuestionTypeFromDOM: (activeSlide: HTMLElement, questionId: string) => string;
+    /**
+     * Extract value based on question type using questionId
+     *
+     * @param {HTMLElement} activeSlide - The current active slide
+     * @param {string} questionId - The question ID
+     * @param {string} questionType - The question type
+     * @param {Object} questionConfig - Question configuration (options, etc.)
+     * @returns {string|number|Array} Extracted value
+     */
+    extractValueByQuestionType: (activeSlide: HTMLElement, questionId: string, questionType: string, questionConfig: any) => string | number | any[];
+    /**
+     * Extract value from choice input (radio/checkbox)
+     *
+     * @param {HTMLElement} activeSlide - The current active slide
+     * @param {string} questionId - The question ID
+     * @param {Object} questionConfig - Question configuration
+     * @returns {string|Array} Extracted value
+     */
+    extractChoiceInputValue: (activeSlide: HTMLElement, questionId: string, questionConfig: any) => string | any[];
+    /**
+     * Extract value from text input
+     *
+     * @param {HTMLElement} activeSlide - The current active slide
+     * @param {string} questionId - The question ID
+     * @returns {string} Extracted value
+     */
+    extractTextInputValue: (activeSlide: HTMLElement, questionId: string) => string;
+    /**
+     * Extract value from number input
+     *
+     * @param {HTMLElement} activeSlide - The current active slide
+     * @param {string} questionId - The question ID
+     * @returns {number|null} Extracted value
+     */
+    extractNumberInputValue: (activeSlide: HTMLElement, questionId: string) => number | null;
+    /**
+     * Extract value from rating input
+     *
+     * @param {HTMLElement} activeSlide - The current active slide
+     * @param {string} questionId - The question ID
+     * @returns {number|null} Extracted value
+     */
+    extractRatingInputValue: (activeSlide: HTMLElement, questionId: string) => number | null;
+    /**
+     * Extract value from datetime input
+     *
+     * @param {HTMLElement} activeSlide - The current active slide
+     * @param {string} questionId - The question ID
+     * @returns {string} Extracted value
+     */
+    extractDateTimeInputValue: (activeSlide: HTMLElement, questionId: string) => string;
+    /**
+     * Extract value from file input
+     *
+     * @param {HTMLElement} activeSlide - The current active slide
+     * @param {string} questionId - The question ID
+     * @returns {string} Extracted value
+     */
+    extractFileInputValue: (activeSlide: HTMLElement, questionId: string) => string;
+    /**
+     * Set up the basic DOM structure for API-driven mode
+     */
+    setupApiDrivenStructure: () => void;
+    /**
+     * Set up the basic form structure
+     */
+    setupFormStructure: () => void;
+    /**
+     * Convert API question to slide definition format
+     *
+     * @param {Object} question - The question object from API
+     * @returns {string} slide definition in markdown format
+     */
+    convertAPIQuestionToSlideDefinition: (question: any) => string;
+    /**
+     * Create the next slide from its definition and insert it into the DOM
+     *
+     * @param {string} slideDefinition
+     * @param {boolean} isEndSlide
+     * @returns {HTMLElement} the created slide element
+     */
+    createNextSlide: (slideDefinition: string, isEndSlide: boolean) => HTMLElement;
+    /**
+     * Lifecycle Manager - Create question with caching
+     */
+    createQuestionLifecycle: (questionData: any, slideDefinition: any, isEndSlide?: boolean, slideType?: string) => Element;
+    /**
+     * Lifecycle Manager - Destroy question and cache it
+     */
+    destroyQuestionLifecycle: (slideElement: any) => void;
+    /**
+     * Get the currently active slide
+     */
+    getActiveSlide: () => Element;
+    /**
+     * Reset button processing state - ensures all buttons are enabled and functional
+     */
+    resetButtonProcessingState: () => void;
+    /**
+     * Show a slide (make it active)
+     */
+    showSlide: (slideElement: any) => void;
+    /**
+     * Navigation Manager - Navigate to specific question
+     */
+    navigateToQuestion: (targetIndex: any) => Promise<void>;
+    /**
+     * Restore user response to a slide
+     */
+    restoreUserResponse: (slideElement: any, response: any) => void;
+    /**
+     * Handle answer changes and branching
+     */
+    handleAnswerChange: (questionId: any, newResponse: any) => Promise<void>;
+    /**
+     * Enhanced back navigation
+     */
+    handleBackNavigation: () => void;
+    /**
+     * Enhanced forward navigation
+     */
+    handleForwardNavigation: () => void;
+    /**
+     * Render welcome slide
+     */
+    renderWelcomeSlide: (question: any, config: any) => string;
+    /**
+     * Render end slide
+     */
+    renderEndSlide: (question: any, config: any) => any;
+    /**
+     * Render content slide (generic)
+     */
+    renderContentSlide: (slideType: any, question: any, config: any) => any;
+    /**
+     * Handle end screen navigation
+     */
+    handleEndNavigation: () => void;
+    /**
+     * Create content slide from HTML
+     */
+    createContentSlide: (slideHtml: any) => Element;
+    /**
+     * Process slide content (markdown parsing, highlighting, etc.)
+     *
+     * @param {HTMLElement} slideElement
+     */
+    processSlideContent: (slideElement: HTMLElement) => void;
+    /**
+     * Get the CSS slide transition duration (in milliseconds).
+     *
+     * @returns {number}
+     */
+    getSlideTransitionDuration: () => number;
+    /**
+     * When a new slide becomes active, do the following: update state, handle
+     * page progress (if applicable), handle the display and state of the footer
+     * slide control buttons, scroll to top and autofocus (if applicable).
+     *
+     * @param {HTMLElement} slide
+     * @param {number} index
+     * @param {boolean} fromInit
+     */
+    hasNewActiveSlide: (slide: HTMLElement, index: number, fromInit: boolean) => void;
+    /**
+     * Fade out active slide and fade in next slide. The timeouts make sure that
+     * the animations work properly.
+     *
+     * @param {HTMLElement} activeSlide
+     * @param {HTMLElement} nextSlide
+     */
+    fadeInNextSlide: (activeSlide: HTMLElement, nextSlide: HTMLElement) => void;
+    /**
+     * Fade out active slide and fade in previous slide. The timeouts make sure
+     * that the animations work properly.
+     *
+     * @param {HTMLElement} activeSlide
+     * @param {HTMLElement} prevSlide
+     */
+    fadeInPrevSlide: (activeSlide: HTMLElement, prevSlide: HTMLElement) => void;
+    /**
+     * Disable all clicks. This is added when the slide transition starts, and
+     * removed after the slide transition has ended (or if there is an error).
+     *
+     * @param {MouseEvent} e
+     */
+    disableAllClicks: (e: MouseEvent) => boolean;
+    /**
+     * Get error messages from the JSON response received during form submission.
+     * By default, it is assumed that the errors in the response will use the
+     * OpenAPI format. However, this function can be overridden to make sure
+     * other formats are supported.
+     *
+     * @param {Object} json
+     * @returns {Array.<string>}
+     */
+    getSubmissionErrors: (json: any) => Array<string>;
+    /**
+     * Called when the user reaches the end slide. This function can be
+     * overridden to do something when the user reaches completion.
+     *
+     * @param {Object} json
+     */
+    onCompletion: (json: any) => void;
+    /**
+     * Go to the next slide.
+     *
+     * @param {HTMLElement} activeSlide
+     */
+    nextSlide: (activeSlide: HTMLElement) => void;
+    /**
+     * Handle successful next slide creation
+     *
+     * @param {HTMLElement} activeSlide
+     * @param {HTMLElement} nextSlide
+     * @param {Object} nextSlideData
+     */
+    handleNextSlideSuccess: (activeSlide: HTMLElement, nextSlide: HTMLElement, nextSlideData: any) => void;
+    /**
+     * Go to the previous slide using lifecycle management.
+     *
+     * @param {HTMLElement} activeSlide
+     */
+    prevSlide: (activeSlide: HTMLElement) => void;
+    /**
+     * Copy code to clipboard. The code block (<pre> element) closest to the
+     * copy button is the target.
+     *
+     * @param {MouseEvent} e
+     */
+    copyCode: (e: MouseEvent) => void;
+    /**
+     * Add all the event listeners.
+     *
+     * @param {HTMLElement} container
+     * @param {boolean} fromInit
+     */
+    addEventListeners: (container: HTMLElement, fromInit: boolean) => void;
+    /**
+     * Load the Google reCAPTCHA v3 script asynchronously.
+     */
+    loadRecaptchaScript: () => void;
+    /**
+     * Initialize settings, set data defined in the template, fetch and set data
+     * from remote source, and create the templates.
+     *
+     * @param {boolean} isFirstInit
+     */
+    _init: (isFirstInit: boolean) => void;
+    /**
+     * Initialize for the first time.
+     */
+    init: () => void;
+    /**
+     * Process question response and create the next slide
+     *
+     * @param {Object} questionData - The question data from API
+     */
+    processQuestionResponse: (questionData: any) => void;
 }
diff --git a/types/phone-numbers.d.ts b/types/phone-numbers.d.ts
index 03b4152..1e6723b 100644
--- a/types/phone-numbers.d.ts
+++ b/types/phone-numbers.d.ts
@@ -1,1508 +1,1508 @@
 export namespace placeholdersAndCallingCodes {
-	namespace AC {
-		let placeholder: string;
-		let callingCode: string;
-	}
-	namespace AD {
-		let placeholder_1: string;
-		export { placeholder_1 as placeholder };
-		let callingCode_1: string;
-		export { callingCode_1 as callingCode };
-	}
-	namespace AE {
-		let placeholder_2: string;
-		export { placeholder_2 as placeholder };
-		let callingCode_2: string;
-		export { callingCode_2 as callingCode };
-	}
-	namespace AF {
-		let placeholder_3: string;
-		export { placeholder_3 as placeholder };
-		let callingCode_3: string;
-		export { callingCode_3 as callingCode };
-	}
-	namespace AG {
-		let placeholder_4: string;
-		export { placeholder_4 as placeholder };
-		let callingCode_4: string;
-		export { callingCode_4 as callingCode };
-	}
-	namespace AI {
-		let placeholder_5: string;
-		export { placeholder_5 as placeholder };
-		let callingCode_5: string;
-		export { callingCode_5 as callingCode };
-	}
-	namespace AL {
-		let placeholder_6: string;
-		export { placeholder_6 as placeholder };
-		let callingCode_6: string;
-		export { callingCode_6 as callingCode };
-	}
-	namespace AM {
-		let placeholder_7: string;
-		export { placeholder_7 as placeholder };
-		let callingCode_7: string;
-		export { callingCode_7 as callingCode };
-	}
-	namespace AN {
-		let placeholder_8: string;
-		export { placeholder_8 as placeholder };
-		let callingCode_8: string;
-		export { callingCode_8 as callingCode };
-	}
-	namespace AO {
-		let placeholder_9: string;
-		export { placeholder_9 as placeholder };
-		let callingCode_9: string;
-		export { callingCode_9 as callingCode };
-	}
-	namespace AQ {
-		let placeholder_10: string;
-		export { placeholder_10 as placeholder };
-		let callingCode_10: string;
-		export { callingCode_10 as callingCode };
-	}
-	namespace AR {
-		let placeholder_11: string;
-		export { placeholder_11 as placeholder };
-		let callingCode_11: string;
-		export { callingCode_11 as callingCode };
-	}
-	namespace AS {
-		let placeholder_12: string;
-		export { placeholder_12 as placeholder };
-		let callingCode_12: string;
-		export { callingCode_12 as callingCode };
-	}
-	namespace AT {
-		let placeholder_13: string;
-		export { placeholder_13 as placeholder };
-		let callingCode_13: string;
-		export { callingCode_13 as callingCode };
-	}
-	namespace AU {
-		let placeholder_14: string;
-		export { placeholder_14 as placeholder };
-		let callingCode_14: string;
-		export { callingCode_14 as callingCode };
-	}
-	namespace AW {
-		let placeholder_15: string;
-		export { placeholder_15 as placeholder };
-		let callingCode_15: string;
-		export { callingCode_15 as callingCode };
-	}
-	namespace AX {
-		let placeholder_16: string;
-		export { placeholder_16 as placeholder };
-		let callingCode_16: string;
-		export { callingCode_16 as callingCode };
-	}
-	namespace AZ {
-		let placeholder_17: string;
-		export { placeholder_17 as placeholder };
-		let callingCode_17: string;
-		export { callingCode_17 as callingCode };
-	}
-	namespace BA {
-		let placeholder_18: string;
-		export { placeholder_18 as placeholder };
-		let callingCode_18: string;
-		export { callingCode_18 as callingCode };
-	}
-	namespace BB {
-		let placeholder_19: string;
-		export { placeholder_19 as placeholder };
-		let callingCode_19: string;
-		export { callingCode_19 as callingCode };
-	}
-	namespace BD {
-		let placeholder_20: string;
-		export { placeholder_20 as placeholder };
-		let callingCode_20: string;
-		export { callingCode_20 as callingCode };
-	}
-	namespace BE {
-		let placeholder_21: string;
-		export { placeholder_21 as placeholder };
-		let callingCode_21: string;
-		export { callingCode_21 as callingCode };
-	}
-	namespace BF {
-		let placeholder_22: string;
-		export { placeholder_22 as placeholder };
-		let callingCode_22: string;
-		export { callingCode_22 as callingCode };
-	}
-	namespace BG {
-		let placeholder_23: string;
-		export { placeholder_23 as placeholder };
-		let callingCode_23: string;
-		export { callingCode_23 as callingCode };
-	}
-	namespace BH {
-		let placeholder_24: string;
-		export { placeholder_24 as placeholder };
-		let callingCode_24: string;
-		export { callingCode_24 as callingCode };
-	}
-	namespace BI {
-		let placeholder_25: string;
-		export { placeholder_25 as placeholder };
-		let callingCode_25: string;
-		export { callingCode_25 as callingCode };
-	}
-	namespace BJ {
-		let placeholder_26: string;
-		export { placeholder_26 as placeholder };
-		let callingCode_26: string;
-		export { callingCode_26 as callingCode };
-	}
-	namespace BL {
-		let placeholder_27: string;
-		export { placeholder_27 as placeholder };
-		let callingCode_27: string;
-		export { callingCode_27 as callingCode };
-	}
-	namespace BM {
-		let placeholder_28: string;
-		export { placeholder_28 as placeholder };
-		let callingCode_28: string;
-		export { callingCode_28 as callingCode };
-	}
-	namespace BN {
-		let placeholder_29: string;
-		export { placeholder_29 as placeholder };
-		let callingCode_29: string;
-		export { callingCode_29 as callingCode };
-	}
-	namespace BO {
-		let placeholder_30: string;
-		export { placeholder_30 as placeholder };
-		let callingCode_30: string;
-		export { callingCode_30 as callingCode };
-	}
-	namespace BQ {
-		let placeholder_31: string;
-		export { placeholder_31 as placeholder };
-		let callingCode_31: string;
-		export { callingCode_31 as callingCode };
-	}
-	namespace BR {
-		let placeholder_32: string;
-		export { placeholder_32 as placeholder };
-		let callingCode_32: string;
-		export { callingCode_32 as callingCode };
-	}
-	namespace BS {
-		let placeholder_33: string;
-		export { placeholder_33 as placeholder };
-		let callingCode_33: string;
-		export { callingCode_33 as callingCode };
-	}
-	namespace BT {
-		let placeholder_34: string;
-		export { placeholder_34 as placeholder };
-		let callingCode_34: string;
-		export { callingCode_34 as callingCode };
-	}
-	namespace BW {
-		let placeholder_35: string;
-		export { placeholder_35 as placeholder };
-		let callingCode_35: string;
-		export { callingCode_35 as callingCode };
-	}
-	namespace BY {
-		let placeholder_36: string;
-		export { placeholder_36 as placeholder };
-		let callingCode_36: string;
-		export { callingCode_36 as callingCode };
-	}
-	namespace BZ {
-		let placeholder_37: string;
-		export { placeholder_37 as placeholder };
-		let callingCode_37: string;
-		export { callingCode_37 as callingCode };
-	}
-	namespace CA {
-		let placeholder_38: string;
-		export { placeholder_38 as placeholder };
-		let callingCode_38: string;
-		export { callingCode_38 as callingCode };
-	}
-	namespace CC {
-		let placeholder_39: string;
-		export { placeholder_39 as placeholder };
-		let callingCode_39: string;
-		export { callingCode_39 as callingCode };
-	}
-	namespace CD {
-		let placeholder_40: string;
-		export { placeholder_40 as placeholder };
-		let callingCode_40: string;
-		export { callingCode_40 as callingCode };
-	}
-	namespace CF {
-		let placeholder_41: string;
-		export { placeholder_41 as placeholder };
-		let callingCode_41: string;
-		export { callingCode_41 as callingCode };
-	}
-	namespace CG {
-		let placeholder_42: string;
-		export { placeholder_42 as placeholder };
-		let callingCode_42: string;
-		export { callingCode_42 as callingCode };
-	}
-	namespace CH {
-		let placeholder_43: string;
-		export { placeholder_43 as placeholder };
-		let callingCode_43: string;
-		export { callingCode_43 as callingCode };
-	}
-	namespace CI {
-		let placeholder_44: string;
-		export { placeholder_44 as placeholder };
-		let callingCode_44: string;
-		export { callingCode_44 as callingCode };
-	}
-	namespace CK {
-		let placeholder_45: string;
-		export { placeholder_45 as placeholder };
-		let callingCode_45: string;
-		export { callingCode_45 as callingCode };
-	}
-	namespace CL {
-		let placeholder_46: string;
-		export { placeholder_46 as placeholder };
-		let callingCode_46: string;
-		export { callingCode_46 as callingCode };
-	}
-	namespace CM {
-		let placeholder_47: string;
-		export { placeholder_47 as placeholder };
-		let callingCode_47: string;
-		export { callingCode_47 as callingCode };
-	}
-	namespace CN {
-		let placeholder_48: string;
-		export { placeholder_48 as placeholder };
-		let callingCode_48: string;
-		export { callingCode_48 as callingCode };
-	}
-	namespace CO {
-		let placeholder_49: string;
-		export { placeholder_49 as placeholder };
-		let callingCode_49: string;
-		export { callingCode_49 as callingCode };
-	}
-	namespace CR {
-		let placeholder_50: string;
-		export { placeholder_50 as placeholder };
-		let callingCode_50: string;
-		export { callingCode_50 as callingCode };
-	}
-	namespace CU {
-		let placeholder_51: string;
-		export { placeholder_51 as placeholder };
-		let callingCode_51: string;
-		export { callingCode_51 as callingCode };
-	}
-	namespace CV {
-		let placeholder_52: string;
-		export { placeholder_52 as placeholder };
-		let callingCode_52: string;
-		export { callingCode_52 as callingCode };
-	}
-	namespace CW {
-		let placeholder_53: string;
-		export { placeholder_53 as placeholder };
-		let callingCode_53: string;
-		export { callingCode_53 as callingCode };
-	}
-	namespace CX {
-		let placeholder_54: string;
-		export { placeholder_54 as placeholder };
-		let callingCode_54: string;
-		export { callingCode_54 as callingCode };
-	}
-	namespace CY {
-		let placeholder_55: string;
-		export { placeholder_55 as placeholder };
-		let callingCode_55: string;
-		export { callingCode_55 as callingCode };
-	}
-	namespace CZ {
-		let placeholder_56: string;
-		export { placeholder_56 as placeholder };
-		let callingCode_56: string;
-		export { callingCode_56 as callingCode };
-	}
-	namespace DE {
-		let placeholder_57: string;
-		export { placeholder_57 as placeholder };
-		let callingCode_57: string;
-		export { callingCode_57 as callingCode };
-	}
-	namespace DJ {
-		let placeholder_58: string;
-		export { placeholder_58 as placeholder };
-		let callingCode_58: string;
-		export { callingCode_58 as callingCode };
-	}
-	namespace DK {
-		let placeholder_59: string;
-		export { placeholder_59 as placeholder };
-		let callingCode_59: string;
-		export { callingCode_59 as callingCode };
-	}
-	namespace DM {
-		let placeholder_60: string;
-		export { placeholder_60 as placeholder };
-		let callingCode_60: string;
-		export { callingCode_60 as callingCode };
-	}
-	namespace DO {
-		let placeholder_61: string;
-		export { placeholder_61 as placeholder };
-		let callingCode_61: string;
-		export { callingCode_61 as callingCode };
-	}
-	namespace DZ {
-		let placeholder_62: string;
-		export { placeholder_62 as placeholder };
-		let callingCode_62: string;
-		export { callingCode_62 as callingCode };
-	}
-	namespace EC {
-		let placeholder_63: string;
-		export { placeholder_63 as placeholder };
-		let callingCode_63: string;
-		export { callingCode_63 as callingCode };
-	}
-	namespace EE {
-		let placeholder_64: string;
-		export { placeholder_64 as placeholder };
-		let callingCode_64: string;
-		export { callingCode_64 as callingCode };
-	}
-	namespace EG {
-		let placeholder_65: string;
-		export { placeholder_65 as placeholder };
-		let callingCode_65: string;
-		export { callingCode_65 as callingCode };
-	}
-	namespace EH {
-		let placeholder_66: string;
-		export { placeholder_66 as placeholder };
-		let callingCode_66: string;
-		export { callingCode_66 as callingCode };
-	}
-	namespace ER {
-		let placeholder_67: string;
-		export { placeholder_67 as placeholder };
-		let callingCode_67: string;
-		export { callingCode_67 as callingCode };
-	}
-	namespace ES {
-		let placeholder_68: string;
-		export { placeholder_68 as placeholder };
-		let callingCode_68: string;
-		export { callingCode_68 as callingCode };
-	}
-	namespace ET {
-		let placeholder_69: string;
-		export { placeholder_69 as placeholder };
-		let callingCode_69: string;
-		export { callingCode_69 as callingCode };
-	}
-	namespace FI {
-		let placeholder_70: string;
-		export { placeholder_70 as placeholder };
-		let callingCode_70: string;
-		export { callingCode_70 as callingCode };
-	}
-	namespace FJ {
-		let placeholder_71: string;
-		export { placeholder_71 as placeholder };
-		let callingCode_71: string;
-		export { callingCode_71 as callingCode };
-	}
-	namespace FK {
-		let placeholder_72: string;
-		export { placeholder_72 as placeholder };
-		let callingCode_72: string;
-		export { callingCode_72 as callingCode };
-	}
-	namespace FM {
-		let placeholder_73: string;
-		export { placeholder_73 as placeholder };
-		let callingCode_73: string;
-		export { callingCode_73 as callingCode };
-	}
-	namespace FO {
-		let placeholder_74: string;
-		export { placeholder_74 as placeholder };
-		let callingCode_74: string;
-		export { callingCode_74 as callingCode };
-	}
-	namespace FR {
-		let placeholder_75: string;
-		export { placeholder_75 as placeholder };
-		let callingCode_75: string;
-		export { callingCode_75 as callingCode };
-	}
-	namespace GA {
-		let placeholder_76: string;
-		export { placeholder_76 as placeholder };
-		let callingCode_76: string;
-		export { callingCode_76 as callingCode };
-	}
-	namespace GB {
-		let placeholder_77: string;
-		export { placeholder_77 as placeholder };
-		let callingCode_77: string;
-		export { callingCode_77 as callingCode };
-	}
-	namespace GD {
-		let placeholder_78: string;
-		export { placeholder_78 as placeholder };
-		let callingCode_78: string;
-		export { callingCode_78 as callingCode };
-	}
-	namespace GE {
-		let placeholder_79: string;
-		export { placeholder_79 as placeholder };
-		let callingCode_79: string;
-		export { callingCode_79 as callingCode };
-	}
-	namespace GF {
-		let placeholder_80: string;
-		export { placeholder_80 as placeholder };
-		let callingCode_80: string;
-		export { callingCode_80 as callingCode };
-	}
-	namespace GG {
-		let placeholder_81: string;
-		export { placeholder_81 as placeholder };
-		let callingCode_81: string;
-		export { callingCode_81 as callingCode };
-	}
-	namespace GH {
-		let placeholder_82: string;
-		export { placeholder_82 as placeholder };
-		let callingCode_82: string;
-		export { callingCode_82 as callingCode };
-	}
-	namespace GI {
-		let placeholder_83: string;
-		export { placeholder_83 as placeholder };
-		let callingCode_83: string;
-		export { callingCode_83 as callingCode };
-	}
-	namespace GL {
-		let placeholder_84: string;
-		export { placeholder_84 as placeholder };
-		let callingCode_84: string;
-		export { callingCode_84 as callingCode };
-	}
-	namespace GM {
-		let placeholder_85: string;
-		export { placeholder_85 as placeholder };
-		let callingCode_85: string;
-		export { callingCode_85 as callingCode };
-	}
-	namespace GN {
-		let placeholder_86: string;
-		export { placeholder_86 as placeholder };
-		let callingCode_86: string;
-		export { callingCode_86 as callingCode };
-	}
-	namespace GP {
-		let placeholder_87: string;
-		export { placeholder_87 as placeholder };
-		let callingCode_87: string;
-		export { callingCode_87 as callingCode };
-	}
-	namespace GQ {
-		let placeholder_88: string;
-		export { placeholder_88 as placeholder };
-		let callingCode_88: string;
-		export { callingCode_88 as callingCode };
-	}
-	namespace GR {
-		let placeholder_89: string;
-		export { placeholder_89 as placeholder };
-		let callingCode_89: string;
-		export { callingCode_89 as callingCode };
-	}
-	namespace GS {
-		let placeholder_90: string;
-		export { placeholder_90 as placeholder };
-		let callingCode_90: string;
-		export { callingCode_90 as callingCode };
-	}
-	namespace GT {
-		let placeholder_91: string;
-		export { placeholder_91 as placeholder };
-		let callingCode_91: string;
-		export { callingCode_91 as callingCode };
-	}
-	namespace GU {
-		let placeholder_92: string;
-		export { placeholder_92 as placeholder };
-		let callingCode_92: string;
-		export { callingCode_92 as callingCode };
-	}
-	namespace GW {
-		let placeholder_93: string;
-		export { placeholder_93 as placeholder };
-		let callingCode_93: string;
-		export { callingCode_93 as callingCode };
-	}
-	namespace GY {
-		let placeholder_94: string;
-		export { placeholder_94 as placeholder };
-		let callingCode_94: string;
-		export { callingCode_94 as callingCode };
-	}
-	namespace HK {
-		let placeholder_95: string;
-		export { placeholder_95 as placeholder };
-		let callingCode_95: string;
-		export { callingCode_95 as callingCode };
-	}
-	namespace HM {
-		let placeholder_96: string;
-		export { placeholder_96 as placeholder };
-		let callingCode_96: string;
-		export { callingCode_96 as callingCode };
-	}
-	namespace HN {
-		let placeholder_97: string;
-		export { placeholder_97 as placeholder };
-		let callingCode_97: string;
-		export { callingCode_97 as callingCode };
-	}
-	namespace HR {
-		let placeholder_98: string;
-		export { placeholder_98 as placeholder };
-		let callingCode_98: string;
-		export { callingCode_98 as callingCode };
-	}
-	namespace HT {
-		let placeholder_99: string;
-		export { placeholder_99 as placeholder };
-		let callingCode_99: string;
-		export { callingCode_99 as callingCode };
-	}
-	namespace HU {
-		let placeholder_100: string;
-		export { placeholder_100 as placeholder };
-		let callingCode_100: string;
-		export { callingCode_100 as callingCode };
-	}
-	namespace ID {
-		let placeholder_101: string;
-		export { placeholder_101 as placeholder };
-		let callingCode_101: string;
-		export { callingCode_101 as callingCode };
-	}
-	namespace IE {
-		let placeholder_102: string;
-		export { placeholder_102 as placeholder };
-		let callingCode_102: string;
-		export { callingCode_102 as callingCode };
-	}
-	namespace IL {
-		let placeholder_103: string;
-		export { placeholder_103 as placeholder };
-		let callingCode_103: string;
-		export { callingCode_103 as callingCode };
-	}
-	namespace IM {
-		let placeholder_104: string;
-		export { placeholder_104 as placeholder };
-		let callingCode_104: string;
-		export { callingCode_104 as callingCode };
-	}
-	namespace IN {
-		let placeholder_105: string;
-		export { placeholder_105 as placeholder };
-		let callingCode_105: string;
-		export { callingCode_105 as callingCode };
-	}
-	namespace IO {
-		let placeholder_106: string;
-		export { placeholder_106 as placeholder };
-		let callingCode_106: string;
-		export { callingCode_106 as callingCode };
-	}
-	namespace IQ {
-		let placeholder_107: string;
-		export { placeholder_107 as placeholder };
-		let callingCode_107: string;
-		export { callingCode_107 as callingCode };
-	}
-	namespace IR {
-		let placeholder_108: string;
-		export { placeholder_108 as placeholder };
-		let callingCode_108: string;
-		export { callingCode_108 as callingCode };
-	}
-	namespace IS {
-		let placeholder_109: string;
-		export { placeholder_109 as placeholder };
-		let callingCode_109: string;
-		export { callingCode_109 as callingCode };
-	}
-	namespace IT {
-		let placeholder_110: string;
-		export { placeholder_110 as placeholder };
-		let callingCode_110: string;
-		export { callingCode_110 as callingCode };
-	}
-	namespace JE {
-		let placeholder_111: string;
-		export { placeholder_111 as placeholder };
-		let callingCode_111: string;
-		export { callingCode_111 as callingCode };
-	}
-	namespace JM {
-		let placeholder_112: string;
-		export { placeholder_112 as placeholder };
-		let callingCode_112: string;
-		export { callingCode_112 as callingCode };
-	}
-	namespace JO {
-		let placeholder_113: string;
-		export { placeholder_113 as placeholder };
-		let callingCode_113: string;
-		export { callingCode_113 as callingCode };
-	}
-	namespace JP {
-		let placeholder_114: string;
-		export { placeholder_114 as placeholder };
-		let callingCode_114: string;
-		export { callingCode_114 as callingCode };
-	}
-	namespace KE {
-		let placeholder_115: string;
-		export { placeholder_115 as placeholder };
-		let callingCode_115: string;
-		export { callingCode_115 as callingCode };
-	}
-	namespace KG {
-		let placeholder_116: string;
-		export { placeholder_116 as placeholder };
-		let callingCode_116: string;
-		export { callingCode_116 as callingCode };
-	}
-	namespace KH {
-		let placeholder_117: string;
-		export { placeholder_117 as placeholder };
-		let callingCode_117: string;
-		export { callingCode_117 as callingCode };
-	}
-	namespace KI {
-		let placeholder_118: string;
-		export { placeholder_118 as placeholder };
-		let callingCode_118: string;
-		export { callingCode_118 as callingCode };
-	}
-	namespace KM {
-		let placeholder_119: string;
-		export { placeholder_119 as placeholder };
-		let callingCode_119: string;
-		export { callingCode_119 as callingCode };
-	}
-	namespace KN {
-		let placeholder_120: string;
-		export { placeholder_120 as placeholder };
-		let callingCode_120: string;
-		export { callingCode_120 as callingCode };
-	}
-	namespace KP {
-		let placeholder_121: string;
-		export { placeholder_121 as placeholder };
-		let callingCode_121: string;
-		export { callingCode_121 as callingCode };
-	}
-	namespace KR {
-		let placeholder_122: string;
-		export { placeholder_122 as placeholder };
-		let callingCode_122: string;
-		export { callingCode_122 as callingCode };
-	}
-	namespace KW {
-		let placeholder_123: string;
-		export { placeholder_123 as placeholder };
-		let callingCode_123: string;
-		export { callingCode_123 as callingCode };
-	}
-	namespace KY {
-		let placeholder_124: string;
-		export { placeholder_124 as placeholder };
-		let callingCode_124: string;
-		export { callingCode_124 as callingCode };
-	}
-	namespace KZ {
-		let placeholder_125: string;
-		export { placeholder_125 as placeholder };
-		let callingCode_125: string;
-		export { callingCode_125 as callingCode };
-	}
-	namespace LA {
-		let placeholder_126: string;
-		export { placeholder_126 as placeholder };
-		let callingCode_126: string;
-		export { callingCode_126 as callingCode };
-	}
-	namespace LB {
-		let placeholder_127: string;
-		export { placeholder_127 as placeholder };
-		let callingCode_127: string;
-		export { callingCode_127 as callingCode };
-	}
-	namespace LC {
-		let placeholder_128: string;
-		export { placeholder_128 as placeholder };
-		let callingCode_128: string;
-		export { callingCode_128 as callingCode };
-	}
-	namespace LI {
-		let placeholder_129: string;
-		export { placeholder_129 as placeholder };
-		let callingCode_129: string;
-		export { callingCode_129 as callingCode };
-	}
-	namespace LK {
-		let placeholder_130: string;
-		export { placeholder_130 as placeholder };
-		let callingCode_130: string;
-		export { callingCode_130 as callingCode };
-	}
-	namespace LR {
-		let placeholder_131: string;
-		export { placeholder_131 as placeholder };
-		let callingCode_131: string;
-		export { callingCode_131 as callingCode };
-	}
-	namespace LS {
-		let placeholder_132: string;
-		export { placeholder_132 as placeholder };
-		let callingCode_132: string;
-		export { callingCode_132 as callingCode };
-	}
-	namespace LT {
-		let placeholder_133: string;
-		export { placeholder_133 as placeholder };
-		let callingCode_133: string;
-		export { callingCode_133 as callingCode };
-	}
-	namespace LU {
-		let placeholder_134: string;
-		export { placeholder_134 as placeholder };
-		let callingCode_134: string;
-		export { callingCode_134 as callingCode };
-	}
-	namespace LV {
-		let placeholder_135: string;
-		export { placeholder_135 as placeholder };
-		let callingCode_135: string;
-		export { callingCode_135 as callingCode };
-	}
-	namespace LY {
-		let placeholder_136: string;
-		export { placeholder_136 as placeholder };
-		let callingCode_136: string;
-		export { callingCode_136 as callingCode };
-	}
-	namespace MA {
-		let placeholder_137: string;
-		export { placeholder_137 as placeholder };
-		let callingCode_137: string;
-		export { callingCode_137 as callingCode };
-	}
-	namespace MC {
-		let placeholder_138: string;
-		export { placeholder_138 as placeholder };
-		let callingCode_138: string;
-		export { callingCode_138 as callingCode };
-	}
-	namespace MD {
-		let placeholder_139: string;
-		export { placeholder_139 as placeholder };
-		let callingCode_139: string;
-		export { callingCode_139 as callingCode };
-	}
-	namespace ME {
-		let placeholder_140: string;
-		export { placeholder_140 as placeholder };
-		let callingCode_140: string;
-		export { callingCode_140 as callingCode };
-	}
-	namespace MF {
-		let placeholder_141: string;
-		export { placeholder_141 as placeholder };
-		let callingCode_141: string;
-		export { callingCode_141 as callingCode };
-	}
-	namespace MG {
-		let placeholder_142: string;
-		export { placeholder_142 as placeholder };
-		let callingCode_142: string;
-		export { callingCode_142 as callingCode };
-	}
-	namespace MH {
-		let placeholder_143: string;
-		export { placeholder_143 as placeholder };
-		let callingCode_143: string;
-		export { callingCode_143 as callingCode };
-	}
-	namespace MK {
-		let placeholder_144: string;
-		export { placeholder_144 as placeholder };
-		let callingCode_144: string;
-		export { callingCode_144 as callingCode };
-	}
-	namespace ML {
-		let placeholder_145: string;
-		export { placeholder_145 as placeholder };
-		let callingCode_145: string;
-		export { callingCode_145 as callingCode };
-	}
-	namespace MM {
-		let placeholder_146: string;
-		export { placeholder_146 as placeholder };
-		let callingCode_146: string;
-		export { callingCode_146 as callingCode };
-	}
-	namespace MN {
-		let placeholder_147: string;
-		export { placeholder_147 as placeholder };
-		let callingCode_147: string;
-		export { callingCode_147 as callingCode };
-	}
-	namespace MO {
-		let placeholder_148: string;
-		export { placeholder_148 as placeholder };
-		let callingCode_148: string;
-		export { callingCode_148 as callingCode };
-	}
-	namespace MP {
-		let placeholder_149: string;
-		export { placeholder_149 as placeholder };
-		let callingCode_149: string;
-		export { callingCode_149 as callingCode };
-	}
-	namespace MQ {
-		let placeholder_150: string;
-		export { placeholder_150 as placeholder };
-		let callingCode_150: string;
-		export { callingCode_150 as callingCode };
-	}
-	namespace MR {
-		let placeholder_151: string;
-		export { placeholder_151 as placeholder };
-		let callingCode_151: string;
-		export { callingCode_151 as callingCode };
-	}
-	namespace MS {
-		let placeholder_152: string;
-		export { placeholder_152 as placeholder };
-		let callingCode_152: string;
-		export { callingCode_152 as callingCode };
-	}
-	namespace MT {
-		let placeholder_153: string;
-		export { placeholder_153 as placeholder };
-		let callingCode_153: string;
-		export { callingCode_153 as callingCode };
-	}
-	namespace MU {
-		let placeholder_154: string;
-		export { placeholder_154 as placeholder };
-		let callingCode_154: string;
-		export { callingCode_154 as callingCode };
-	}
-	namespace MV {
-		let placeholder_155: string;
-		export { placeholder_155 as placeholder };
-		let callingCode_155: string;
-		export { callingCode_155 as callingCode };
-	}
-	namespace MW {
-		let placeholder_156: string;
-		export { placeholder_156 as placeholder };
-		let callingCode_156: string;
-		export { callingCode_156 as callingCode };
-	}
-	namespace MX {
-		let placeholder_157: string;
-		export { placeholder_157 as placeholder };
-		let callingCode_157: string;
-		export { callingCode_157 as callingCode };
-	}
-	namespace MY {
-		let placeholder_158: string;
-		export { placeholder_158 as placeholder };
-		let callingCode_158: string;
-		export { callingCode_158 as callingCode };
-	}
-	namespace MZ {
-		let placeholder_159: string;
-		export { placeholder_159 as placeholder };
-		let callingCode_159: string;
-		export { callingCode_159 as callingCode };
-	}
-	namespace NA {
-		let placeholder_160: string;
-		export { placeholder_160 as placeholder };
-		let callingCode_160: string;
-		export { callingCode_160 as callingCode };
-	}
-	namespace NC {
-		let placeholder_161: string;
-		export { placeholder_161 as placeholder };
-		let callingCode_161: string;
-		export { callingCode_161 as callingCode };
-	}
-	namespace NE {
-		let placeholder_162: string;
-		export { placeholder_162 as placeholder };
-		let callingCode_162: string;
-		export { callingCode_162 as callingCode };
-	}
-	namespace NF {
-		let placeholder_163: string;
-		export { placeholder_163 as placeholder };
-		let callingCode_163: string;
-		export { callingCode_163 as callingCode };
-	}
-	namespace NG {
-		let placeholder_164: string;
-		export { placeholder_164 as placeholder };
-		let callingCode_164: string;
-		export { callingCode_164 as callingCode };
-	}
-	namespace NI {
-		let placeholder_165: string;
-		export { placeholder_165 as placeholder };
-		let callingCode_165: string;
-		export { callingCode_165 as callingCode };
-	}
-	namespace NL {
-		let placeholder_166: string;
-		export { placeholder_166 as placeholder };
-		let callingCode_166: string;
-		export { callingCode_166 as callingCode };
-	}
-	namespace NO {
-		let placeholder_167: string;
-		export { placeholder_167 as placeholder };
-		let callingCode_167: string;
-		export { callingCode_167 as callingCode };
-	}
-	namespace NP {
-		let placeholder_168: string;
-		export { placeholder_168 as placeholder };
-		let callingCode_168: string;
-		export { callingCode_168 as callingCode };
-	}
-	namespace NR {
-		let placeholder_169: string;
-		export { placeholder_169 as placeholder };
-		let callingCode_169: string;
-		export { callingCode_169 as callingCode };
-	}
-	namespace NU {
-		let placeholder_170: string;
-		export { placeholder_170 as placeholder };
-		let callingCode_170: string;
-		export { callingCode_170 as callingCode };
-	}
-	namespace NZ {
-		let placeholder_171: string;
-		export { placeholder_171 as placeholder };
-		let callingCode_171: string;
-		export { callingCode_171 as callingCode };
-	}
-	namespace OM {
-		let placeholder_172: string;
-		export { placeholder_172 as placeholder };
-		let callingCode_172: string;
-		export { callingCode_172 as callingCode };
-	}
-	namespace PA {
-		let placeholder_173: string;
-		export { placeholder_173 as placeholder };
-		let callingCode_173: string;
-		export { callingCode_173 as callingCode };
-	}
-	namespace PE {
-		let placeholder_174: string;
-		export { placeholder_174 as placeholder };
-		let callingCode_174: string;
-		export { callingCode_174 as callingCode };
-	}
-	namespace PF {
-		let placeholder_175: string;
-		export { placeholder_175 as placeholder };
-		let callingCode_175: string;
-		export { callingCode_175 as callingCode };
-	}
-	namespace PG {
-		let placeholder_176: string;
-		export { placeholder_176 as placeholder };
-		let callingCode_176: string;
-		export { callingCode_176 as callingCode };
-	}
-	namespace PH {
-		let placeholder_177: string;
-		export { placeholder_177 as placeholder };
-		let callingCode_177: string;
-		export { callingCode_177 as callingCode };
-	}
-	namespace PK {
-		let placeholder_178: string;
-		export { placeholder_178 as placeholder };
-		let callingCode_178: string;
-		export { callingCode_178 as callingCode };
-	}
-	namespace PL {
-		let placeholder_179: string;
-		export { placeholder_179 as placeholder };
-		let callingCode_179: string;
-		export { callingCode_179 as callingCode };
-	}
-	namespace PM {
-		let placeholder_180: string;
-		export { placeholder_180 as placeholder };
-		let callingCode_180: string;
-		export { callingCode_180 as callingCode };
-	}
-	namespace PN {
-		let placeholder_181: string;
-		export { placeholder_181 as placeholder };
-		let callingCode_181: string;
-		export { callingCode_181 as callingCode };
-	}
-	namespace PR {
-		let placeholder_182: string;
-		export { placeholder_182 as placeholder };
-		let callingCode_182: string;
-		export { callingCode_182 as callingCode };
-	}
-	namespace PS {
-		let placeholder_183: string;
-		export { placeholder_183 as placeholder };
-		let callingCode_183: string;
-		export { callingCode_183 as callingCode };
-	}
-	namespace PT {
-		let placeholder_184: string;
-		export { placeholder_184 as placeholder };
-		let callingCode_184: string;
-		export { callingCode_184 as callingCode };
-	}
-	namespace PW {
-		let placeholder_185: string;
-		export { placeholder_185 as placeholder };
-		let callingCode_185: string;
-		export { callingCode_185 as callingCode };
-	}
-	namespace PY {
-		let placeholder_186: string;
-		export { placeholder_186 as placeholder };
-		let callingCode_186: string;
-		export { callingCode_186 as callingCode };
-	}
-	namespace QA {
-		let placeholder_187: string;
-		export { placeholder_187 as placeholder };
-		let callingCode_187: string;
-		export { callingCode_187 as callingCode };
-	}
-	namespace RE {
-		let placeholder_188: string;
-		export { placeholder_188 as placeholder };
-		let callingCode_188: string;
-		export { callingCode_188 as callingCode };
-	}
-	namespace RO {
-		let placeholder_189: string;
-		export { placeholder_189 as placeholder };
-		let callingCode_189: string;
-		export { callingCode_189 as callingCode };
-	}
-	namespace RS {
-		let placeholder_190: string;
-		export { placeholder_190 as placeholder };
-		let callingCode_190: string;
-		export { callingCode_190 as callingCode };
-	}
-	namespace RU {
-		let placeholder_191: string;
-		export { placeholder_191 as placeholder };
-		let callingCode_191: string;
-		export { callingCode_191 as callingCode };
-	}
-	namespace RW {
-		let placeholder_192: string;
-		export { placeholder_192 as placeholder };
-		let callingCode_192: string;
-		export { callingCode_192 as callingCode };
-	}
-	namespace SA {
-		let placeholder_193: string;
-		export { placeholder_193 as placeholder };
-		let callingCode_193: string;
-		export { callingCode_193 as callingCode };
-	}
-	namespace SB {
-		let placeholder_194: string;
-		export { placeholder_194 as placeholder };
-		let callingCode_194: string;
-		export { callingCode_194 as callingCode };
-	}
-	namespace SC {
-		let placeholder_195: string;
-		export { placeholder_195 as placeholder };
-		let callingCode_195: string;
-		export { callingCode_195 as callingCode };
-	}
-	namespace SD {
-		let placeholder_196: string;
-		export { placeholder_196 as placeholder };
-		let callingCode_196: string;
-		export { callingCode_196 as callingCode };
-	}
-	namespace SE {
-		let placeholder_197: string;
-		export { placeholder_197 as placeholder };
-		let callingCode_197: string;
-		export { callingCode_197 as callingCode };
-	}
-	namespace SG {
-		let placeholder_198: string;
-		export { placeholder_198 as placeholder };
-		let callingCode_198: string;
-		export { callingCode_198 as callingCode };
-	}
-	namespace SH {
-		let placeholder_199: string;
-		export { placeholder_199 as placeholder };
-		let callingCode_199: string;
-		export { callingCode_199 as callingCode };
-	}
-	namespace SI {
-		let placeholder_200: string;
-		export { placeholder_200 as placeholder };
-		let callingCode_200: string;
-		export { callingCode_200 as callingCode };
-	}
-	namespace SJ {
-		let placeholder_201: string;
-		export { placeholder_201 as placeholder };
-		let callingCode_201: string;
-		export { callingCode_201 as callingCode };
-	}
-	namespace SK {
-		let placeholder_202: string;
-		export { placeholder_202 as placeholder };
-		let callingCode_202: string;
-		export { callingCode_202 as callingCode };
-	}
-	namespace SL {
-		let placeholder_203: string;
-		export { placeholder_203 as placeholder };
-		let callingCode_203: string;
-		export { callingCode_203 as callingCode };
-	}
-	namespace SM {
-		let placeholder_204: string;
-		export { placeholder_204 as placeholder };
-		let callingCode_204: string;
-		export { callingCode_204 as callingCode };
-	}
-	namespace SN {
-		let placeholder_205: string;
-		export { placeholder_205 as placeholder };
-		let callingCode_205: string;
-		export { callingCode_205 as callingCode };
-	}
-	namespace SO {
-		let placeholder_206: string;
-		export { placeholder_206 as placeholder };
-		let callingCode_206: string;
-		export { callingCode_206 as callingCode };
-	}
-	namespace SR {
-		let placeholder_207: string;
-		export { placeholder_207 as placeholder };
-		let callingCode_207: string;
-		export { callingCode_207 as callingCode };
-	}
-	namespace SS {
-		let placeholder_208: string;
-		export { placeholder_208 as placeholder };
-		let callingCode_208: string;
-		export { callingCode_208 as callingCode };
-	}
-	namespace ST {
-		let placeholder_209: string;
-		export { placeholder_209 as placeholder };
-		let callingCode_209: string;
-		export { callingCode_209 as callingCode };
-	}
-	namespace SV {
-		let placeholder_210: string;
-		export { placeholder_210 as placeholder };
-		let callingCode_210: string;
-		export { callingCode_210 as callingCode };
-	}
-	namespace SX {
-		let placeholder_211: string;
-		export { placeholder_211 as placeholder };
-		let callingCode_211: string;
-		export { callingCode_211 as callingCode };
-	}
-	namespace SY {
-		let placeholder_212: string;
-		export { placeholder_212 as placeholder };
-		let callingCode_212: string;
-		export { callingCode_212 as callingCode };
-	}
-	namespace SZ {
-		let placeholder_213: string;
-		export { placeholder_213 as placeholder };
-		let callingCode_213: string;
-		export { callingCode_213 as callingCode };
-	}
-	namespace TA {
-		let placeholder_214: string;
-		export { placeholder_214 as placeholder };
-		let callingCode_214: string;
-		export { callingCode_214 as callingCode };
-	}
-	namespace TC {
-		let placeholder_215: string;
-		export { placeholder_215 as placeholder };
-		let callingCode_215: string;
-		export { callingCode_215 as callingCode };
-	}
-	namespace TD {
-		let placeholder_216: string;
-		export { placeholder_216 as placeholder };
-		let callingCode_216: string;
-		export { callingCode_216 as callingCode };
-	}
-	namespace TF {
-		let placeholder_217: string;
-		export { placeholder_217 as placeholder };
-		let callingCode_217: string;
-		export { callingCode_217 as callingCode };
-	}
-	namespace TG {
-		let placeholder_218: string;
-		export { placeholder_218 as placeholder };
-		let callingCode_218: string;
-		export { callingCode_218 as callingCode };
-	}
-	namespace TH {
-		let placeholder_219: string;
-		export { placeholder_219 as placeholder };
-		let callingCode_219: string;
-		export { callingCode_219 as callingCode };
-	}
-	namespace TJ {
-		let placeholder_220: string;
-		export { placeholder_220 as placeholder };
-		let callingCode_220: string;
-		export { callingCode_220 as callingCode };
-	}
-	namespace TK {
-		let placeholder_221: string;
-		export { placeholder_221 as placeholder };
-		let callingCode_221: string;
-		export { callingCode_221 as callingCode };
-	}
-	namespace TL {
-		let placeholder_222: string;
-		export { placeholder_222 as placeholder };
-		let callingCode_222: string;
-		export { callingCode_222 as callingCode };
-	}
-	namespace TM {
-		let placeholder_223: string;
-		export { placeholder_223 as placeholder };
-		let callingCode_223: string;
-		export { callingCode_223 as callingCode };
-	}
-	namespace TN {
-		let placeholder_224: string;
-		export { placeholder_224 as placeholder };
-		let callingCode_224: string;
-		export { callingCode_224 as callingCode };
-	}
-	namespace TO {
-		let placeholder_225: string;
-		export { placeholder_225 as placeholder };
-		let callingCode_225: string;
-		export { callingCode_225 as callingCode };
-	}
-	namespace TR {
-		let placeholder_226: string;
-		export { placeholder_226 as placeholder };
-		let callingCode_226: string;
-		export { callingCode_226 as callingCode };
-	}
-	namespace TT {
-		let placeholder_227: string;
-		export { placeholder_227 as placeholder };
-		let callingCode_227: string;
-		export { callingCode_227 as callingCode };
-	}
-	namespace TV {
-		let placeholder_228: string;
-		export { placeholder_228 as placeholder };
-		let callingCode_228: string;
-		export { callingCode_228 as callingCode };
-	}
-	namespace TW {
-		let placeholder_229: string;
-		export { placeholder_229 as placeholder };
-		let callingCode_229: string;
-		export { callingCode_229 as callingCode };
-	}
-	namespace TZ {
-		let placeholder_230: string;
-		export { placeholder_230 as placeholder };
-		let callingCode_230: string;
-		export { callingCode_230 as callingCode };
-	}
-	namespace UA {
-		let placeholder_231: string;
-		export { placeholder_231 as placeholder };
-		let callingCode_231: string;
-		export { callingCode_231 as callingCode };
-	}
-	namespace UG {
-		let placeholder_232: string;
-		export { placeholder_232 as placeholder };
-		let callingCode_232: string;
-		export { callingCode_232 as callingCode };
-	}
-	namespace US {
-		let placeholder_233: string;
-		export { placeholder_233 as placeholder };
-		let callingCode_233: string;
-		export { callingCode_233 as callingCode };
-	}
-	namespace UY {
-		let placeholder_234: string;
-		export { placeholder_234 as placeholder };
-		let callingCode_234: string;
-		export { callingCode_234 as callingCode };
-	}
-	namespace UZ {
-		let placeholder_235: string;
-		export { placeholder_235 as placeholder };
-		let callingCode_235: string;
-		export { callingCode_235 as callingCode };
-	}
-	namespace VA {
-		let placeholder_236: string;
-		export { placeholder_236 as placeholder };
-		let callingCode_236: string;
-		export { callingCode_236 as callingCode };
-	}
-	namespace VC {
-		let placeholder_237: string;
-		export { placeholder_237 as placeholder };
-		let callingCode_237: string;
-		export { callingCode_237 as callingCode };
-	}
-	namespace VE {
-		let placeholder_238: string;
-		export { placeholder_238 as placeholder };
-		let callingCode_238: string;
-		export { callingCode_238 as callingCode };
-	}
-	namespace VG {
-		let placeholder_239: string;
-		export { placeholder_239 as placeholder };
-		let callingCode_239: string;
-		export { callingCode_239 as callingCode };
-	}
-	namespace VI {
-		let placeholder_240: string;
-		export { placeholder_240 as placeholder };
-		let callingCode_240: string;
-		export { callingCode_240 as callingCode };
-	}
-	namespace VN {
-		let placeholder_241: string;
-		export { placeholder_241 as placeholder };
-		let callingCode_241: string;
-		export { callingCode_241 as callingCode };
-	}
-	namespace VU {
-		let placeholder_242: string;
-		export { placeholder_242 as placeholder };
-		let callingCode_242: string;
-		export { callingCode_242 as callingCode };
-	}
-	namespace WF {
-		let placeholder_243: string;
-		export { placeholder_243 as placeholder };
-		let callingCode_243: string;
-		export { callingCode_243 as callingCode };
-	}
-	namespace WS {
-		let placeholder_244: string;
-		export { placeholder_244 as placeholder };
-		let callingCode_244: string;
-		export { callingCode_244 as callingCode };
-	}
-	namespace XK {
-		let placeholder_245: string;
-		export { placeholder_245 as placeholder };
-		let callingCode_245: string;
-		export { callingCode_245 as callingCode };
-	}
-	namespace YE {
-		let placeholder_246: string;
-		export { placeholder_246 as placeholder };
-		let callingCode_246: string;
-		export { callingCode_246 as callingCode };
-	}
-	namespace YT {
-		let placeholder_247: string;
-		export { placeholder_247 as placeholder };
-		let callingCode_247: string;
-		export { callingCode_247 as callingCode };
-	}
-	namespace ZA {
-		let placeholder_248: string;
-		export { placeholder_248 as placeholder };
-		let callingCode_248: string;
-		export { callingCode_248 as callingCode };
-	}
-	namespace ZM {
-		let placeholder_249: string;
-		export { placeholder_249 as placeholder };
-		let callingCode_249: string;
-		export { callingCode_249 as callingCode };
-	}
-	namespace ZW {
-		let placeholder_250: string;
-		export { placeholder_250 as placeholder };
-		let callingCode_250: string;
-		export { callingCode_250 as callingCode };
-	}
+    namespace AC {
+        let placeholder: string;
+        let callingCode: string;
+    }
+    namespace AD {
+        let placeholder_1: string;
+        export { placeholder_1 as placeholder };
+        let callingCode_1: string;
+        export { callingCode_1 as callingCode };
+    }
+    namespace AE {
+        let placeholder_2: string;
+        export { placeholder_2 as placeholder };
+        let callingCode_2: string;
+        export { callingCode_2 as callingCode };
+    }
+    namespace AF {
+        let placeholder_3: string;
+        export { placeholder_3 as placeholder };
+        let callingCode_3: string;
+        export { callingCode_3 as callingCode };
+    }
+    namespace AG {
+        let placeholder_4: string;
+        export { placeholder_4 as placeholder };
+        let callingCode_4: string;
+        export { callingCode_4 as callingCode };
+    }
+    namespace AI {
+        let placeholder_5: string;
+        export { placeholder_5 as placeholder };
+        let callingCode_5: string;
+        export { callingCode_5 as callingCode };
+    }
+    namespace AL {
+        let placeholder_6: string;
+        export { placeholder_6 as placeholder };
+        let callingCode_6: string;
+        export { callingCode_6 as callingCode };
+    }
+    namespace AM {
+        let placeholder_7: string;
+        export { placeholder_7 as placeholder };
+        let callingCode_7: string;
+        export { callingCode_7 as callingCode };
+    }
+    namespace AN {
+        let placeholder_8: string;
+        export { placeholder_8 as placeholder };
+        let callingCode_8: string;
+        export { callingCode_8 as callingCode };
+    }
+    namespace AO {
+        let placeholder_9: string;
+        export { placeholder_9 as placeholder };
+        let callingCode_9: string;
+        export { callingCode_9 as callingCode };
+    }
+    namespace AQ {
+        let placeholder_10: string;
+        export { placeholder_10 as placeholder };
+        let callingCode_10: string;
+        export { callingCode_10 as callingCode };
+    }
+    namespace AR {
+        let placeholder_11: string;
+        export { placeholder_11 as placeholder };
+        let callingCode_11: string;
+        export { callingCode_11 as callingCode };
+    }
+    namespace AS {
+        let placeholder_12: string;
+        export { placeholder_12 as placeholder };
+        let callingCode_12: string;
+        export { callingCode_12 as callingCode };
+    }
+    namespace AT {
+        let placeholder_13: string;
+        export { placeholder_13 as placeholder };
+        let callingCode_13: string;
+        export { callingCode_13 as callingCode };
+    }
+    namespace AU {
+        let placeholder_14: string;
+        export { placeholder_14 as placeholder };
+        let callingCode_14: string;
+        export { callingCode_14 as callingCode };
+    }
+    namespace AW {
+        let placeholder_15: string;
+        export { placeholder_15 as placeholder };
+        let callingCode_15: string;
+        export { callingCode_15 as callingCode };
+    }
+    namespace AX {
+        let placeholder_16: string;
+        export { placeholder_16 as placeholder };
+        let callingCode_16: string;
+        export { callingCode_16 as callingCode };
+    }
+    namespace AZ {
+        let placeholder_17: string;
+        export { placeholder_17 as placeholder };
+        let callingCode_17: string;
+        export { callingCode_17 as callingCode };
+    }
+    namespace BA {
+        let placeholder_18: string;
+        export { placeholder_18 as placeholder };
+        let callingCode_18: string;
+        export { callingCode_18 as callingCode };
+    }
+    namespace BB {
+        let placeholder_19: string;
+        export { placeholder_19 as placeholder };
+        let callingCode_19: string;
+        export { callingCode_19 as callingCode };
+    }
+    namespace BD {
+        let placeholder_20: string;
+        export { placeholder_20 as placeholder };
+        let callingCode_20: string;
+        export { callingCode_20 as callingCode };
+    }
+    namespace BE {
+        let placeholder_21: string;
+        export { placeholder_21 as placeholder };
+        let callingCode_21: string;
+        export { callingCode_21 as callingCode };
+    }
+    namespace BF {
+        let placeholder_22: string;
+        export { placeholder_22 as placeholder };
+        let callingCode_22: string;
+        export { callingCode_22 as callingCode };
+    }
+    namespace BG {
+        let placeholder_23: string;
+        export { placeholder_23 as placeholder };
+        let callingCode_23: string;
+        export { callingCode_23 as callingCode };
+    }
+    namespace BH {
+        let placeholder_24: string;
+        export { placeholder_24 as placeholder };
+        let callingCode_24: string;
+        export { callingCode_24 as callingCode };
+    }
+    namespace BI {
+        let placeholder_25: string;
+        export { placeholder_25 as placeholder };
+        let callingCode_25: string;
+        export { callingCode_25 as callingCode };
+    }
+    namespace BJ {
+        let placeholder_26: string;
+        export { placeholder_26 as placeholder };
+        let callingCode_26: string;
+        export { callingCode_26 as callingCode };
+    }
+    namespace BL {
+        let placeholder_27: string;
+        export { placeholder_27 as placeholder };
+        let callingCode_27: string;
+        export { callingCode_27 as callingCode };
+    }
+    namespace BM {
+        let placeholder_28: string;
+        export { placeholder_28 as placeholder };
+        let callingCode_28: string;
+        export { callingCode_28 as callingCode };
+    }
+    namespace BN {
+        let placeholder_29: string;
+        export { placeholder_29 as placeholder };
+        let callingCode_29: string;
+        export { callingCode_29 as callingCode };
+    }
+    namespace BO {
+        let placeholder_30: string;
+        export { placeholder_30 as placeholder };
+        let callingCode_30: string;
+        export { callingCode_30 as callingCode };
+    }
+    namespace BQ {
+        let placeholder_31: string;
+        export { placeholder_31 as placeholder };
+        let callingCode_31: string;
+        export { callingCode_31 as callingCode };
+    }
+    namespace BR {
+        let placeholder_32: string;
+        export { placeholder_32 as placeholder };
+        let callingCode_32: string;
+        export { callingCode_32 as callingCode };
+    }
+    namespace BS {
+        let placeholder_33: string;
+        export { placeholder_33 as placeholder };
+        let callingCode_33: string;
+        export { callingCode_33 as callingCode };
+    }
+    namespace BT {
+        let placeholder_34: string;
+        export { placeholder_34 as placeholder };
+        let callingCode_34: string;
+        export { callingCode_34 as callingCode };
+    }
+    namespace BW {
+        let placeholder_35: string;
+        export { placeholder_35 as placeholder };
+        let callingCode_35: string;
+        export { callingCode_35 as callingCode };
+    }
+    namespace BY {
+        let placeholder_36: string;
+        export { placeholder_36 as placeholder };
+        let callingCode_36: string;
+        export { callingCode_36 as callingCode };
+    }
+    namespace BZ {
+        let placeholder_37: string;
+        export { placeholder_37 as placeholder };
+        let callingCode_37: string;
+        export { callingCode_37 as callingCode };
+    }
+    namespace CA {
+        let placeholder_38: string;
+        export { placeholder_38 as placeholder };
+        let callingCode_38: string;
+        export { callingCode_38 as callingCode };
+    }
+    namespace CC {
+        let placeholder_39: string;
+        export { placeholder_39 as placeholder };
+        let callingCode_39: string;
+        export { callingCode_39 as callingCode };
+    }
+    namespace CD {
+        let placeholder_40: string;
+        export { placeholder_40 as placeholder };
+        let callingCode_40: string;
+        export { callingCode_40 as callingCode };
+    }
+    namespace CF {
+        let placeholder_41: string;
+        export { placeholder_41 as placeholder };
+        let callingCode_41: string;
+        export { callingCode_41 as callingCode };
+    }
+    namespace CG {
+        let placeholder_42: string;
+        export { placeholder_42 as placeholder };
+        let callingCode_42: string;
+        export { callingCode_42 as callingCode };
+    }
+    namespace CH {
+        let placeholder_43: string;
+        export { placeholder_43 as placeholder };
+        let callingCode_43: string;
+        export { callingCode_43 as callingCode };
+    }
+    namespace CI {
+        let placeholder_44: string;
+        export { placeholder_44 as placeholder };
+        let callingCode_44: string;
+        export { callingCode_44 as callingCode };
+    }
+    namespace CK {
+        let placeholder_45: string;
+        export { placeholder_45 as placeholder };
+        let callingCode_45: string;
+        export { callingCode_45 as callingCode };
+    }
+    namespace CL {
+        let placeholder_46: string;
+        export { placeholder_46 as placeholder };
+        let callingCode_46: string;
+        export { callingCode_46 as callingCode };
+    }
+    namespace CM {
+        let placeholder_47: string;
+        export { placeholder_47 as placeholder };
+        let callingCode_47: string;
+        export { callingCode_47 as callingCode };
+    }
+    namespace CN {
+        let placeholder_48: string;
+        export { placeholder_48 as placeholder };
+        let callingCode_48: string;
+        export { callingCode_48 as callingCode };
+    }
+    namespace CO {
+        let placeholder_49: string;
+        export { placeholder_49 as placeholder };
+        let callingCode_49: string;
+        export { callingCode_49 as callingCode };
+    }
+    namespace CR {
+        let placeholder_50: string;
+        export { placeholder_50 as placeholder };
+        let callingCode_50: string;
+        export { callingCode_50 as callingCode };
+    }
+    namespace CU {
+        let placeholder_51: string;
+        export { placeholder_51 as placeholder };
+        let callingCode_51: string;
+        export { callingCode_51 as callingCode };
+    }
+    namespace CV {
+        let placeholder_52: string;
+        export { placeholder_52 as placeholder };
+        let callingCode_52: string;
+        export { callingCode_52 as callingCode };
+    }
+    namespace CW {
+        let placeholder_53: string;
+        export { placeholder_53 as placeholder };
+        let callingCode_53: string;
+        export { callingCode_53 as callingCode };
+    }
+    namespace CX {
+        let placeholder_54: string;
+        export { placeholder_54 as placeholder };
+        let callingCode_54: string;
+        export { callingCode_54 as callingCode };
+    }
+    namespace CY {
+        let placeholder_55: string;
+        export { placeholder_55 as placeholder };
+        let callingCode_55: string;
+        export { callingCode_55 as callingCode };
+    }
+    namespace CZ {
+        let placeholder_56: string;
+        export { placeholder_56 as placeholder };
+        let callingCode_56: string;
+        export { callingCode_56 as callingCode };
+    }
+    namespace DE {
+        let placeholder_57: string;
+        export { placeholder_57 as placeholder };
+        let callingCode_57: string;
+        export { callingCode_57 as callingCode };
+    }
+    namespace DJ {
+        let placeholder_58: string;
+        export { placeholder_58 as placeholder };
+        let callingCode_58: string;
+        export { callingCode_58 as callingCode };
+    }
+    namespace DK {
+        let placeholder_59: string;
+        export { placeholder_59 as placeholder };
+        let callingCode_59: string;
+        export { callingCode_59 as callingCode };
+    }
+    namespace DM {
+        let placeholder_60: string;
+        export { placeholder_60 as placeholder };
+        let callingCode_60: string;
+        export { callingCode_60 as callingCode };
+    }
+    namespace DO {
+        let placeholder_61: string;
+        export { placeholder_61 as placeholder };
+        let callingCode_61: string;
+        export { callingCode_61 as callingCode };
+    }
+    namespace DZ {
+        let placeholder_62: string;
+        export { placeholder_62 as placeholder };
+        let callingCode_62: string;
+        export { callingCode_62 as callingCode };
+    }
+    namespace EC {
+        let placeholder_63: string;
+        export { placeholder_63 as placeholder };
+        let callingCode_63: string;
+        export { callingCode_63 as callingCode };
+    }
+    namespace EE {
+        let placeholder_64: string;
+        export { placeholder_64 as placeholder };
+        let callingCode_64: string;
+        export { callingCode_64 as callingCode };
+    }
+    namespace EG {
+        let placeholder_65: string;
+        export { placeholder_65 as placeholder };
+        let callingCode_65: string;
+        export { callingCode_65 as callingCode };
+    }
+    namespace EH {
+        let placeholder_66: string;
+        export { placeholder_66 as placeholder };
+        let callingCode_66: string;
+        export { callingCode_66 as callingCode };
+    }
+    namespace ER {
+        let placeholder_67: string;
+        export { placeholder_67 as placeholder };
+        let callingCode_67: string;
+        export { callingCode_67 as callingCode };
+    }
+    namespace ES {
+        let placeholder_68: string;
+        export { placeholder_68 as placeholder };
+        let callingCode_68: string;
+        export { callingCode_68 as callingCode };
+    }
+    namespace ET {
+        let placeholder_69: string;
+        export { placeholder_69 as placeholder };
+        let callingCode_69: string;
+        export { callingCode_69 as callingCode };
+    }
+    namespace FI {
+        let placeholder_70: string;
+        export { placeholder_70 as placeholder };
+        let callingCode_70: string;
+        export { callingCode_70 as callingCode };
+    }
+    namespace FJ {
+        let placeholder_71: string;
+        export { placeholder_71 as placeholder };
+        let callingCode_71: string;
+        export { callingCode_71 as callingCode };
+    }
+    namespace FK {
+        let placeholder_72: string;
+        export { placeholder_72 as placeholder };
+        let callingCode_72: string;
+        export { callingCode_72 as callingCode };
+    }
+    namespace FM {
+        let placeholder_73: string;
+        export { placeholder_73 as placeholder };
+        let callingCode_73: string;
+        export { callingCode_73 as callingCode };
+    }
+    namespace FO {
+        let placeholder_74: string;
+        export { placeholder_74 as placeholder };
+        let callingCode_74: string;
+        export { callingCode_74 as callingCode };
+    }
+    namespace FR {
+        let placeholder_75: string;
+        export { placeholder_75 as placeholder };
+        let callingCode_75: string;
+        export { callingCode_75 as callingCode };
+    }
+    namespace GA {
+        let placeholder_76: string;
+        export { placeholder_76 as placeholder };
+        let callingCode_76: string;
+        export { callingCode_76 as callingCode };
+    }
+    namespace GB {
+        let placeholder_77: string;
+        export { placeholder_77 as placeholder };
+        let callingCode_77: string;
+        export { callingCode_77 as callingCode };
+    }
+    namespace GD {
+        let placeholder_78: string;
+        export { placeholder_78 as placeholder };
+        let callingCode_78: string;
+        export { callingCode_78 as callingCode };
+    }
+    namespace GE {
+        let placeholder_79: string;
+        export { placeholder_79 as placeholder };
+        let callingCode_79: string;
+        export { callingCode_79 as callingCode };
+    }
+    namespace GF {
+        let placeholder_80: string;
+        export { placeholder_80 as placeholder };
+        let callingCode_80: string;
+        export { callingCode_80 as callingCode };
+    }
+    namespace GG {
+        let placeholder_81: string;
+        export { placeholder_81 as placeholder };
+        let callingCode_81: string;
+        export { callingCode_81 as callingCode };
+    }
+    namespace GH {
+        let placeholder_82: string;
+        export { placeholder_82 as placeholder };
+        let callingCode_82: string;
+        export { callingCode_82 as callingCode };
+    }
+    namespace GI {
+        let placeholder_83: string;
+        export { placeholder_83 as placeholder };
+        let callingCode_83: string;
+        export { callingCode_83 as callingCode };
+    }
+    namespace GL {
+        let placeholder_84: string;
+        export { placeholder_84 as placeholder };
+        let callingCode_84: string;
+        export { callingCode_84 as callingCode };
+    }
+    namespace GM {
+        let placeholder_85: string;
+        export { placeholder_85 as placeholder };
+        let callingCode_85: string;
+        export { callingCode_85 as callingCode };
+    }
+    namespace GN {
+        let placeholder_86: string;
+        export { placeholder_86 as placeholder };
+        let callingCode_86: string;
+        export { callingCode_86 as callingCode };
+    }
+    namespace GP {
+        let placeholder_87: string;
+        export { placeholder_87 as placeholder };
+        let callingCode_87: string;
+        export { callingCode_87 as callingCode };
+    }
+    namespace GQ {
+        let placeholder_88: string;
+        export { placeholder_88 as placeholder };
+        let callingCode_88: string;
+        export { callingCode_88 as callingCode };
+    }
+    namespace GR {
+        let placeholder_89: string;
+        export { placeholder_89 as placeholder };
+        let callingCode_89: string;
+        export { callingCode_89 as callingCode };
+    }
+    namespace GS {
+        let placeholder_90: string;
+        export { placeholder_90 as placeholder };
+        let callingCode_90: string;
+        export { callingCode_90 as callingCode };
+    }
+    namespace GT {
+        let placeholder_91: string;
+        export { placeholder_91 as placeholder };
+        let callingCode_91: string;
+        export { callingCode_91 as callingCode };
+    }
+    namespace GU {
+        let placeholder_92: string;
+        export { placeholder_92 as placeholder };
+        let callingCode_92: string;
+        export { callingCode_92 as callingCode };
+    }
+    namespace GW {
+        let placeholder_93: string;
+        export { placeholder_93 as placeholder };
+        let callingCode_93: string;
+        export { callingCode_93 as callingCode };
+    }
+    namespace GY {
+        let placeholder_94: string;
+        export { placeholder_94 as placeholder };
+        let callingCode_94: string;
+        export { callingCode_94 as callingCode };
+    }
+    namespace HK {
+        let placeholder_95: string;
+        export { placeholder_95 as placeholder };
+        let callingCode_95: string;
+        export { callingCode_95 as callingCode };
+    }
+    namespace HM {
+        let placeholder_96: string;
+        export { placeholder_96 as placeholder };
+        let callingCode_96: string;
+        export { callingCode_96 as callingCode };
+    }
+    namespace HN {
+        let placeholder_97: string;
+        export { placeholder_97 as placeholder };
+        let callingCode_97: string;
+        export { callingCode_97 as callingCode };
+    }
+    namespace HR {
+        let placeholder_98: string;
+        export { placeholder_98 as placeholder };
+        let callingCode_98: string;
+        export { callingCode_98 as callingCode };
+    }
+    namespace HT {
+        let placeholder_99: string;
+        export { placeholder_99 as placeholder };
+        let callingCode_99: string;
+        export { callingCode_99 as callingCode };
+    }
+    namespace HU {
+        let placeholder_100: string;
+        export { placeholder_100 as placeholder };
+        let callingCode_100: string;
+        export { callingCode_100 as callingCode };
+    }
+    namespace ID {
+        let placeholder_101: string;
+        export { placeholder_101 as placeholder };
+        let callingCode_101: string;
+        export { callingCode_101 as callingCode };
+    }
+    namespace IE {
+        let placeholder_102: string;
+        export { placeholder_102 as placeholder };
+        let callingCode_102: string;
+        export { callingCode_102 as callingCode };
+    }
+    namespace IL {
+        let placeholder_103: string;
+        export { placeholder_103 as placeholder };
+        let callingCode_103: string;
+        export { callingCode_103 as callingCode };
+    }
+    namespace IM {
+        let placeholder_104: string;
+        export { placeholder_104 as placeholder };
+        let callingCode_104: string;
+        export { callingCode_104 as callingCode };
+    }
+    namespace IN {
+        let placeholder_105: string;
+        export { placeholder_105 as placeholder };
+        let callingCode_105: string;
+        export { callingCode_105 as callingCode };
+    }
+    namespace IO {
+        let placeholder_106: string;
+        export { placeholder_106 as placeholder };
+        let callingCode_106: string;
+        export { callingCode_106 as callingCode };
+    }
+    namespace IQ {
+        let placeholder_107: string;
+        export { placeholder_107 as placeholder };
+        let callingCode_107: string;
+        export { callingCode_107 as callingCode };
+    }
+    namespace IR {
+        let placeholder_108: string;
+        export { placeholder_108 as placeholder };
+        let callingCode_108: string;
+        export { callingCode_108 as callingCode };
+    }
+    namespace IS {
+        let placeholder_109: string;
+        export { placeholder_109 as placeholder };
+        let callingCode_109: string;
+        export { callingCode_109 as callingCode };
+    }
+    namespace IT {
+        let placeholder_110: string;
+        export { placeholder_110 as placeholder };
+        let callingCode_110: string;
+        export { callingCode_110 as callingCode };
+    }
+    namespace JE {
+        let placeholder_111: string;
+        export { placeholder_111 as placeholder };
+        let callingCode_111: string;
+        export { callingCode_111 as callingCode };
+    }
+    namespace JM {
+        let placeholder_112: string;
+        export { placeholder_112 as placeholder };
+        let callingCode_112: string;
+        export { callingCode_112 as callingCode };
+    }
+    namespace JO {
+        let placeholder_113: string;
+        export { placeholder_113 as placeholder };
+        let callingCode_113: string;
+        export { callingCode_113 as callingCode };
+    }
+    namespace JP {
+        let placeholder_114: string;
+        export { placeholder_114 as placeholder };
+        let callingCode_114: string;
+        export { callingCode_114 as callingCode };
+    }
+    namespace KE {
+        let placeholder_115: string;
+        export { placeholder_115 as placeholder };
+        let callingCode_115: string;
+        export { callingCode_115 as callingCode };
+    }
+    namespace KG {
+        let placeholder_116: string;
+        export { placeholder_116 as placeholder };
+        let callingCode_116: string;
+        export { callingCode_116 as callingCode };
+    }
+    namespace KH {
+        let placeholder_117: string;
+        export { placeholder_117 as placeholder };
+        let callingCode_117: string;
+        export { callingCode_117 as callingCode };
+    }
+    namespace KI {
+        let placeholder_118: string;
+        export { placeholder_118 as placeholder };
+        let callingCode_118: string;
+        export { callingCode_118 as callingCode };
+    }
+    namespace KM {
+        let placeholder_119: string;
+        export { placeholder_119 as placeholder };
+        let callingCode_119: string;
+        export { callingCode_119 as callingCode };
+    }
+    namespace KN {
+        let placeholder_120: string;
+        export { placeholder_120 as placeholder };
+        let callingCode_120: string;
+        export { callingCode_120 as callingCode };
+    }
+    namespace KP {
+        let placeholder_121: string;
+        export { placeholder_121 as placeholder };
+        let callingCode_121: string;
+        export { callingCode_121 as callingCode };
+    }
+    namespace KR {
+        let placeholder_122: string;
+        export { placeholder_122 as placeholder };
+        let callingCode_122: string;
+        export { callingCode_122 as callingCode };
+    }
+    namespace KW {
+        let placeholder_123: string;
+        export { placeholder_123 as placeholder };
+        let callingCode_123: string;
+        export { callingCode_123 as callingCode };
+    }
+    namespace KY {
+        let placeholder_124: string;
+        export { placeholder_124 as placeholder };
+        let callingCode_124: string;
+        export { callingCode_124 as callingCode };
+    }
+    namespace KZ {
+        let placeholder_125: string;
+        export { placeholder_125 as placeholder };
+        let callingCode_125: string;
+        export { callingCode_125 as callingCode };
+    }
+    namespace LA {
+        let placeholder_126: string;
+        export { placeholder_126 as placeholder };
+        let callingCode_126: string;
+        export { callingCode_126 as callingCode };
+    }
+    namespace LB {
+        let placeholder_127: string;
+        export { placeholder_127 as placeholder };
+        let callingCode_127: string;
+        export { callingCode_127 as callingCode };
+    }
+    namespace LC {
+        let placeholder_128: string;
+        export { placeholder_128 as placeholder };
+        let callingCode_128: string;
+        export { callingCode_128 as callingCode };
+    }
+    namespace LI {
+        let placeholder_129: string;
+        export { placeholder_129 as placeholder };
+        let callingCode_129: string;
+        export { callingCode_129 as callingCode };
+    }
+    namespace LK {
+        let placeholder_130: string;
+        export { placeholder_130 as placeholder };
+        let callingCode_130: string;
+        export { callingCode_130 as callingCode };
+    }
+    namespace LR {
+        let placeholder_131: string;
+        export { placeholder_131 as placeholder };
+        let callingCode_131: string;
+        export { callingCode_131 as callingCode };
+    }
+    namespace LS {
+        let placeholder_132: string;
+        export { placeholder_132 as placeholder };
+        let callingCode_132: string;
+        export { callingCode_132 as callingCode };
+    }
+    namespace LT {
+        let placeholder_133: string;
+        export { placeholder_133 as placeholder };
+        let callingCode_133: string;
+        export { callingCode_133 as callingCode };
+    }
+    namespace LU {
+        let placeholder_134: string;
+        export { placeholder_134 as placeholder };
+        let callingCode_134: string;
+        export { callingCode_134 as callingCode };
+    }
+    namespace LV {
+        let placeholder_135: string;
+        export { placeholder_135 as placeholder };
+        let callingCode_135: string;
+        export { callingCode_135 as callingCode };
+    }
+    namespace LY {
+        let placeholder_136: string;
+        export { placeholder_136 as placeholder };
+        let callingCode_136: string;
+        export { callingCode_136 as callingCode };
+    }
+    namespace MA {
+        let placeholder_137: string;
+        export { placeholder_137 as placeholder };
+        let callingCode_137: string;
+        export { callingCode_137 as callingCode };
+    }
+    namespace MC {
+        let placeholder_138: string;
+        export { placeholder_138 as placeholder };
+        let callingCode_138: string;
+        export { callingCode_138 as callingCode };
+    }
+    namespace MD {
+        let placeholder_139: string;
+        export { placeholder_139 as placeholder };
+        let callingCode_139: string;
+        export { callingCode_139 as callingCode };
+    }
+    namespace ME {
+        let placeholder_140: string;
+        export { placeholder_140 as placeholder };
+        let callingCode_140: string;
+        export { callingCode_140 as callingCode };
+    }
+    namespace MF {
+        let placeholder_141: string;
+        export { placeholder_141 as placeholder };
+        let callingCode_141: string;
+        export { callingCode_141 as callingCode };
+    }
+    namespace MG {
+        let placeholder_142: string;
+        export { placeholder_142 as placeholder };
+        let callingCode_142: string;
+        export { callingCode_142 as callingCode };
+    }
+    namespace MH {
+        let placeholder_143: string;
+        export { placeholder_143 as placeholder };
+        let callingCode_143: string;
+        export { callingCode_143 as callingCode };
+    }
+    namespace MK {
+        let placeholder_144: string;
+        export { placeholder_144 as placeholder };
+        let callingCode_144: string;
+        export { callingCode_144 as callingCode };
+    }
+    namespace ML {
+        let placeholder_145: string;
+        export { placeholder_145 as placeholder };
+        let callingCode_145: string;
+        export { callingCode_145 as callingCode };
+    }
+    namespace MM {
+        let placeholder_146: string;
+        export { placeholder_146 as placeholder };
+        let callingCode_146: string;
+        export { callingCode_146 as callingCode };
+    }
+    namespace MN {
+        let placeholder_147: string;
+        export { placeholder_147 as placeholder };
+        let callingCode_147: string;
+        export { callingCode_147 as callingCode };
+    }
+    namespace MO {
+        let placeholder_148: string;
+        export { placeholder_148 as placeholder };
+        let callingCode_148: string;
+        export { callingCode_148 as callingCode };
+    }
+    namespace MP {
+        let placeholder_149: string;
+        export { placeholder_149 as placeholder };
+        let callingCode_149: string;
+        export { callingCode_149 as callingCode };
+    }
+    namespace MQ {
+        let placeholder_150: string;
+        export { placeholder_150 as placeholder };
+        let callingCode_150: string;
+        export { callingCode_150 as callingCode };
+    }
+    namespace MR {
+        let placeholder_151: string;
+        export { placeholder_151 as placeholder };
+        let callingCode_151: string;
+        export { callingCode_151 as callingCode };
+    }
+    namespace MS {
+        let placeholder_152: string;
+        export { placeholder_152 as placeholder };
+        let callingCode_152: string;
+        export { callingCode_152 as callingCode };
+    }
+    namespace MT {
+        let placeholder_153: string;
+        export { placeholder_153 as placeholder };
+        let callingCode_153: string;
+        export { callingCode_153 as callingCode };
+    }
+    namespace MU {
+        let placeholder_154: string;
+        export { placeholder_154 as placeholder };
+        let callingCode_154: string;
+        export { callingCode_154 as callingCode };
+    }
+    namespace MV {
+        let placeholder_155: string;
+        export { placeholder_155 as placeholder };
+        let callingCode_155: string;
+        export { callingCode_155 as callingCode };
+    }
+    namespace MW {
+        let placeholder_156: string;
+        export { placeholder_156 as placeholder };
+        let callingCode_156: string;
+        export { callingCode_156 as callingCode };
+    }
+    namespace MX {
+        let placeholder_157: string;
+        export { placeholder_157 as placeholder };
+        let callingCode_157: string;
+        export { callingCode_157 as callingCode };
+    }
+    namespace MY {
+        let placeholder_158: string;
+        export { placeholder_158 as placeholder };
+        let callingCode_158: string;
+        export { callingCode_158 as callingCode };
+    }
+    namespace MZ {
+        let placeholder_159: string;
+        export { placeholder_159 as placeholder };
+        let callingCode_159: string;
+        export { callingCode_159 as callingCode };
+    }
+    namespace NA {
+        let placeholder_160: string;
+        export { placeholder_160 as placeholder };
+        let callingCode_160: string;
+        export { callingCode_160 as callingCode };
+    }
+    namespace NC {
+        let placeholder_161: string;
+        export { placeholder_161 as placeholder };
+        let callingCode_161: string;
+        export { callingCode_161 as callingCode };
+    }
+    namespace NE {
+        let placeholder_162: string;
+        export { placeholder_162 as placeholder };
+        let callingCode_162: string;
+        export { callingCode_162 as callingCode };
+    }
+    namespace NF {
+        let placeholder_163: string;
+        export { placeholder_163 as placeholder };
+        let callingCode_163: string;
+        export { callingCode_163 as callingCode };
+    }
+    namespace NG {
+        let placeholder_164: string;
+        export { placeholder_164 as placeholder };
+        let callingCode_164: string;
+        export { callingCode_164 as callingCode };
+    }
+    namespace NI {
+        let placeholder_165: string;
+        export { placeholder_165 as placeholder };
+        let callingCode_165: string;
+        export { callingCode_165 as callingCode };
+    }
+    namespace NL {
+        let placeholder_166: string;
+        export { placeholder_166 as placeholder };
+        let callingCode_166: string;
+        export { callingCode_166 as callingCode };
+    }
+    namespace NO {
+        let placeholder_167: string;
+        export { placeholder_167 as placeholder };
+        let callingCode_167: string;
+        export { callingCode_167 as callingCode };
+    }
+    namespace NP {
+        let placeholder_168: string;
+        export { placeholder_168 as placeholder };
+        let callingCode_168: string;
+        export { callingCode_168 as callingCode };
+    }
+    namespace NR {
+        let placeholder_169: string;
+        export { placeholder_169 as placeholder };
+        let callingCode_169: string;
+        export { callingCode_169 as callingCode };
+    }
+    namespace NU {
+        let placeholder_170: string;
+        export { placeholder_170 as placeholder };
+        let callingCode_170: string;
+        export { callingCode_170 as callingCode };
+    }
+    namespace NZ {
+        let placeholder_171: string;
+        export { placeholder_171 as placeholder };
+        let callingCode_171: string;
+        export { callingCode_171 as callingCode };
+    }
+    namespace OM {
+        let placeholder_172: string;
+        export { placeholder_172 as placeholder };
+        let callingCode_172: string;
+        export { callingCode_172 as callingCode };
+    }
+    namespace PA {
+        let placeholder_173: string;
+        export { placeholder_173 as placeholder };
+        let callingCode_173: string;
+        export { callingCode_173 as callingCode };
+    }
+    namespace PE {
+        let placeholder_174: string;
+        export { placeholder_174 as placeholder };
+        let callingCode_174: string;
+        export { callingCode_174 as callingCode };
+    }
+    namespace PF {
+        let placeholder_175: string;
+        export { placeholder_175 as placeholder };
+        let callingCode_175: string;
+        export { callingCode_175 as callingCode };
+    }
+    namespace PG {
+        let placeholder_176: string;
+        export { placeholder_176 as placeholder };
+        let callingCode_176: string;
+        export { callingCode_176 as callingCode };
+    }
+    namespace PH {
+        let placeholder_177: string;
+        export { placeholder_177 as placeholder };
+        let callingCode_177: string;
+        export { callingCode_177 as callingCode };
+    }
+    namespace PK {
+        let placeholder_178: string;
+        export { placeholder_178 as placeholder };
+        let callingCode_178: string;
+        export { callingCode_178 as callingCode };
+    }
+    namespace PL {
+        let placeholder_179: string;
+        export { placeholder_179 as placeholder };
+        let callingCode_179: string;
+        export { callingCode_179 as callingCode };
+    }
+    namespace PM {
+        let placeholder_180: string;
+        export { placeholder_180 as placeholder };
+        let callingCode_180: string;
+        export { callingCode_180 as callingCode };
+    }
+    namespace PN {
+        let placeholder_181: string;
+        export { placeholder_181 as placeholder };
+        let callingCode_181: string;
+        export { callingCode_181 as callingCode };
+    }
+    namespace PR {
+        let placeholder_182: string;
+        export { placeholder_182 as placeholder };
+        let callingCode_182: string;
+        export { callingCode_182 as callingCode };
+    }
+    namespace PS {
+        let placeholder_183: string;
+        export { placeholder_183 as placeholder };
+        let callingCode_183: string;
+        export { callingCode_183 as callingCode };
+    }
+    namespace PT {
+        let placeholder_184: string;
+        export { placeholder_184 as placeholder };
+        let callingCode_184: string;
+        export { callingCode_184 as callingCode };
+    }
+    namespace PW {
+        let placeholder_185: string;
+        export { placeholder_185 as placeholder };
+        let callingCode_185: string;
+        export { callingCode_185 as callingCode };
+    }
+    namespace PY {
+        let placeholder_186: string;
+        export { placeholder_186 as placeholder };
+        let callingCode_186: string;
+        export { callingCode_186 as callingCode };
+    }
+    namespace QA {
+        let placeholder_187: string;
+        export { placeholder_187 as placeholder };
+        let callingCode_187: string;
+        export { callingCode_187 as callingCode };
+    }
+    namespace RE {
+        let placeholder_188: string;
+        export { placeholder_188 as placeholder };
+        let callingCode_188: string;
+        export { callingCode_188 as callingCode };
+    }
+    namespace RO {
+        let placeholder_189: string;
+        export { placeholder_189 as placeholder };
+        let callingCode_189: string;
+        export { callingCode_189 as callingCode };
+    }
+    namespace RS {
+        let placeholder_190: string;
+        export { placeholder_190 as placeholder };
+        let callingCode_190: string;
+        export { callingCode_190 as callingCode };
+    }
+    namespace RU {
+        let placeholder_191: string;
+        export { placeholder_191 as placeholder };
+        let callingCode_191: string;
+        export { callingCode_191 as callingCode };
+    }
+    namespace RW {
+        let placeholder_192: string;
+        export { placeholder_192 as placeholder };
+        let callingCode_192: string;
+        export { callingCode_192 as callingCode };
+    }
+    namespace SA {
+        let placeholder_193: string;
+        export { placeholder_193 as placeholder };
+        let callingCode_193: string;
+        export { callingCode_193 as callingCode };
+    }
+    namespace SB {
+        let placeholder_194: string;
+        export { placeholder_194 as placeholder };
+        let callingCode_194: string;
+        export { callingCode_194 as callingCode };
+    }
+    namespace SC {
+        let placeholder_195: string;
+        export { placeholder_195 as placeholder };
+        let callingCode_195: string;
+        export { callingCode_195 as callingCode };
+    }
+    namespace SD {
+        let placeholder_196: string;
+        export { placeholder_196 as placeholder };
+        let callingCode_196: string;
+        export { callingCode_196 as callingCode };
+    }
+    namespace SE {
+        let placeholder_197: string;
+        export { placeholder_197 as placeholder };
+        let callingCode_197: string;
+        export { callingCode_197 as callingCode };
+    }
+    namespace SG {
+        let placeholder_198: string;
+        export { placeholder_198 as placeholder };
+        let callingCode_198: string;
+        export { callingCode_198 as callingCode };
+    }
+    namespace SH {
+        let placeholder_199: string;
+        export { placeholder_199 as placeholder };
+        let callingCode_199: string;
+        export { callingCode_199 as callingCode };
+    }
+    namespace SI {
+        let placeholder_200: string;
+        export { placeholder_200 as placeholder };
+        let callingCode_200: string;
+        export { callingCode_200 as callingCode };
+    }
+    namespace SJ {
+        let placeholder_201: string;
+        export { placeholder_201 as placeholder };
+        let callingCode_201: string;
+        export { callingCode_201 as callingCode };
+    }
+    namespace SK {
+        let placeholder_202: string;
+        export { placeholder_202 as placeholder };
+        let callingCode_202: string;
+        export { callingCode_202 as callingCode };
+    }
+    namespace SL {
+        let placeholder_203: string;
+        export { placeholder_203 as placeholder };
+        let callingCode_203: string;
+        export { callingCode_203 as callingCode };
+    }
+    namespace SM {
+        let placeholder_204: string;
+        export { placeholder_204 as placeholder };
+        let callingCode_204: string;
+        export { callingCode_204 as callingCode };
+    }
+    namespace SN {
+        let placeholder_205: string;
+        export { placeholder_205 as placeholder };
+        let callingCode_205: string;
+        export { callingCode_205 as callingCode };
+    }
+    namespace SO {
+        let placeholder_206: string;
+        export { placeholder_206 as placeholder };
+        let callingCode_206: string;
+        export { callingCode_206 as callingCode };
+    }
+    namespace SR {
+        let placeholder_207: string;
+        export { placeholder_207 as placeholder };
+        let callingCode_207: string;
+        export { callingCode_207 as callingCode };
+    }
+    namespace SS {
+        let placeholder_208: string;
+        export { placeholder_208 as placeholder };
+        let callingCode_208: string;
+        export { callingCode_208 as callingCode };
+    }
+    namespace ST {
+        let placeholder_209: string;
+        export { placeholder_209 as placeholder };
+        let callingCode_209: string;
+        export { callingCode_209 as callingCode };
+    }
+    namespace SV {
+        let placeholder_210: string;
+        export { placeholder_210 as placeholder };
+        let callingCode_210: string;
+        export { callingCode_210 as callingCode };
+    }
+    namespace SX {
+        let placeholder_211: string;
+        export { placeholder_211 as placeholder };
+        let callingCode_211: string;
+        export { callingCode_211 as callingCode };
+    }
+    namespace SY {
+        let placeholder_212: string;
+        export { placeholder_212 as placeholder };
+        let callingCode_212: string;
+        export { callingCode_212 as callingCode };
+    }
+    namespace SZ {
+        let placeholder_213: string;
+        export { placeholder_213 as placeholder };
+        let callingCode_213: string;
+        export { callingCode_213 as callingCode };
+    }
+    namespace TA {
+        let placeholder_214: string;
+        export { placeholder_214 as placeholder };
+        let callingCode_214: string;
+        export { callingCode_214 as callingCode };
+    }
+    namespace TC {
+        let placeholder_215: string;
+        export { placeholder_215 as placeholder };
+        let callingCode_215: string;
+        export { callingCode_215 as callingCode };
+    }
+    namespace TD {
+        let placeholder_216: string;
+        export { placeholder_216 as placeholder };
+        let callingCode_216: string;
+        export { callingCode_216 as callingCode };
+    }
+    namespace TF {
+        let placeholder_217: string;
+        export { placeholder_217 as placeholder };
+        let callingCode_217: string;
+        export { callingCode_217 as callingCode };
+    }
+    namespace TG {
+        let placeholder_218: string;
+        export { placeholder_218 as placeholder };
+        let callingCode_218: string;
+        export { callingCode_218 as callingCode };
+    }
+    namespace TH {
+        let placeholder_219: string;
+        export { placeholder_219 as placeholder };
+        let callingCode_219: string;
+        export { callingCode_219 as callingCode };
+    }
+    namespace TJ {
+        let placeholder_220: string;
+        export { placeholder_220 as placeholder };
+        let callingCode_220: string;
+        export { callingCode_220 as callingCode };
+    }
+    namespace TK {
+        let placeholder_221: string;
+        export { placeholder_221 as placeholder };
+        let callingCode_221: string;
+        export { callingCode_221 as callingCode };
+    }
+    namespace TL {
+        let placeholder_222: string;
+        export { placeholder_222 as placeholder };
+        let callingCode_222: string;
+        export { callingCode_222 as callingCode };
+    }
+    namespace TM {
+        let placeholder_223: string;
+        export { placeholder_223 as placeholder };
+        let callingCode_223: string;
+        export { callingCode_223 as callingCode };
+    }
+    namespace TN {
+        let placeholder_224: string;
+        export { placeholder_224 as placeholder };
+        let callingCode_224: string;
+        export { callingCode_224 as callingCode };
+    }
+    namespace TO {
+        let placeholder_225: string;
+        export { placeholder_225 as placeholder };
+        let callingCode_225: string;
+        export { callingCode_225 as callingCode };
+    }
+    namespace TR {
+        let placeholder_226: string;
+        export { placeholder_226 as placeholder };
+        let callingCode_226: string;
+        export { callingCode_226 as callingCode };
+    }
+    namespace TT {
+        let placeholder_227: string;
+        export { placeholder_227 as placeholder };
+        let callingCode_227: string;
+        export { callingCode_227 as callingCode };
+    }
+    namespace TV {
+        let placeholder_228: string;
+        export { placeholder_228 as placeholder };
+        let callingCode_228: string;
+        export { callingCode_228 as callingCode };
+    }
+    namespace TW {
+        let placeholder_229: string;
+        export { placeholder_229 as placeholder };
+        let callingCode_229: string;
+        export { callingCode_229 as callingCode };
+    }
+    namespace TZ {
+        let placeholder_230: string;
+        export { placeholder_230 as placeholder };
+        let callingCode_230: string;
+        export { callingCode_230 as callingCode };
+    }
+    namespace UA {
+        let placeholder_231: string;
+        export { placeholder_231 as placeholder };
+        let callingCode_231: string;
+        export { callingCode_231 as callingCode };
+    }
+    namespace UG {
+        let placeholder_232: string;
+        export { placeholder_232 as placeholder };
+        let callingCode_232: string;
+        export { callingCode_232 as callingCode };
+    }
+    namespace US {
+        let placeholder_233: string;
+        export { placeholder_233 as placeholder };
+        let callingCode_233: string;
+        export { callingCode_233 as callingCode };
+    }
+    namespace UY {
+        let placeholder_234: string;
+        export { placeholder_234 as placeholder };
+        let callingCode_234: string;
+        export { callingCode_234 as callingCode };
+    }
+    namespace UZ {
+        let placeholder_235: string;
+        export { placeholder_235 as placeholder };
+        let callingCode_235: string;
+        export { callingCode_235 as callingCode };
+    }
+    namespace VA {
+        let placeholder_236: string;
+        export { placeholder_236 as placeholder };
+        let callingCode_236: string;
+        export { callingCode_236 as callingCode };
+    }
+    namespace VC {
+        let placeholder_237: string;
+        export { placeholder_237 as placeholder };
+        let callingCode_237: string;
+        export { callingCode_237 as callingCode };
+    }
+    namespace VE {
+        let placeholder_238: string;
+        export { placeholder_238 as placeholder };
+        let callingCode_238: string;
+        export { callingCode_238 as callingCode };
+    }
+    namespace VG {
+        let placeholder_239: string;
+        export { placeholder_239 as placeholder };
+        let callingCode_239: string;
+        export { callingCode_239 as callingCode };
+    }
+    namespace VI {
+        let placeholder_240: string;
+        export { placeholder_240 as placeholder };
+        let callingCode_240: string;
+        export { callingCode_240 as callingCode };
+    }
+    namespace VN {
+        let placeholder_241: string;
+        export { placeholder_241 as placeholder };
+        let callingCode_241: string;
+        export { callingCode_241 as callingCode };
+    }
+    namespace VU {
+        let placeholder_242: string;
+        export { placeholder_242 as placeholder };
+        let callingCode_242: string;
+        export { callingCode_242 as callingCode };
+    }
+    namespace WF {
+        let placeholder_243: string;
+        export { placeholder_243 as placeholder };
+        let callingCode_243: string;
+        export { callingCode_243 as callingCode };
+    }
+    namespace WS {
+        let placeholder_244: string;
+        export { placeholder_244 as placeholder };
+        let callingCode_244: string;
+        export { callingCode_244 as callingCode };
+    }
+    namespace XK {
+        let placeholder_245: string;
+        export { placeholder_245 as placeholder };
+        let callingCode_245: string;
+        export { callingCode_245 as callingCode };
+    }
+    namespace YE {
+        let placeholder_246: string;
+        export { placeholder_246 as placeholder };
+        let callingCode_246: string;
+        export { callingCode_246 as callingCode };
+    }
+    namespace YT {
+        let placeholder_247: string;
+        export { placeholder_247 as placeholder };
+        let callingCode_247: string;
+        export { callingCode_247 as callingCode };
+    }
+    namespace ZA {
+        let placeholder_248: string;
+        export { placeholder_248 as placeholder };
+        let callingCode_248: string;
+        export { callingCode_248 as callingCode };
+    }
+    namespace ZM {
+        let placeholder_249: string;
+        export { placeholder_249 as placeholder };
+        let callingCode_249: string;
+        export { callingCode_249 as callingCode };
+    }
+    namespace ZW {
+        let placeholder_250: string;
+        export { placeholder_250 as placeholder };
+        let callingCode_250: string;
+        export { callingCode_250 as callingCode };
+    }
 }
 /**
  * Given a country code, get the correct phone number placeholder.
@@ -1518,7 +1518,4 @@ export function getPhoneNumberPlaceholder(countryCode: string): string;
  * @param {Array.<string>} availableCountryCodes
  * @returns {string}
  */
-export function createCountryCallingCodeOptions(
-	selectedCountryCode: string,
-	availableCountryCodes: Array<string>,
-): string;
+export function createCountryCallingCodeOptions(selectedCountryCode: string, availableCountryCodes: Array<string>): string;
diff --git a/types/settings-parse.d.ts b/types/settings-parse.d.ts
index d76e75a..1113608 100644
--- a/types/settings-parse.d.ts
+++ b/types/settings-parse.d.ts
@@ -22,6 +22,6 @@ export function getDefaultSettings(): any;
  * settings
  */
 export function parseSettings(template: string): {
-	template: string;
-	settings: any;
+    template: string;
+    settings: any;
 };
diff --git a/types/slides-parse.d.ts b/types/slides-parse.d.ts
index e70cb5b..9d34b5b 100644
--- a/types/slides-parse.d.ts
+++ b/types/slides-parse.d.ts
@@ -17,18 +17,12 @@
  * @returns {{template: string, slideType:"start"|"body"|"end"}} template with
  * parsed slides, type of the slide
  */
-export function parseSlide(
-	template: string,
-	isForm: boolean,
-	isFirstSlide: boolean,
-	btnSettings: {
-		showRestartBtn: boolean;
-		submitBtnText: string;
-	},
-	localization: string,
-): {
-	template: string;
-	slideType: "start" | "body" | "end";
+export function parseSlide(template: string, isForm: boolean, isFirstSlide: boolean, btnSettings: {
+    showRestartBtn: boolean;
+    submitBtnText: string;
+}, localization: string): {
+    template: string;
+    slideType: "start" | "body" | "end";
 };
 /**
  * Given a template string, parse the slides. Slides are created wherever the
@@ -41,16 +35,10 @@ export function parseSlide(
  * @param {string} slideDelimiter
  * @returns {string} template with parsed slides
  */
-export function parseSlides(
-	template: string,
-	isForm: boolean,
-	btnSettings: {
-		showRestartBtn: boolean;
-		submitBtnText: string;
-	},
-	localization: string,
-	slideDelimiter: string,
-): string;
+export function parseSlides(template: string, isForm: boolean, btnSettings: {
+    showRestartBtn: boolean;
+    submitBtnText: string;
+}, localization: string, slideDelimiter: string): string;
 /**
  * Parse slides for lazy loading - returns first slide HTML and stores definitions
  *
@@ -61,19 +49,13 @@ export function parseSlides(
  * @param {string} slideDelimiter
  * @returns {{firstSlideHtml: string, slideDefinitions: Array, endSlideDefinition: string}} first slide HTML and slide definitions
  */
-export function parseSlidesLazy(
-	template: string,
-	isForm: boolean,
-	btnSettings: {
-		showRestartBtn: boolean;
-		submitBtnText: string;
-	},
-	localization: string,
-	slideDelimiter: string,
-): {
-	firstSlideHtml: string;
-	slideDefinitions: any[];
-	endSlideDefinition: string;
+export function parseSlidesLazy(template: string, isForm: boolean, btnSettings: {
+    showRestartBtn: boolean;
+    submitBtnText: string;
+}, localization: string, slideDelimiter: string): {
+    firstSlideHtml: string;
+    slideDefinitions: any[];
+    endSlideDefinition: string;
 };
 /**
  * Render a slide from its definition
@@ -85,13 +67,7 @@ export function parseSlidesLazy(
  * @param {string} localization
  * @returns {string} slide HTML
  */
-export function renderSlideFromDefinition(
-	slideDefinition: string,
-	isForm: boolean,
-	isFirstSlide: boolean,
-	btnSettings: {
-		showRestartBtn: boolean;
-		submitBtnText: string;
-	},
-	localization: string,
-): string;
+export function renderSlideFromDefinition(slideDefinition: string, isForm: boolean, isFirstSlide: boolean, btnSettings: {
+    showRestartBtn: boolean;
+    submitBtnText: string;
+}, localization: string): string;
diff --git a/types/spreadsheet-data-parse.d.ts b/types/spreadsheet-data-parse.d.ts
index 6d4ddf2..6b40f46 100644
--- a/types/spreadsheet-data-parse.d.ts
+++ b/types/spreadsheet-data-parse.d.ts
@@ -5,10 +5,7 @@
  * @param {string} delimiter
  * @returns {{dataSpreadsheet: Object, dataNormalized: Object[]}}
  */
-export function parseSpreadsheetData(
-	data: string,
-	delimiter: string,
-): {
-	dataSpreadsheet: any;
-	dataNormalized: any[];
+export function parseSpreadsheetData(data: string, delimiter: string): {
+    dataSpreadsheet: any;
+    dataNormalized: any[];
 };
diff --git a/types/templates-create.d.ts b/types/templates-create.d.ts
index a098726..e75cb82 100644
--- a/types/templates-create.d.ts
+++ b/types/templates-create.d.ts
@@ -5,7 +5,7 @@
  * @returns {string} the contents of the stylesheet
  */
 export function createStyles(settings: any): string;
-export const madeInLoaderTemplate: '\n<div class="fmd-backdrop"></div>\n\n<div class="fmd-main">\n\t<div class="fmd-main-container">\n\t\t<div class="fmd-loader-container">\n\t\t\t<div class="fmd-text-center fmd-mb-3">\n\t\t\t\t{% if settings["formsmd-branding"] != "hide" %}\n\t\t\t\t{{ translations.madeInLoader | safe }}\n\t\t\t\t{% else %}\n\t\t\t\t<div class="fmd-specific-fs-20 fmd-text-emphasis fmd-fw-bold">{{ translations.loading }}...</div>\n\t\t\t\t{% endif %}\n\t\t\t</div>\n\t\t\t<div class="fmd-loader-progress" role="status" aria-label="{{ translations.loading }}"></div>\n\t\t</div>\n\t</div>\n</div>\n';
+export const madeInLoaderTemplate: "\n<div class=\"fmd-backdrop\"></div>\n\n<div class=\"fmd-main\">\n\t<div class=\"fmd-main-container\">\n\t\t<div class=\"fmd-loader-container\">\n\t\t\t<div class=\"fmd-text-center fmd-mb-3\">\n\t\t\t\t{% if settings[\"formsmd-branding\"] != \"hide\" %}\n\t\t\t\t{{ translations.madeInLoader | safe }}\n\t\t\t\t{% else %}\n\t\t\t\t<div class=\"fmd-specific-fs-20 fmd-text-emphasis fmd-fw-bold\">{{ translations.loading }}...</div>\n\t\t\t\t{% endif %}\n\t\t\t</div>\n\t\t\t<div class=\"fmd-loader-progress\" role=\"status\" aria-label=\"{{ translations.loading }}\"></div>\n\t\t</div>\n\t</div>\n</div>\n";
 /**
  * Create the body template.
  *
@@ -14,8 +14,8 @@ export const madeInLoaderTemplate: '\n<div class="fmd-backdrop"></div>\n\n<div c
  * updated settings
  */
 export function createBodyTemplate(settings: any): {
-	template: string;
-	settings: any;
+    template: string;
+    settings: any;
 };
 /**
  * Create the content template.
@@ -27,12 +27,7 @@ export function createBodyTemplate(settings: any): {
  * @returns {{template: string, bindDivTemplates: Object}} template and bind
  * <div> templates
  */
-export function createContentTemplate(
-	template: string,
-	settings: any,
-	data: any,
-	windowAndSanitize: boolean,
-): {
-	template: string;
-	bindDivTemplates: any;
+export function createContentTemplate(template: string, settings: any, data: any, windowAndSanitize: boolean): {
+    template: string;
+    bindDivTemplates: any;
 };
diff --git a/types/translations.d.ts b/types/translations.d.ts
index fc4b9a6..7af3694 100644
--- a/types/translations.d.ts
+++ b/types/translations.d.ts
@@ -1,429 +1,429 @@
 export namespace translations {
-	let en: {
-		"choice-field-required": string;
-		"choose-many-text": string;
-		"copy-btn": string;
-		"copy-btn-success": string;
-		"country-calling-code-label": string;
-		"date-input-error": string;
-		"datetime-input-error": string;
-		"end-slide-title": string;
-		"end-slide-subtitle": string;
-		"file-input-change": string;
-		"file-input-choose": string;
-		"file-input-clear-check": string;
-		"file-input-currently": string;
-		"file-input-reset-btn": string;
-		"file-input-size-error": string;
-		"file-input-size-limit": string;
-		"form-submit-btn": string;
-		"form-submitted-title": string;
-		"form-submitted-subtitle": string;
-		"list-check": string;
-		"list-checked": string;
-		"loading": string;
-		"made-in-btn": string;
-		"made-in-loader": string;
-		"next-btn": string;
-		"nps-label-end": string;
-		"nps-label-start": string;
-		"number-choice-field-required": string;
-		"number-input-placeholder": string;
-		"page-progress": string;
-		"phone-number-label": string;
-		"previous-btn": string;
-		"required": string;
-		"restart-btn": string;
-		"select-box-placeholder": string;
-		"slide-error": string;
-		"star-plural": string;
-		"star-singular": string;
-		"start-btn": string;
-		"start-survey-btn": string;
-		"create-survey-btn": string;
-		"redirecting-message": string;
-		"text-input-placeholder": string;
-		"textarea-new-line-text": string;
-		"time-input-error": string;
-		"toggle-color-scheme-btn": string;
-		"try-again-btn": string;
-	};
-	let ar: {
-		"choice-field-required": string;
-		"choose-many-text": string;
-		"copy-btn": string;
-		"copy-btn-success": string;
-		"country-calling-code-label": string;
-		"date-input-error": string;
-		"datetime-input-error": string;
-		"end-slide-title": string;
-		"end-slide-subtitle": string;
-		"file-input-change": string;
-		"file-input-choose": string;
-		"file-input-clear-check": string;
-		"file-input-currently": string;
-		"file-input-reset-btn": string;
-		"file-input-size-error": string;
-		"file-input-size-limit": string;
-		"form-submit-btn": string;
-		"form-submitted-title": string;
-		"form-submitted-subtitle": string;
-		"list-check": string;
-		"list-checked": string;
-		"loading": string;
-		"made-in-btn": string;
-		"made-in-loader": string;
-		"next-btn": string;
-		"nps-label-end": string;
-		"nps-label-start": string;
-		"number-choice-field-required": string;
-		"number-input-placeholder": string;
-		"page-progress": string;
-		"phone-number-label": string;
-		"previous-btn": string;
-		"required": string;
-		"restart-btn": string;
-		"select-box-placeholder": string;
-		"slide-error": string;
-		"star-plural": string;
-		"star-singular": string;
-		"start-btn": string;
-		"start-survey-btn": string;
-		"text-input-placeholder": string;
-		"textarea-new-line-text": string;
-		"time-input-error": string;
-		"toggle-color-scheme-btn": string;
-		"try-again-btn": string;
-	};
-	let bn: {
-		"choice-field-required": string;
-		"choose-many-text": string;
-		"copy-btn": string;
-		"copy-btn-success": string;
-		"country-calling-code-label": string;
-		"date-input-error": string;
-		"datetime-input-error": string;
-		"end-slide-title": string;
-		"end-slide-subtitle": string;
-		"file-input-change": string;
-		"file-input-choose": string;
-		"file-input-clear-check": string;
-		"file-input-currently": string;
-		"file-input-reset-btn": string;
-		"file-input-size-error": string;
-		"file-input-size-limit": string;
-		"form-submit-btn": string;
-		"form-submitted-title": string;
-		"form-submitted-subtitle": string;
-		"list-check": string;
-		"list-checked": string;
-		"loading": string;
-		"made-in-btn": string;
-		"made-in-loader": string;
-		"next-btn": string;
-		"nps-label-end": string;
-		"nps-label-start": string;
-		"number-choice-field-required": string;
-		"number-input-placeholder": string;
-		"page-progress": string;
-		"phone-number-label": string;
-		"previous-btn": string;
-		"required": string;
-		"restart-btn": string;
-		"select-box-placeholder": string;
-		"slide-error": string;
-		"star-plural": string;
-		"star-singular": string;
-		"start-btn": string;
-		"start-survey-btn": string;
-		"text-input-placeholder": string;
-		"textarea-new-line-text": string;
-		"time-input-error": string;
-		"toggle-color-scheme-btn": string;
-		"try-again-btn": string;
-	};
-	let de: {
-		"choice-field-required": string;
-		"choose-many-text": string;
-		"copy-btn": string;
-		"copy-btn-success": string;
-		"country-calling-code-label": string;
-		"date-input-error": string;
-		"datetime-input-error": string;
-		"end-slide-title": string;
-		"end-slide-subtitle": string;
-		"file-input-change": string;
-		"file-input-choose": string;
-		"file-input-clear-check": string;
-		"file-input-currently": string;
-		"file-input-reset-btn": string;
-		"file-input-size-error": string;
-		"file-input-size-limit": string;
-		"form-submit-btn": string;
-		"form-submitted-title": string;
-		"form-submitted-subtitle": string;
-		"list-check": string;
-		"list-checked": string;
-		"loading": string;
-		"made-in-btn": string;
-		"made-in-loader": string;
-		"next-btn": string;
-		"nps-label-end": string;
-		"nps-label-start": string;
-		"number-choice-field-required": string;
-		"number-input-placeholder": string;
-		"page-progress": string;
-		"phone-number-label": string;
-		"previous-btn": string;
-		"required": string;
-		"restart-btn": string;
-		"select-box-placeholder": string;
-		"slide-error": string;
-		"star-plural": string;
-		"star-singular": string;
-		"start-btn": string;
-		"start-survey-btn": string;
-		"text-input-placeholder": string;
-		"textarea-new-line-text": string;
-		"time-input-error": string;
-		"toggle-color-scheme-btn": string;
-		"try-again-btn": string;
-	};
-	let es: {
-		"choice-field-required": string;
-		"choose-many-text": string;
-		"copy-btn": string;
-		"copy-btn-success": string;
-		"country-calling-code-label": string;
-		"date-input-error": string;
-		"datetime-input-error": string;
-		"end-slide-title": string;
-		"end-slide-subtitle": string;
-		"file-input-change": string;
-		"file-input-choose": string;
-		"file-input-clear-check": string;
-		"file-input-currently": string;
-		"file-input-reset-btn": string;
-		"file-input-size-error": string;
-		"file-input-size-limit": string;
-		"form-submit-btn": string;
-		"form-submitted-title": string;
-		"form-submitted-subtitle": string;
-		"list-check": string;
-		"list-checked": string;
-		"loading": string;
-		"made-in-btn": string;
-		"made-in-loader": string;
-		"next-btn": string;
-		"nps-label-end": string;
-		"nps-label-start": string;
-		"number-choice-field-required": string;
-		"number-input-placeholder": string;
-		"page-progress": string;
-		"phone-number-label": string;
-		"previous-btn": string;
-		"required": string;
-		"restart-btn": string;
-		"select-box-placeholder": string;
-		"slide-error": string;
-		"star-plural": string;
-		"star-singular": string;
-		"start-btn": string;
-		"start-survey-btn": string;
-		"text-input-placeholder": string;
-		"textarea-new-line-text": string;
-		"time-input-error": string;
-		"toggle-color-scheme-btn": string;
-		"try-again-btn": string;
-	};
-	let fr: {
-		"choice-field-required": string;
-		"choose-many-text": string;
-		"copy-btn": string;
-		"copy-btn-success": string;
-		"country-calling-code-label": string;
-		"date-input-error": string;
-		"datetime-input-error": string;
-		"end-slide-title": string;
-		"end-slide-subtitle": string;
-		"file-input-change": string;
-		"file-input-choose": string;
-		"file-input-clear-check": string;
-		"file-input-currently": string;
-		"file-input-reset-btn": string;
-		"file-input-size-error": string;
-		"file-input-size-limit": string;
-		"form-submit-btn": string;
-		"form-submitted-title": string;
-		"form-submitted-subtitle": string;
-		"list-check": string;
-		"list-checked": string;
-		"loading": string;
-		"made-in-btn": string;
-		"made-in-loader": string;
-		"next-btn": string;
-		"nps-label-end": string;
-		"nps-label-start": string;
-		"number-choice-field-required": string;
-		"number-input-placeholder": string;
-		"page-progress": string;
-		"phone-number-label": string;
-		"previous-btn": string;
-		"required": string;
-		"restart-btn": string;
-		"select-box-placeholder": string;
-		"slide-error": string;
-		"star-plural": string;
-		"star-singular": string;
-		"start-btn": string;
-		"start-survey-btn": string;
-		"text-input-placeholder": string;
-		"textarea-new-line-text": string;
-		"time-input-error": string;
-		"toggle-color-scheme-btn": string;
-		"try-again-btn": string;
-	};
-	let ja: {
-		"choice-field-required": string;
-		"choose-many-text": string;
-		"copy-btn": string;
-		"copy-btn-success": string;
-		"country-calling-code-label": string;
-		"date-input-error": string;
-		"datetime-input-error": string;
-		"end-slide-title": string;
-		"end-slide-subtitle": string;
-		"file-input-change": string;
-		"file-input-choose": string;
-		"file-input-clear-check": string;
-		"file-input-currently": string;
-		"file-input-reset-btn": string;
-		"file-input-size-error": string;
-		"file-input-size-limit": string;
-		"form-submit-btn": string;
-		"form-submitted-title": string;
-		"form-submitted-subtitle": string;
-		"list-check": string;
-		"list-checked": string;
-		"loading": string;
-		"made-in-btn": string;
-		"made-in-loader": string;
-		"next-btn": string;
-		"nps-label-end": string;
-		"nps-label-start": string;
-		"number-choice-field-required": string;
-		"number-input-placeholder": string;
-		"page-progress": string;
-		"phone-number-label": string;
-		"previous-btn": string;
-		"required": string;
-		"restart-btn": string;
-		"select-box-placeholder": string;
-		"slide-error": string;
-		"star-plural": string;
-		"star-singular": string;
-		"start-btn": string;
-		"start-survey-btn": string;
-		"text-input-placeholder": string;
-		"textarea-new-line-text": string;
-		"time-input-error": string;
-		"toggle-color-scheme-btn": string;
-		"try-again-btn": string;
-	};
-	let pt: {
-		"choice-field-required": string;
-		"choose-many-text": string;
-		"copy-btn": string;
-		"copy-btn-success": string;
-		"country-calling-code-label": string;
-		"date-input-error": string;
-		"datetime-input-error": string;
-		"end-slide-title": string;
-		"end-slide-subtitle": string;
-		"file-input-change": string;
-		"file-input-choose": string;
-		"file-input-clear-check": string;
-		"file-input-currently": string;
-		"file-input-reset-btn": string;
-		"file-input-size-error": string;
-		"file-input-size-limit": string;
-		"form-submit-btn": string;
-		"form-submitted-title": string;
-		"form-submitted-subtitle": string;
-		"list-check": string;
-		"list-checked": string;
-		"loading": string;
-		"made-in-btn": string;
-		"made-in-loader": string;
-		"next-btn": string;
-		"nps-label-end": string;
-		"nps-label-start": string;
-		"number-choice-field-required": string;
-		"number-input-placeholder": string;
-		"page-progress": string;
-		"phone-number-label": string;
-		"previous-btn": string;
-		"required": string;
-		"restart-btn": string;
-		"select-box-placeholder": string;
-		"slide-error": string;
-		"star-plural": string;
-		"star-singular": string;
-		"start-btn": string;
-		"start-survey-btn": string;
-		"text-input-placeholder": string;
-		"textarea-new-line-text": string;
-		"time-input-error": string;
-		"toggle-color-scheme-btn": string;
-		"try-again-btn": string;
-	};
-	let zh: {
-		"choice-field-required": string;
-		"choose-many-text": string;
-		"copy-btn": string;
-		"copy-btn-success": string;
-		"country-calling-code-label": string;
-		"date-input-error": string;
-		"datetime-input-error": string;
-		"end-slide-title": string;
-		"end-slide-subtitle": string;
-		"file-input-change": string;
-		"file-input-choose": string;
-		"file-input-clear-check": string;
-		"file-input-currently": string;
-		"file-input-reset-btn": string;
-		"file-input-size-error": string;
-		"file-input-size-limit": string;
-		"form-submit-btn": string;
-		"form-submitted-title": string;
-		"form-submitted-subtitle": string;
-		"list-check": string;
-		"list-checked": string;
-		"loading": string;
-		"made-in-btn": string;
-		"made-in-loader": string;
-		"next-btn": string;
-		"nps-label-end": string;
-		"nps-label-start": string;
-		"number-choice-field-required": string;
-		"number-input-placeholder": string;
-		"page-progress": string;
-		"phone-number-label": string;
-		"previous-btn": string;
-		"required": string;
-		"restart-btn": string;
-		"select-box-placeholder": string;
-		"slide-error": string;
-		"star-plural": string;
-		"star-singular": string;
-		"start-btn": string;
-		"start-survey-btn": string;
-		"text-input-placeholder": string;
-		"textarea-new-line-text": string;
-		"time-input-error": string;
-		"toggle-color-scheme-btn": string;
-		"try-again-btn": string;
-	};
+    let en: {
+        "choice-field-required": string;
+        "choose-many-text": string;
+        "copy-btn": string;
+        "copy-btn-success": string;
+        "country-calling-code-label": string;
+        "date-input-error": string;
+        "datetime-input-error": string;
+        "end-slide-title": string;
+        "end-slide-subtitle": string;
+        "file-input-change": string;
+        "file-input-choose": string;
+        "file-input-clear-check": string;
+        "file-input-currently": string;
+        "file-input-reset-btn": string;
+        "file-input-size-error": string;
+        "file-input-size-limit": string;
+        "form-submit-btn": string;
+        "form-submitted-title": string;
+        "form-submitted-subtitle": string;
+        "list-check": string;
+        "list-checked": string;
+        loading: string;
+        "made-in-btn": string;
+        "made-in-loader": string;
+        "next-btn": string;
+        "nps-label-end": string;
+        "nps-label-start": string;
+        "number-choice-field-required": string;
+        "number-input-placeholder": string;
+        "page-progress": string;
+        "phone-number-label": string;
+        "previous-btn": string;
+        required: string;
+        "restart-btn": string;
+        "select-box-placeholder": string;
+        "slide-error": string;
+        "star-plural": string;
+        "star-singular": string;
+        "start-btn": string;
+        "start-survey-btn": string;
+        "create-survey-btn": string;
+        "redirecting-message": string;
+        "text-input-placeholder": string;
+        "textarea-new-line-text": string;
+        "time-input-error": string;
+        "toggle-color-scheme-btn": string;
+        "try-again-btn": string;
+    };
+    let ar: {
+        "choice-field-required": string;
+        "choose-many-text": string;
+        "copy-btn": string;
+        "copy-btn-success": string;
+        "country-calling-code-label": string;
+        "date-input-error": string;
+        "datetime-input-error": string;
+        "end-slide-title": string;
+        "end-slide-subtitle": string;
+        "file-input-change": string;
+        "file-input-choose": string;
+        "file-input-clear-check": string;
+        "file-input-currently": string;
+        "file-input-reset-btn": string;
+        "file-input-size-error": string;
+        "file-input-size-limit": string;
+        "form-submit-btn": string;
+        "form-submitted-title": string;
+        "form-submitted-subtitle": string;
+        "list-check": string;
+        "list-checked": string;
+        loading: string;
+        "made-in-btn": string;
+        "made-in-loader": string;
+        "next-btn": string;
+        "nps-label-end": string;
+        "nps-label-start": string;
+        "number-choice-field-required": string;
+        "number-input-placeholder": string;
+        "page-progress": string;
+        "phone-number-label": string;
+        "previous-btn": string;
+        required: string;
+        "restart-btn": string;
+        "select-box-placeholder": string;
+        "slide-error": string;
+        "star-plural": string;
+        "star-singular": string;
+        "start-btn": string;
+        "start-survey-btn": string;
+        "text-input-placeholder": string;
+        "textarea-new-line-text": string;
+        "time-input-error": string;
+        "toggle-color-scheme-btn": string;
+        "try-again-btn": string;
+    };
+    let bn: {
+        "choice-field-required": string;
+        "choose-many-text": string;
+        "copy-btn": string;
+        "copy-btn-success": string;
+        "country-calling-code-label": string;
+        "date-input-error": string;
+        "datetime-input-error": string;
+        "end-slide-title": string;
+        "end-slide-subtitle": string;
+        "file-input-change": string;
+        "file-input-choose": string;
+        "file-input-clear-check": string;
+        "file-input-currently": string;
+        "file-input-reset-btn": string;
+        "file-input-size-error": string;
+        "file-input-size-limit": string;
+        "form-submit-btn": string;
+        "form-submitted-title": string;
+        "form-submitted-subtitle": string;
+        "list-check": string;
+        "list-checked": string;
+        loading: string;
+        "made-in-btn": string;
+        "made-in-loader": string;
+        "next-btn": string;
+        "nps-label-end": string;
+        "nps-label-start": string;
+        "number-choice-field-required": string;
+        "number-input-placeholder": string;
+        "page-progress": string;
+        "phone-number-label": string;
+        "previous-btn": string;
+        required: string;
+        "restart-btn": string;
+        "select-box-placeholder": string;
+        "slide-error": string;
+        "star-plural": string;
+        "star-singular": string;
+        "start-btn": string;
+        "start-survey-btn": string;
+        "text-input-placeholder": string;
+        "textarea-new-line-text": string;
+        "time-input-error": string;
+        "toggle-color-scheme-btn": string;
+        "try-again-btn": string;
+    };
+    let de: {
+        "choice-field-required": string;
+        "choose-many-text": string;
+        "copy-btn": string;
+        "copy-btn-success": string;
+        "country-calling-code-label": string;
+        "date-input-error": string;
+        "datetime-input-error": string;
+        "end-slide-title": string;
+        "end-slide-subtitle": string;
+        "file-input-change": string;
+        "file-input-choose": string;
+        "file-input-clear-check": string;
+        "file-input-currently": string;
+        "file-input-reset-btn": string;
+        "file-input-size-error": string;
+        "file-input-size-limit": string;
+        "form-submit-btn": string;
+        "form-submitted-title": string;
+        "form-submitted-subtitle": string;
+        "list-check": string;
+        "list-checked": string;
+        loading: string;
+        "made-in-btn": string;
+        "made-in-loader": string;
+        "next-btn": string;
+        "nps-label-end": string;
+        "nps-label-start": string;
+        "number-choice-field-required": string;
+        "number-input-placeholder": string;
+        "page-progress": string;
+        "phone-number-label": string;
+        "previous-btn": string;
+        required: string;
+        "restart-btn": string;
+        "select-box-placeholder": string;
+        "slide-error": string;
+        "star-plural": string;
+        "star-singular": string;
+        "start-btn": string;
+        "start-survey-btn": string;
+        "text-input-placeholder": string;
+        "textarea-new-line-text": string;
+        "time-input-error": string;
+        "toggle-color-scheme-btn": string;
+        "try-again-btn": string;
+    };
+    let es: {
+        "choice-field-required": string;
+        "choose-many-text": string;
+        "copy-btn": string;
+        "copy-btn-success": string;
+        "country-calling-code-label": string;
+        "date-input-error": string;
+        "datetime-input-error": string;
+        "end-slide-title": string;
+        "end-slide-subtitle": string;
+        "file-input-change": string;
+        "file-input-choose": string;
+        "file-input-clear-check": string;
+        "file-input-currently": string;
+        "file-input-reset-btn": string;
+        "file-input-size-error": string;
+        "file-input-size-limit": string;
+        "form-submit-btn": string;
+        "form-submitted-title": string;
+        "form-submitted-subtitle": string;
+        "list-check": string;
+        "list-checked": string;
+        loading: string;
+        "made-in-btn": string;
+        "made-in-loader": string;
+        "next-btn": string;
+        "nps-label-end": string;
+        "nps-label-start": string;
+        "number-choice-field-required": string;
+        "number-input-placeholder": string;
+        "page-progress": string;
+        "phone-number-label": string;
+        "previous-btn": string;
+        required: string;
+        "restart-btn": string;
+        "select-box-placeholder": string;
+        "slide-error": string;
+        "star-plural": string;
+        "star-singular": string;
+        "start-btn": string;
+        "start-survey-btn": string;
+        "text-input-placeholder": string;
+        "textarea-new-line-text": string;
+        "time-input-error": string;
+        "toggle-color-scheme-btn": string;
+        "try-again-btn": string;
+    };
+    let fr: {
+        "choice-field-required": string;
+        "choose-many-text": string;
+        "copy-btn": string;
+        "copy-btn-success": string;
+        "country-calling-code-label": string;
+        "date-input-error": string;
+        "datetime-input-error": string;
+        "end-slide-title": string;
+        "end-slide-subtitle": string;
+        "file-input-change": string;
+        "file-input-choose": string;
+        "file-input-clear-check": string;
+        "file-input-currently": string;
+        "file-input-reset-btn": string;
+        "file-input-size-error": string;
+        "file-input-size-limit": string;
+        "form-submit-btn": string;
+        "form-submitted-title": string;
+        "form-submitted-subtitle": string;
+        "list-check": string;
+        "list-checked": string;
+        loading: string;
+        "made-in-btn": string;
+        "made-in-loader": string;
+        "next-btn": string;
+        "nps-label-end": string;
+        "nps-label-start": string;
+        "number-choice-field-required": string;
+        "number-input-placeholder": string;
+        "page-progress": string;
+        "phone-number-label": string;
+        "previous-btn": string;
+        required: string;
+        "restart-btn": string;
+        "select-box-placeholder": string;
+        "slide-error": string;
+        "star-plural": string;
+        "star-singular": string;
+        "start-btn": string;
+        "start-survey-btn": string;
+        "text-input-placeholder": string;
+        "textarea-new-line-text": string;
+        "time-input-error": string;
+        "toggle-color-scheme-btn": string;
+        "try-again-btn": string;
+    };
+    let ja: {
+        "choice-field-required": string;
+        "choose-many-text": string;
+        "copy-btn": string;
+        "copy-btn-success": string;
+        "country-calling-code-label": string;
+        "date-input-error": string;
+        "datetime-input-error": string;
+        "end-slide-title": string;
+        "end-slide-subtitle": string;
+        "file-input-change": string;
+        "file-input-choose": string;
+        "file-input-clear-check": string;
+        "file-input-currently": string;
+        "file-input-reset-btn": string;
+        "file-input-size-error": string;
+        "file-input-size-limit": string;
+        "form-submit-btn": string;
+        "form-submitted-title": string;
+        "form-submitted-subtitle": string;
+        "list-check": string;
+        "list-checked": string;
+        loading: string;
+        "made-in-btn": string;
+        "made-in-loader": string;
+        "next-btn": string;
+        "nps-label-end": string;
+        "nps-label-start": string;
+        "number-choice-field-required": string;
+        "number-input-placeholder": string;
+        "page-progress": string;
+        "phone-number-label": string;
+        "previous-btn": string;
+        required: string;
+        "restart-btn": string;
+        "select-box-placeholder": string;
+        "slide-error": string;
+        "star-plural": string;
+        "star-singular": string;
+        "start-btn": string;
+        "start-survey-btn": string;
+        "text-input-placeholder": string;
+        "textarea-new-line-text": string;
+        "time-input-error": string;
+        "toggle-color-scheme-btn": string;
+        "try-again-btn": string;
+    };
+    let pt: {
+        "choice-field-required": string;
+        "choose-many-text": string;
+        "copy-btn": string;
+        "copy-btn-success": string;
+        "country-calling-code-label": string;
+        "date-input-error": string;
+        "datetime-input-error": string;
+        "end-slide-title": string;
+        "end-slide-subtitle": string;
+        "file-input-change": string;
+        "file-input-choose": string;
+        "file-input-clear-check": string;
+        "file-input-currently": string;
+        "file-input-reset-btn": string;
+        "file-input-size-error": string;
+        "file-input-size-limit": string;
+        "form-submit-btn": string;
+        "form-submitted-title": string;
+        "form-submitted-subtitle": string;
+        "list-check": string;
+        "list-checked": string;
+        loading: string;
+        "made-in-btn": string;
+        "made-in-loader": string;
+        "next-btn": string;
+        "nps-label-end": string;
+        "nps-label-start": string;
+        "number-choice-field-required": string;
+        "number-input-placeholder": string;
+        "page-progress": string;
+        "phone-number-label": string;
+        "previous-btn": string;
+        required: string;
+        "restart-btn": string;
+        "select-box-placeholder": string;
+        "slide-error": string;
+        "star-plural": string;
+        "star-singular": string;
+        "start-btn": string;
+        "start-survey-btn": string;
+        "text-input-placeholder": string;
+        "textarea-new-line-text": string;
+        "time-input-error": string;
+        "toggle-color-scheme-btn": string;
+        "try-again-btn": string;
+    };
+    let zh: {
+        "choice-field-required": string;
+        "choose-many-text": string;
+        "copy-btn": string;
+        "copy-btn-success": string;
+        "country-calling-code-label": string;
+        "date-input-error": string;
+        "datetime-input-error": string;
+        "end-slide-title": string;
+        "end-slide-subtitle": string;
+        "file-input-change": string;
+        "file-input-choose": string;
+        "file-input-clear-check": string;
+        "file-input-currently": string;
+        "file-input-reset-btn": string;
+        "file-input-size-error": string;
+        "file-input-size-limit": string;
+        "form-submit-btn": string;
+        "form-submitted-title": string;
+        "form-submitted-subtitle": string;
+        "list-check": string;
+        "list-checked": string;
+        loading: string;
+        "made-in-btn": string;
+        "made-in-loader": string;
+        "next-btn": string;
+        "nps-label-end": string;
+        "nps-label-start": string;
+        "number-choice-field-required": string;
+        "number-input-placeholder": string;
+        "page-progress": string;
+        "phone-number-label": string;
+        "previous-btn": string;
+        required: string;
+        "restart-btn": string;
+        "select-box-placeholder": string;
+        "slide-error": string;
+        "star-plural": string;
+        "star-singular": string;
+        "start-btn": string;
+        "start-survey-btn": string;
+        "text-input-placeholder": string;
+        "textarea-new-line-text": string;
+        "time-input-error": string;
+        "toggle-color-scheme-btn": string;
+        "try-again-btn": string;
+    };
 }
 /**
  * Given a localization setting and key, get the correct translation string.
diff --git a/types/welcome-screen-template.d.ts b/types/welcome-screen-template.d.ts
index e3ed6ac..3ca24b3 100644
--- a/types/welcome-screen-template.d.ts
+++ b/types/welcome-screen-template.d.ts
@@ -9,12 +9,9 @@
  * @param {string} localization - Localization setting
  * @returns {string} Welcome screen HTML
  */
-export function createWelcomeScreen(
-	config: {
-		title: string;
-		content: string;
-		buttonText: string;
-		alignment: string;
-	},
-	localization: string,
-): string;
+export function createWelcomeScreen(config: {
+    title: string;
+    content: string;
+    buttonText: string;
+    alignment: string;
+}, localization: string): string;
diff --git a/webpack.config.cjs b/webpack.config.cjs
new file mode 100644
index 0000000..63b093d
--- /dev/null
+++ b/webpack.config.cjs
@@ -0,0 +1,74 @@
+var path = require("path");
+
+module.exports = {
+	mode: "production",
+	entry: {
+		formsmd: "./src/main.js",
+		composer: "./src/composer.js",
+	},
+	output: {
+		filename: "[name].bundle.min.js",
+		path: path.resolve(__dirname, "dist/js"),
+		library: {
+			name: "Formsmd",
+			type: "window",
+		},
+		globalObject: "window",
+	},
+	optimization: { 
+		minimize: true,
+		usedExports: false,
+		sideEffects: false,
+	},
+	resolve: {
+		fallback: {
+			"fs": false,
+			"path": false,
+			"os": false,
+			"crypto": false,
+			"stream": false,
+			"util": false,
+			"buffer": false,
+			"process": false,
+			"assert": false,
+			"url": false,
+			"querystring": false,
+			"http": false,
+			"https": false,
+			"zlib": false,
+			"events": false,
+			"child_process": false,
+			"cluster": false,
+			"dgram": false,
+			"dns": false,
+			"domain": false,
+			"module": false,
+			"net": false,
+			"readline": false,
+			"repl": false,
+			"tls": false,
+			"tty": false,
+			"vm": false,
+			"worker_threads": false
+		},
+		alias: {
+			"./slides-parse": path.resolve(__dirname, "src/slides-parse.js"),
+			"./templates-create": path.resolve(__dirname, "src/templates-create.js"),
+			"./translations": path.resolve(__dirname, "src/translations.js"),
+			"./helpers": path.resolve(__dirname, "src/helpers.js"),
+			"./form-field-create": path.resolve(__dirname, "src/form-field-create.js"),
+			"./settings-parse": path.resolve(__dirname, "src/settings-parse.js"),
+			"./data-blocks-parse": path.resolve(__dirname, "src/data-blocks-parse.js"),
+			"./div-span-parse": path.resolve(__dirname, "src/div-span-parse.js"),
+			"./attrs-parse": path.resolve(__dirname, "src/attrs-parse.js"),
+			"./marked-renderer": path.resolve(__dirname, "src/marked-renderer.js"),
+			"./phone-numbers": path.resolve(__dirname, "src/phone-numbers.js"),
+			"./spreadsheet-data-parse": path.resolve(__dirname, "src/spreadsheet-data-parse.js"),
+			"./welcome-screen-template": path.resolve(__dirname, "src/welcome-screen-template.js"),
+			"./end-slide-template": path.resolve(__dirname, "src/end-slide-template.js")
+		}
+	},
+	experiments: {
+		outputModule: false
+	},
+};
diff --git a/webpack.config.js b/webpack.config.js
deleted file mode 100644
index 7b1f9c5..0000000
--- a/webpack.config.js
+++ /dev/null
@@ -1,15 +0,0 @@
-var path = require("path");
-
-module.exports = {
-	mode: "production",
-	entry: {
-		formsmd: "./src/main.js",
-		composer: "./src/composer.js",
-	},
-	output: {
-		filename: "[name].bundle.min.js",
-		path: path.resolve(__dirname, "dist/js"),
-		libraryTarget: "window",
-	},
-	optimization: { minimize: true },
-};
